-- phpMyAdmin SQL Dump
-- version 3.3.10.4
-- http://www.phpmyadmin.net
--
-- Host: bd.asanteegames.com
-- Generation Time: Dec 12, 2013 at 05:15 AM
-- Server version: 5.1.39
-- PHP Version: 5.3.27

SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- Database: `asanteegames`
--

-- --------------------------------------------------------

--
-- Table structure for table `ethclass`
--

CREATE TABLE IF NOT EXISTS `ethclass` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `ethclass_type_id` int(11) NOT NULL,
  `title` varchar(255) NOT NULL,
  `description` text NOT NULL,
  `status` int(11) NOT NULL DEFAULT '1',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=latin1 AUTO_INCREMENT=20 ;

--
-- Dumping data for table `ethclass`
--

INSERT INTO `ethclass` (`id`, `ethclass_type_id`, `title`, `description`, `status`) VALUES
(6, 9, 'collisionBox', '<p>Describes a three dimensional collision box with position and size properties.</p>', 1),
(7, 9, 'vector2', '<p>Describes two-component vector including operator overloads.</p>', 1),
(5, 7, 'file', '<p>Object type that identifies a File stream and contains the information needed to control it, including its position indicator and all its state indicators.</p>\r\n<p><code>file</code> objects are usually created by the <code>file::open</code> method.</p>\r\n<div class="alert alert-info">\r\n<p>This object encapsulates the <code>FILE</code> object from the standard C library.</p>\r\n<p>The description above has been adapted from the <a href="http://www.cplusplus.com/reference/clibrary/cstdio/FILE/">FILE reference</a> page on <a href="http://www.cplusplus.com/">cplusplus.com</a>.</p>\r\n</div>\r\n<p>Example:</p>\r\n<pre>file f;\r\n// Open the file in ''read'' mode. Use "w" for writing\r\nstring fileName = GetExternalStorageDirectory() + "file.txt";\r\nif (f.open(fileName, "r") &gt;= 0)\r\n{\r\n    // Read the whole file into the string buffer\r\n    string str;\r\n    f.readString(f.getSize(), str); \r\n    f.close();\r\n}</pre>', 1),
(8, 9, 'vector3', '<p>Describes three-component vector including operator overloads. vector3 may also represent a color value whithin the XYZ/RGB scheme, in which the values for each channel normally range between 0 and 1 for unsaturated colors.</p>', 1),
(9, 8, 'ETHEntity', '<p>Reference object that points to an entity in scene. An <code>ETHEntity</code> must always be used as a reference (@handle). It allows entity direct manipulation. <a href="../../manual/8">More about entities</a>.</p>\r\n<p>There are several ways to retrieve a reference to a specific entity. The most common way is to use entity callbacks, but they may also be retrieved with functions like <code>SeekEntity</code> and <code>GetEntitiesFromBucket</code>.</p>\r\n<p>Examples of in-script&nbsp;<code>ETHEntity</code> usage:</p>\r\n<pre>// Moves the entity to the left\r\nvoid ETHCallback_bullet(ETHEntity@ thisEntity)\r\n{\r\n    thisEntity.AddToPosition(vector3(10,0,0)); \r\n}</pre>\r\n<pre>// finds the starting point in the map\r\nETHEntity @circle = SeekEntity("starting_point.ent");\r\nif (circle !is null)\r\n{\r\n    // Add the main character into the scene, place him at the start point and give him full HP\r\n    //                 file name,       position,             angle\r\n    int id = AddEntity("character.ent", circle.GetPosition(), 0.0f);\r\n\r\n    ETHEntity @character = SeekEntity(id);\r\n    character.SetFloat("hp", 100.0f);\r\n}</pre>', 1),
(10, 8, 'ETHInput', '<p>Games may use <code>ETHInput</code> methods to perform keyboard, mouse or joystick input tests. This is a reference object and must be used as a @handle.</p>\r\n<p>A handle to a valid <code>ETHInput</code> object can be retrieved at any time with the <code>GetInputHandle</code> function.</p>\r\n<p>Examples:</p>\r\n<pre>// if the user presses ESC, then quit\r\nETHInput @input = <strong>GetInputHandle()</strong>;\r\nif (input.KeyDown(K_ESC))\r\n{\r\n    Exit();\r\n}</pre>\r\n<pre>// gets the mouse cursor position\r\nETHInput @input = GetInputHandle();\r\nvector2 cursorPos = input.GetCursorPos();</pre>\r\n<div class="alert"><strong>Notice</strong> Touch events on desktop environments are automatically emulated by mouse click events.</div>\r\n<div class="alert"><strong>Warning</strong> Joystick support is not yet implemented on Android and iOS.</div>\r\n<div class="alert"><strong>Warning</strong>&nbsp;Mouse and keyboard events are not yet supported on Android and iOS devices.</div>', 1),
(11, 7, 'videoMode ', '<p>Describes a video mode.</p>', 1),
(13, 8, 'ETHEntityArray', '<p>This object encapsulates an array of entity handles. The <code>GetEntityArray</code> function can be used to build custom arrays from entities in scene.</p>\r\n<p>Example:</p>\r\n<pre>ETHEntityArray soldiers;\r\n\r\nvoid StartGame()\r\n{\r\n    // gets the handles to each "soldier.ent" in scene\r\n    <strong>GetEntityArray("soldier.ent", soldiers);</strong>\r\n}\r\n\r\nvoid GameLoop()\r\n{\r\n    const uint numSoldiers = soldiers.Size();\r\n\r\n    for (uint t = 0; t &lt; numSoldiers; t++)\r\n    {\r\n        // move each soldier to the right\r\n        soldiers[t].AddToPositionXY(vector2(1.0f, 0.0f));\r\n    }\r\n}\r\n</pre>\r\n<p>It is also possible to build arrays from buckets. <a href="../../manual/44">More about scene buckets</a>.</p>\r\n<pre>ETHEntityArray ents;\r\n\r\n// inserts into ents a list of all entities around the character\r\n<strong>GetEntitiesAroundBucket(character.GetCurrentBucket(), ents);\r\n</strong></pre>\r\n<pre>ETHEntityArray bucketArray;\r\n\r\n<strong>GetEntitiesFromBucket(vector2(1,1), bucketArray);</strong>\r\nfor (uint t = 0; t &lt; bucketArray.Size(); t++)\r\n{\r\n    bucketArray[t].SetColor(newColor);\r\n}\r\n</pre>', 1),
(12, 9, 'matrix4x4', '<p>Describes a 4x4 matrix.</p>', 1),
(14, 8, 'ETHPhysicsController', '<p>Provides direct access to the <code>b2Body</code> (Box2D body object) of the entity.</p>\r\n<p>This object must be obtained with the <a href="../../api/method/256"><code>ETHEntity::GetPhysicsController</code></a> method.</p>', 1),
(15, 8, 'ETHRevoluteJoint', '<p>Describes a Box2D-managed revolute joint.</p>', 1),
(16, 7, 'dateTime', '<p>This object saves system date and time automatically as soon as it is instantiated&nbsp;(its default constructor calls the <code>dateTime::update</code> method).</p>\r\n<p><code>dateTime</code> properties won''t be automatically updated. To reutilize an instance with most recent data, call the update method first, otherwise it will conserve the date, time and day of the moment it was instantiated.</p>\r\n<p>Sample:</p>\r\n<pre>dateTime dt;\r\nprint("The time is " + dt.getHours() + ":" + dt.getMinutes());\r\nprint("The day is " + dt.getDay());\r\n\r\n// some time later...\r\n\r\ndt.update();\r\nprint("The time is " + dt.getHours() + ":" + dt.getMinutes());\r\nprint("The day is " + dt.getDay());</pre>\r\n<div class="alert">This object is based on the gregorian calendar</div>', 1),
(17, 7, 'enmlFile', '<p>ENML is an human readable parsing language which is very similar to INI files. It separates its values into global entity scopes called <strong>enml-entities</strong>.</p>\r\n<p>ENML objects are very useful for saving specific game data, such as high scores, user data, preferences, and more. It was designed to be very easy and fast to write and to read, by humans or non-humans.</p>\r\n<p>As it may work directly with strings, the programmer may implement his own cryptography algorithm to protect data.</p>\r\n<p>The syntax:</p>\r\n<p>[sample.enml]</p>\r\n<pre>// my first entity\r\ntheWall\r\n{\r\n    // each attribute''s value ends with a '';'' character.\r\n    artist = Pink Floyd;\r\n    // use ''\\;'' to write '';'' characters into the attribute\r\n    formation = David Gilmour\\; Nick Mason\\; Roger Waters\\; Bob Klose;\r\n    year = 1979;\r\n}\r\n\r\n// my second entity\r\nmyCar\r\n{\r\n    name = Beetle;\r\n    year = 1978; cc = 1500;\r\n    Manufacturer = Volkswagen;\r\n\r\n    // it also supports multi-line values:\r\n    sucessorList = \r\n        Volkswagen Golf\r\n        Volkswagen Jetta (Sedan)\r\n        Volkswagen New Beetle\r\n        Volkswagen Gol (in Brazil); // don''t forget to finish with '';''\r\n}\r\n\r\nnumbers\r\n{\r\n    pi = 3.1415;\r\n    posX = 1.5;\r\n    myInteger = 13;\r\n}\r\n</pre>\r\n<p>Loading an ENML file and retrieving data:</p>\r\n<pre>const string str = GetStringFromFile(GetResourceDirectory() + "sample.enml");\r\n\r\nenmlFile f;\r\nf.parseString(str);\r\nstring name = f.get("myCar", "name");\r\nstring artist = f.get("theWall", "artist");\r\n\r\ndouble myPi;\r\nf.getDouble("numbers", "pi", myPi);\r\n\r\nfloat posX;\r\nf.getFloat("numbers", "posX", posX);\r\n\r\nuint myInteger;\r\nf.getUInt("numbers", "myInteger", myInteger);</pre>\r\n<p>Writing an ENML file:</p>\r\n<pre>enmlFile f;\r\n\r\nenmlEntity entity;\r\nentity.add("class", "rogue");\r\nentity.add("level", "85");\r\nentity.add("name", "Nathan");\r\nf.addEntity("partyMember0", entity);\r\n\r\nentity.clear();\r\nentity.add("class", "paladin");\r\nentity.add("level", "71");\r\nentity.add("name", "John");\r\nf.addEntity("partyMember1", entity);\r\n\r\nstring str = f.generateString();\r\nSaveStringToFile(GetExternalStorageDirectory() + "myFile.txt", str);</pre>\r\n<p>The example above will output:</p>\r\n<p>[myFile.txt]</p>\r\n<pre>partyMember0\r\n{\r\n    class = rogue;\r\n    level = 85;\r\n    name = Nathan;\r\n}\r\n\r\npartyMember1\r\n{\r\n    class = paladin;\r\n    level = 71;\r\n    name = John;\r\n}</pre>\r\n<div class="alert alert-info">\r\n<p><strong>Heads up!</strong></p>\r\n<p>Things it cannot do:</p>\r\n<ul>\r\n<li>Can''t have trees (entities inside another entity). All entities MUST be global.</li>\r\n<li>Values that start with \\n return character.</li>\r\n<li>Receive attributes with empty values</li>\r\n</ul>\r\n<p>Remarks:</p>\r\n<ul>\r\n<li>In the files, use ''\\\\'' and ''\\;'' to input ''\\'' and '';'' characters as value</li>\r\n<li>Use ''//'' for comments. It won''t work inside value definitions.</li>\r\n</ul>\r\n</div>', 1),
(18, 7, 'enmlEntity', '<p>Describes an enml-entity object.</p>\r\n<div class="well well-small">Check the <a href="../../api/class/17">enmlFile</a> class reference for more information.</div>\r\n<p>Sample:</p>\r\n<pre>enmlFile f;\r\n\r\n<strong>enmlEntity</strong> entity;\r\nentity.add("class", "rogue");\r\nentity.add("level", "85");\r\nentity.add("name", "Nathan");\r\nf.addEntity("partyMember0", entity);\r\n\r\nentity.clear();\r\nentity.add("class", "paladin");\r\nentity.add("level", "71");\r\nentity.add("name", "John");\r\nf.addEntity("partyMember1", entity);\r\n\r\nstring str = f.generateString();\r\nSaveStringToFile("myFile.txt", str);</pre>\r\n<p>The example above will output:</p>\r\n<pre>[myFile.txt]<br />partyMember0\r\n{\r\n    class = rogue;\r\n    level = 85;\r\n    name = Nathan;\r\n}\r\n\r\npartyMember1\r\n{\r\n    class = paladin;\r\n    level = 71;\r\n    name = John;\r\n}</pre>', 1),
(19, 7, 'string', '<p>String objects are a special type of container, specifically designed to operate with sequences of characters.</p>\r\n<p><code>string</code> objects belong to a class with many built-in features to operate with strings in a more intuitive way.</p>\r\n<div class="well well-small">\r\n<p>Editor''s TO-DO task: describe assignment=, index[] and sum+ operators.</p>\r\n</div>', 1);

-- --------------------------------------------------------

--
-- Table structure for table `ethclass_atribute`
--

CREATE TABLE IF NOT EXISTS `ethclass_atribute` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `ethclass_id` int(11) NOT NULL,
  `title` varchar(100) NOT NULL,
  `description` text NOT NULL,
  `status` int(11) NOT NULL DEFAULT '1',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=latin1 AUTO_INCREMENT=27 ;

--
-- Dumping data for table `ethclass_atribute`
--

INSERT INTO `ethclass_atribute` (`id`, `ethclass_id`, `title`, `description`, `status`) VALUES
(1, 7, 'float x', '<p>X-axis component.</p>', 1),
(2, 7, 'float y', '<p>Y-axis component.</p>', 1),
(3, 8, 'float x', '<p>X-axis component.</p>', 1),
(4, 8, 'float y', '<p>Y-axis component.</p>', 1),
(5, 8, 'float z', '<p>Z-axis component.</p>', 1),
(6, 11, 'uint width', '<p>Screen width in pixels.</p>', 1),
(7, 11, 'uint height', '<p>Screen height in pixels.</p>', 1),
(8, 11, 'PIXEL_FORMAT format', '<p>Pixel format.</p>', 1),
(9, 6, 'vector3 pos', '<p>Box position (normaly relative to an entity origin point).</p>', 1),
(10, 6, 'vector3 size', '<p>Box width (x), height (y) and depth (z).</p>', 1),
(11, 12, 'float a11', '<p>position (1,1) in the matrix.</p>', 1),
(12, 12, 'float a12', '<p>position (1,2) in the matrix.</p>', 1),
(13, 12, 'float a13', '<p>position (1,3) in the matrix.</p>', 1),
(14, 12, 'float a14', '<p>position (1,4) in the matrix.</p>', 1),
(15, 12, 'float a21', '<p>position (2,1) in the matrix.</p>', 1),
(16, 12, 'float a22', '<p>position (2,2) in the matrix.</p>', 1),
(17, 12, 'float a23', '<p>position (2,3) in the matrix.</p>', 1),
(18, 12, 'float a24', '<p>position (2,4) in the matrix.</p>', 1),
(19, 12, 'float a31', '<p>position (3,1) in the matrix.</p>', 1),
(20, 12, 'float a32', '<p>position (3,2) in the matrix.</p>', 1),
(21, 12, 'float a33', '<p>position (3,3) in the matrix.</p>', 1),
(22, 12, 'float a34', '<p>position (3,4) in the matrix.</p>', 1),
(23, 12, 'float a41', '<p>position (4,1) in the matrix.</p>', 1),
(24, 12, 'float a42', '<p>position (4,2) in the matrix.</p>', 1),
(25, 12, 'float a43', '<p>position (4,3) in the matrix.</p>', 1),
(26, 12, 'float a44', '<p>position (4,4) in the matrix.</p>', 1);

-- --------------------------------------------------------

--
-- Table structure for table `ethclass_type`
--

CREATE TABLE IF NOT EXISTS `ethclass_type` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `description` text NOT NULL,
  `status` int(11) NOT NULL DEFAULT '1',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=latin1 AUTO_INCREMENT=10 ;

--
-- Dumping data for table `ethclass_type`
--

INSERT INTO `ethclass_type` (`id`, `title`, `description`, `status`) VALUES
(8, 'Core objects', '<p>References to Ethanon core objects</p>', 1),
(7, 'Utilities', '<p>Useful classes unrelated to the main game engine core</p>', 1),
(9, 'Math', '<p>Objects that describe mathematical elements.</p>', 1);

-- --------------------------------------------------------

--
-- Table structure for table `ethconstant`
--

CREATE TABLE IF NOT EXISTS `ethconstant` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `ethconstant_type_id` int(11) NOT NULL,
  `title` varchar(255) NOT NULL,
  `description` text NOT NULL,
  `status` int(11) NOT NULL DEFAULT '1',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=latin1 AUTO_INCREMENT=69 ;

--
-- Dumping data for table `ethconstant`
--

INSERT INTO `ethconstant` (`id`, `ethconstant_type_id`, `title`, `description`, `status`) VALUES
(3, 2, 'PIb', '<p>A float-typed &Pi;/2 value (<code>1.570796327f</code>).</p>', 1),
(2, 2, 'PI', '<p>A float-typed &Pi;&nbsp;value (<code>3.141592654f</code>).</p>', 1),
(4, 3, 'K_UP ', '<p>Keyboard&nbsp;<code>&uarr;</code>&nbsp;key.</p>', 1),
(5, 3, 'K_DOWN ', '<p>Keyboard&nbsp;<code>&darr;</code>&nbsp;key.</p>', 1),
(6, 3, 'K_LEFT ', '<p>Keyboard&nbsp;<code>&larr;</code>&nbsp;key.</p>', 1),
(7, 3, 'K_RIGHT ', '<p>Keyboard&nbsp;<code>&rarr;</code>&nbsp;key.</p>', 1),
(8, 3, 'K_PAGEDOWN', '<p>Keyboard&nbsp;<code>Page down</code>&nbsp;key.</p>', 1),
(9, 3, 'K_PAGEUP ', '<p>Keyboard&nbsp;<code>Page up</code>&nbsp;key.</p>', 1),
(10, 3, 'K_SPACE ', '<p>Keyboard&nbsp;<code>Space</code>&nbsp;key.</p>', 1),
(11, 3, 'K_ENTER ', '<p>Keyboard&nbsp;<code>Return</code>&nbsp;/ <code>Enter</code>&nbsp;key.</p>', 1),
(12, 3, 'K_DELETE ', '<p>Keyboard&nbsp;<code>Delete</code>&nbsp;key.</p>', 1),
(13, 3, 'K_HOME ', '<p>Keyboard&nbsp;<code>Home</code>&nbsp;key.</p>', 1),
(14, 3, 'K_END ', '<p>Keyboard&nbsp;<code>End</code>&nbsp;key.</p>', 1),
(15, 3, 'K_INSERT ', '<p>Keyboard&nbsp;<code>Insert</code>&nbsp;key.</p>', 1),
(16, 3, 'K_PAUSE ', '<p>Keyboard&nbsp;<code>Pause</code>&nbsp;key.</p>', 1),
(17, 3, 'K_ESC ', '<p>Keyboard&nbsp;<code>Escape</code>&nbsp;key.</p>', 1),
(18, 3, 'K_BACK ', '<p>Keyboard&nbsp;<code>Back</code>&nbsp;(backspace)&nbsp;key, or the Android default <code>Back</code> button.</p>', 1),
(19, 3, 'K_BACKSPACE ', '<p>The same as&nbsp;<code>K_BACK</code>.</p>', 1),
(20, 3, 'K_TAB ', '<p>Keyboard&nbsp;<code>Tab</code>&nbsp;key.</p>', 1),
(21, 3, 'K_PRINTSCREEN ', '<p>Keyboard&nbsp;<code>Print screen</code>&nbsp;key.</p>', 1),
(22, 3, 'K_SUBTRACT ', '<p>Keyboard&nbsp;<code>-</code>&nbsp;key.</p>', 1),
(23, 3, 'K_ADD ', '<p>Keyboard <code>+</code> key.</p>', 1),
(24, 3, 'K_F1 - K_F24 ', '<p>Keyboard&nbsp;<code>F1</code> to <code>F24</code>&nbsp;keys.</p>', 1),
(25, 3, 'K_A - K_Z  ', '<p>Keyboard ANSI character keys from A to Z.</p>', 1),
(26, 3, 'K_0  - K_9 ', '<p>Numerical keyboard keys from 0 to 9 (numpad keys are usually not included).</p>', 1),
(27, 3, 'K_MINUS ', '<p>Keyboard&nbsp;<code>-</code>&nbsp;key.</p>', 1),
(28, 3, 'K_PLUS ', '<p>Keyboard&nbsp;<code>+</code>&nbsp;key.</p>', 1),
(29, 3, 'K_COMMA ', '<p>Keyboard&nbsp;<code>,</code>&nbsp;key.</p>', 1),
(30, 3, 'K_DOT ', '<p>Keyboard&nbsp;<code>.</code>&nbsp;key.</p>', 1),
(31, 3, 'K_CTRL ', '<p>Keyboard&nbsp;<code>Ctrl</code>&nbsp;key.</p>', 1),
(32, 3, 'K_ALT ', '<p>Keyboard&nbsp;<code>Alt</code>&nbsp;key.</p>', 1),
(33, 3, 'K_SHIFT ', '<p>Keyboard&nbsp;<code>Shift</code>&nbsp;key.</p>', 1),
(34, 3, 'K_RMOUSE', '<p>Mouse right button.</p>', 1),
(35, 3, 'K_LMOUSE', '<p>Left mouse button.</p>', 1),
(36, 3, 'K_MMOUSE', '<p>Middle mouse button.</p>', 1),
(37, 4, 'JK_01 - B_32 ', '<p>Standard joystick buttons</p>', 1),
(38, 4, 'JK_UP ', '<p>Joystick non-analog up button</p>', 1),
(39, 4, 'JK_DOWN ', '<p>Joystick non-analog down button</p>', 1),
(40, 4, 'JK_LEFT ', '<p>Joystick non-analog left button</p>', 1),
(41, 4, 'JK_RIGHT', '<p>Joystick non-analog right button</p>', 1),
(42, 6, 'KS_HIT', '<p>the key/button has just been pressed.</p>', 1),
(43, 6, 'KS_UP', '<p>the key/button is not being pressed.</p>', 1),
(44, 6, 'KS_DOWN	 ', '<p>the key/button is being pressed.</p>', 1),
(45, 6, 'KS_RELEASE', '<p>the key/button has just been released.</p>', 1),
(46, 7, 'ET_HORIZONTAL', '<p>Horizontal entity type. <a href="../../manual/12">More about entity types</a>.</p>', 1),
(47, 7, 'ET_VERTICAL', '<p>Vertical entity type.&nbsp;<a href="../../manual/12">More about entity types</a>.</p>', 1),
(48, 7, 'ET_LAYERABLE ', '<p>Layerable entity type.&nbsp;<a href="../../manual/12">More about entity types</a>.</p>', 1),
(49, 8, 'DT_NODATA ', '<p>No data.&nbsp;<a href="../../manual/36">More about entity custom data</a>.</p>', 1),
(50, 8, 'DT_INT ', '<p><code>int</code>&nbsp;custom variable data type.&nbsp;<a href="../../manual/36">More about entity custom data</a>.</p>', 1),
(51, 8, 'DT_UINT ', '<p><code>uint</code>&nbsp;custom variable data type.&nbsp;<a href="../../manual/36">More about entity custom data</a>.</p>', 1),
(52, 8, 'DT_FLOAT ', '<p><code>float</code> custom variable data type. <a href="../../manual/36">More about entity custom data</a>.</p>', 1),
(53, 8, 'DT_STRING', '<p><code>string</code>&nbsp;custom variable data type.&nbsp;<a href="../../manual/36">More about entity custom data</a>.</p>', 1),
(54, 9, 'PF32BIT', '<p>32-bit color format</p>', 1),
(55, 9, 'PF16BIT', '<p>16-bit color format</p>', 1),
(56, 9, 'PFUNKNOWN', '<p>Unknown pixel format</p>', 1),
(57, 10, 'JS_DETECTED', '<p>Joystick has been detected and is ready for use.</p>', 1),
(58, 10, 'JS_NOTDETECTED', '<p>Joystick is not plugged.</p>', 1),
(59, 10, 'JS_INVALID', '<p>Device is plugged but not valid.</p>', 1),
(60, 11, 'BS_NONE', '<p>Not a physics-simulated shape.</p>', 1),
(61, 11, 'BS_BOX', '<p>Rectangular entity-body shape.</p>', 1),
(62, 11, 'BS_CIRCLE', '<p>Circular entity-body shape.</p>', 1),
(63, 11, 'BS_POLYGON', '<p>Custom convex polygon shape.</p>', 1),
(64, 11, 'BS_COMPOUND', '<p>The entity-body is composed of a number of custom sized rectangles and circles that form a single solid body.</p>', 1),
(65, 4, 'JK_NONE', '<p>No button</p>', 1),
(66, 2, 'NPOS', '<p>The maximum possible size for the <code>std::size_t</code> type. This constant is used by some string methods.</p>', 1),
(67, 8, 'DT_OBJECT', '<p>A reference to a script object.&nbsp;<a href="../../manual/36">More about entity custom data</a>.</p>', 1),
(68, 3, 'K_META', '<p><code>Windows</code> key on PCs and <code>Command</code> key on Mac.</p>', 1);

-- --------------------------------------------------------

--
-- Table structure for table `ethconstant_type`
--

CREATE TABLE IF NOT EXISTS `ethconstant_type` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `description` text NOT NULL,
  `status` int(11) NOT NULL DEFAULT '1',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=latin1 AUTO_INCREMENT=12 ;

--
-- Dumping data for table `ethconstant_type`
--

INSERT INTO `ethconstant_type` (`id`, `title`, `description`, `status`) VALUES
(3, 'KEY', '<p>Keyboard, mouse and other miscellaneous physical input keys.</p>', 1),
(2, 'Miscellaneous constants', '<p>Convenience constant values.</p>', 1),
(4, 'J_KEY', '<p>Enumerates joystick keys (digital buttons).</p>', 1),
(6, 'KEY_STATE', '<p>Enumerates user input states from a key or any touch-based switch.</p>', 1),
(7, 'ENTITY_TYPE', '<p>Enumerates entity basic types.</p>', 1),
(8, 'DATA_TYPE', '<p>Enumerates custom entity variable types.</p>', 1),
(9, 'PIXEL_FORMAT', '<p>Enumerates pixel binary formats.</p>', 1),
(10, 'J_STATUS', '<p>Enumerates joystick connection states.</p>', 1),
(11, 'BODY_SHAPE', '<p>Enumerates Box2D''s physics body types associated to entities.</p>', 1);

-- --------------------------------------------------------

--
-- Table structure for table `ethfunction`
--

CREATE TABLE IF NOT EXISTS `ethfunction` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `ethfunction_type_id` int(11) NOT NULL,
  `title` varchar(255) NOT NULL,
  `declaration` varchar(255) NOT NULL,
  `description` text NOT NULL,
  `status` int(11) NOT NULL DEFAULT '1',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=latin1 AUTO_INCREMENT=197 ;

--
-- Dumping data for table `ethfunction`
--

INSERT INTO `ethfunction` (`id`, `ethfunction_type_id`, `title`, `declaration`, `description`, `status`) VALUES
(3, 3, 'SeekEntity', 'ETHEntity@ SeekEntity(int id)', '<p>Returns a handle to the entity with the given <code>id</code>.</p>\r\n<p>Returns <code>null</code> if no entity was found.</p>\r\n<pre>const int id = AddEntity("crate.ent", pos);\r\nETHEntity@ crate = SeekEntity(id);\r\n</pre>\r\n<p>If the selected entity is temporary, this function returns <code>null</code>.</p>\r\n<div class="alert alert-block"><strong>Warning!</strong> Depending on how many entities the scene has, this function may become expensive to the CPU. Using this function too many times inside the game loop must be avoided. Consider retrieving those entities before the game loop starts and store them in an accessible place.</div>', 1),
(2, 3, 'SeekEntity', 'ETHEntity@ SeekEntity(string entityName)', '<p>Returns a handle to the entity whose name equals <code>entityName</code>. Returns <code>null</code> if it couldn''t be found.</p>\r\n<pre>AddEntity("bowser.ent", pos);\r\nETHEntity@ bowser = SeekEntity("bowser.ent");\r\n</pre>\r\n<pre>AddEntity("level_boss.ent", pos, "bowser");\r\nETHEntity@ bowser = SeekEntity("bowser");\r\n</pre>\r\n<p>If there are multiple entities with matching names, the entity handle returned by <code>SeekEntity</code> will point to the first one it could find.</p>\r\n<p>When the entity found is temporary, this function returns <code>null</code>.</p>\r\n<div class="alert alert-block"><strong>Warning!</strong> Depending on how many entities the scene has, this function may become expensive to the CPU. Using this function too many times inside the game loop must be avoided. Consider retrieving those entities before the game loop starts and store them in an accessible place.</div>', 1),
(4, 4, 'GetInputHandle', 'ETHInput@ GetInputHandle()', '<p>Returns a pointer to a valid <code>ETHInput</code> instance.</p>\r\n<pre>ETHInput@ input = <strong>GetInputHandle()</strong>;\r\nif (input.GetKeyState(K_UP) == KS_HIT)\r\n{\r\n    print("the UP key has been hit!");\r\n}\r\n</pre>', 1),
(5, 3, 'LoadScene', 'void LoadScene(string fileName)', '<p>Send a request to load a scene from the file named&nbsp;<code>fileName</code>.</p>\r\n<p>The new scene won''t have <code>onSceneLoaded</code> (pre-loop) and <code>onSceneUpdate</code> (loop) callback functions:</p>\r\n<pre>LoadScene("scenes/level1.esc");\r\n</pre>', 1),
(6, 3, 'LoadScene', 'void LoadScene(string fileName, string onSceneCreated, string onSceneUpdate)', '<p>Send a request to load the scene and assigns an <code>onSceneCreated</code> and/or an <code>onSceneUpdate</code> callback function to the new scene. <a href="../../manual/31">Read more about scene callback functions</a>.</p>\r\n<pre>LoadScene("scenes/bowser_castle.esc", "NewGame", "UpdateScene");</pre>', 1),
(7, 3, 'LoadScene', 'void LoadScene(string fileName, string onSceneCreated, string onSceneUpdate, vector2 bucketSize)', '<p>Send a scene load request and assigns an <code>onSceneCreated</code>, an <code>onSceneUpdate</code> callback function and a custom <code>bucketSize</code>.</p>\r\n<p><a href="../../manual/31">Read more about scene callback functions</a></p>\r\n<p><a href="../../manual/44">More about buckets</a></p>\r\n<pre>LoadScene("bowser_castle.esc", "NewGame", "UpdateScene", vector2(320, 128));</pre>', 1),
(8, 3, 'SaveScene', 'bool SaveScene(string fileName)', '<p>Saves the current scene into a new scene file. All custom data stored in the entities (except objects) will be saved.</p>\r\n<div class="alert alert-block">\r\n<p><strong>Deprecation alert!</strong> This function is deprecated and may soon be removed from scripting interface.</p>\r\n</div>\r\n<div class="alert alert-block">\r\n<p><strong>Warning!</strong> Loading scenes saved with this function currently work only on Windows.</p>\r\n</div>', 1),
(9, 3, 'AddEntity', 'int AddEntity(string fileName, vector3 position, float angle = 0.0f)', '<p>Adds an entity to scene with an initial <code>position.</code></p>\r\n<p>The rotation&nbsp;<code>angle</code>&nbsp;in degrees is optional.</p>\r\n<p>This function returns the new entity ID.</p>\r\n<p>Sample:</p>\r\n<pre>AddEntity("monster.ent", vector3(10.0f, 20.0f, 0.0f));</pre>', 1),
(10, 3, 'AddEntity', 'int AddEntity(string fileName, vector3 position, ETHEntity@ &out)', '<p>Adds an entity to scene with an initial <code>position</code>.</p>\r\n<p>A handle to the new entity will be assigned to <code>&amp;out</code>.</p>\r\n<p>This function returns the new entity ID.</p>\r\n<p>Example of usage:</p>\r\n<pre>// Adds a character and assign some custom data to it\r\nETHEntity @character;\r\nAddEntity("knight.ent", pos, @character);\r\ncharacter.SetFloat("speed", 100.0f);\r\ncharacter.SetUInt("strength", 38);</pre>', 1),
(11, 3, 'AddEntity', 'int AddEntity(string fileName, vector3 position, string alternativeName)', '<p>Adds a new entity to scene with an initial <code>position</code>, but instead of naming it with the default value (the actual file name), gives an alternative name to it.</p>\r\n<p>This function returns the new entity ID.</p>\r\n<pre>AddEntity("dark_knight.ent", pos, "batman");\r\nETHEntity@ knight = SeekEntity("batman");\r\nknight.SetString("phrase", "Im Batman!");\r\n</pre>', 1),
(12, 3, 'DeleteEntity', 'ETHEntity@ DeleteEntity(ETHEntity@ entity)', '<p>Deletes the <code>entity</code> and returns <code>null</code> if it has been successfully removed from scene.</p>\r\n<p>Example:</p>\r\n<pre>@character = DeleteEntity(character);\r\nif (character is null)\r\n{\r\n       print("It has been successfully deleted\\n");\r\n}</pre>\r\n<p>This function removes the entity from scene, however the memory won''t be freed if other handles still point to it. For this reason, avoid having more than one handle to the same entity (specially if there are global references).</p>', 1),
(13, 6, 'AddLight', 'void AddLight(vector3 pos, vector3 color, float rangeRayInPixels, bool castShadow)', '<p>Adds an odd dynamic light to the scene. To keep the light on it must be added at every frame.&nbsp;<a href="../../manual/15">More about odd lights</a>.</p>\r\n<p>Sample:</p>\r\n<pre>void onSceneUpdate()\r\n{\r\n    vector3 lightPos(100, 300, 10);\r\n    vector3 red(1, 0, 0);\r\n\r\n    AddLight(lightPos, red, 100.0f, false);\r\n}</pre>', 1),
(14, 3, 'GetNumEntities', 'uint GetNumEntities() ', '<p>Returns the number of entities in scene.</p>', 1),
(15, 3, 'GetNumRenderedEntities', 'int GetNumRenderedEntities()', '<p>Returns the number of entities drawn on the last time the scene was rendered.</p>\r\n<p>If the scene has never been rendered before this functions returns <code>-1</code>.</p>', 1),
(17, 3, 'GetEntityArray', 'void GetEntityArray(string entityName, ETHEntityArray &outArray)', '<p>Inserts into <code>&amp;outArray</code> handles to all entities named <code>entityName</code>.</p>\r\n<p>Example:</p>\r\n<pre>ETHEntityArray fireEntities;\r\nGetEntityArray("fire.ent", fireEntities);\r\nconst uint numFire = fireEntities.Size();\r\n\r\nfor (uint t = 0; t &lt; numFire; t++)\r\n{\r\n    fireEntities[t].PlayParticleSystem(0);\r\n}\r\n\r\n// now release all handles\r\nfireEntities.Clear();</pre>\r\n<p>This function is accumulative,&nbsp;<code>outArray</code>&nbsp;won''t be cleaned before more entities are inserted.</p>\r\n<div class="alert alert-block"><strong>Warning!</strong> Depending on how many entities the scene has, this function may become expensive to the CPU. Using this function too many times inside the game loop must be avoided. Consider retrieving those entities before the game loop starts and store them in an accessible place.</div>', 1),
(18, 3, 'GetEntitiesFromBucket', 'void GetEntitiesFromBucket(vector2 bucketKey, ETHEntityArray &outArray)', '<p>Fills the array with handles to entities from the bucket <code>bucketKey</code>. This function is accumulative, <code>&amp;outArray</code> won''t be cleaned before more entities are inserted.&nbsp;<a href="../../manual/44">More about scene buckets</a>.</p>\r\n<p>Sample:</p>\r\n<pre>// fill the array with all entities on buckets (2,2) and (0,1)\r\nETHEntityArray ents;\r\nGetEntitiesFromBucket(vector2(2,2), ents);\r\nGetEntitiesFromBucket(vector2(0,1), ents);\r\n</pre>', 1),
(19, 3, 'GetVisibleEntities', 'void GetVisibleEntities(ETHEntityArray &outArray)', '<p>Fills&nbsp;<code>&amp;outArray</code> with handles to all visible entities.</p>\r\n<p>All entities from buckets that are currently in the screen area will be inserted into the array.</p>\r\n<p>This function is accumulative, previous data in the array will be kept.</p>\r\n<div class="alert alert-block"><strong>Warning!</strong> Depending on how many entities the scene has, this function may become expensive to the CPU. Using this function too many times inside the game loop must be avoided. Consider retrieving those entities before the game loop starts and store them in an accessible place.</div>', 1),
(27, 3, 'GetSceneFileName', 'string GetSceneFileName() ', '<p>Returns the currently loaded scene file name.</p>\r\n<div>&nbsp;</div>', 1),
(28, 3, 'GetBucket', 'vector2 GetBucket(vector2 point)', '<p>Calculates and returns the bucket key where <code>point</code> belongs to. For example, in a scene with 256x256 pixels buckets, the point <code>(300,128)</code> belongs to bucket <code>(1,0)</code>.&nbsp;<a href="../../manual/44">More about scene buckets</a>.</p>', 1),
(29, 3, 'SetBorderBucketsDrawing', 'void SetBorderBucketsDrawing(bool enable) ', '<p>Toggles border bucket processing.&nbsp;<a href="../../manual/47">More about border buckets</a>.</p>', 1),
(30, 3, 'IsDrawingBorderBuckets', 'bool IsDrawingBorderBuckets() ', '<p>Returns <code>true</code> if the border bucket processing is enabled. <a href="../../manual/47">More about border buckets</a>.</p>', 1),
(31, 4, 'Exit', 'void Exit() ', '<p>Closes the game window.</p>\r\n<div class="alert alert-block"><strong>Warning</strong> This function will just minimize the game window on Android or iOS devices.</div>', 1),
(32, 4, 'SetWindowProperties', 'void SetWindowProperties(string windowTitle, uint width, uint height, bool windowed, bool vsync, const PIXEL_FORMAT)', '<p>Resets window properties.</p>\r\n<pre>SetWindowProperties("My Game", 1280, 720, true, true, PF32BIT);</pre>\r\n<p>Will only work on desktop environments.</p>', 1),
(34, 4, 'HideCursor', 'void HideCursor(bool hide) ', '<p>Hides or shows the default mouse cursor on desktop environments.</p>', 1),
(35, 4, 'GetScreenSize', 'vector2 GetScreenSize() ', '<p>Returns the current back-buffer size where <code>x</code> describes its width and <code>y</code> its height (both in pixels).</p>\r\n<p>Sample:</p>\r\n<pre>const vector2 screenMiddle = <strong>GetScreenSize()</strong> * 0.5f;</pre>', 1),
(36, 4, 'Windowed', 'bool Windowed()', '<p>Returns <code>true</code> if the application is on windowed mode.</p>', 1),
(37, 4, 'print', 'void print(string str) ', '<p>Prints to the console window.</p>', 1),
(38, 4, 'print', 'void print(const float) ', '<p>Prints a <code>float</code> primitive value to the output console.</p>', 1),
(39, 4, 'print', 'void print(const int) ', '<p>Prints an <code>int</code> primitive value (decimal) to the output console.</p>', 1),
(40, 4, 'print', 'void print(const uint) ', '<p>Prints an <code>uint</code> primitive value (decimal) to the output console.</p>', 1),
(41, 4, 'GetSystemScreenSize', 'vector2 GetSystemScreenSize() ', '<p>Returns the system''s screen size (if the application is running on windowed mode, the system screen dimension will probably differ from the back buffer size).</p>', 1),
(42, 4, 'IsPixelShaderSupported', 'bool IsPixelShaderSupported() ', '<p>Returns true if the GPU supports the required pixel shader model.</p>', 1),
(44, 6, 'GetPositionRoundUp', 'bool GetPositionRoundUp()', '<p>Returns <code>true</code> if the position roundup is enabled.</p>', 1),
(45, 14, 'GetResourceDirectory', 'string GetResourceDirectory()', '<p>Returns the full path to the directory where the game is getting its resources from (with a slash at the end). The resource directory usually is the project root, where the <code>*.ethproj</code> file is and where all resources that are bundled with the original game application are.</p>\r\n<pre>string res = <strong>GetResourceDirectory()</strong>;\r\nstring text = GetStringFromFileInPackage(res + "gameData/file.txt");\r\n\r\n// prints file.txt content:\r\nprint(text);\r\n</pre>', 1),
(46, 14, 'GetAbsolutePath', 'string GetAbsolutePath(string fileName)', '<p>Returns the absolute path of <code>fileName</code>. Example:</p>\r\n<pre>string str = GetAbsolutePath("assets/my_resource.file");\r\nprint(str);</pre>\r\n<p>Output:</p>\r\n<pre>C:/MY GAME DIRECTORY/assets/my_resource.file</pre>', 1),
(47, 4, 'EnableQuitKeys', 'void EnableQuitKeys(bool enable)', '<p>Enables or disables the window quit shortcuts (the <code>Alt+F4</code> on Windows for instance).</p>', 1),
(48, 4, 'GetArgc', 'int GetArgc() ', '<p>Retrieves the application argument count.</p>', 1),
(49, 4, 'GetArgv', 'string GetArgv(int n) ', '<p>Retrieves an application argument sent by the user usually through command line.</p>\r\n<p>Sample:</p>\r\n<pre>// List all arguments e.g.: machine.exe -test -customArg -playerInfiniteLives\r\nfor (int c = 0; c &lt; GetArgc(); c++)\r\n{\r\n    print(GetArgv(c));\r\n}\r\n</pre>\r\n<p>Output:</p>\r\n<pre>-test\r\n-customArg\r\n-playerInfiniteLives\r\n</pre>', 1),
(50, 4, 'GetVideoModeCount', 'uint GetVideoModeCount() ', '<p>Returns the number of supported video modes.</p>\r\n<p>The snippet above lists all supported video modes:</p>\r\n<pre>for (uint t = 0; t &lt; GetVideoModeCount(); t++)\r\n{\r\n    videoMode mode = GetVideoMode(t);\r\n    print("width: "  + mode.width);\r\n    print("height: " + mode.height);\r\n}</pre>', 1),
(51, 4, 'GetVideoMode', 'videoMode GetVideoMode(uint n)', '<p>Returns the supported video mode <code>n</code>.</p>\r\n<p>The snippet above lists all supported video modes:</p>\r\n<pre>for (uint t = 0; t &lt; GetVideoModeCount(); t++)\r\n{\r\n    videoMode mode = GetVideoMode(t);\r\n    print("width: "  + mode.width);\r\n    print("height: " + mode.height);\r\n}</pre>', 1),
(52, 14, 'GetStringFromFile', 'string GetStringFromFile(string fileName)', '<p>Returns the entire content from a file as a string.</p>\r\n<p>If it fails, an empty string is returned.</p>\r\n<p>Sample:</p>\r\n<pre>const string resourceDir = GetResourceDirectory();\r\nconst string content = <strong>GetStringFromFile(resourceDir + "my_file.txt")</strong>;</pre>', 1),
(53, 14, 'SaveStringToFile', 'bool SaveStringToFile(string fileName, string str)', '<p>Saves <code>str</code> content to a file. If the file already exists it will be overwritten.</p>\r\n<p>Sample:</p>\r\n<pre>string destDir = GetExternalStoragePath();\r\n<strong>SaveStringToFile(destDir + "file.sav", "Save this string into the file")</strong>;</pre>', 1),
(54, 6, 'GenerateLightmaps', 'bool GenerateLightmaps()', '<p>Recalculates scene static lightmaps (more about&nbsp;<a href="../../manual/17">how static lights affect static entities</a>).&nbsp;This function may be used to reset lighting whenever a static entity is added, moved or removed.</p>\r\n<p>Light calculations may become quite costly depending on how many lights the scene has.</p>', 1),
(55, 6, 'SetAmbientLight', 'void SetAmbientLight(vector3 color)', '<p>Sets the ambient light color. <code>x</code>, <code>y</code> and <code>z</code> attributes are used as R, G and B. Normally ranges between <code>0</code> and <code>1</code>.</p>\r\n<pre>vector3 green(0,1,0);\r\nSetAmbientLight(green);\r\n</pre>\r\n<pre>vector3 completelyDark(0,0,0);\r\nSetAmbientLight(completelyDark);\r\n</pre>\r\n<pre>vector3 fullBrightness(1,1,1);\r\nSetAmbientLight(fullBrightness);\r\n</pre>', 1),
(56, 6, 'GetAmbientLight', 'vector3 GetAmbientLight()', '<p>Gets the ambient light. <code>x</code>, <code>y</code> and <code>z</code> attributes are used as R, G and B color values. Normally ranges between <code>0</code> and <code>1</code>.</p>\r\n<pre>vector3 green(0,1,0);\r\n\r\nif (GetAmbientLight() == green)\r\n{\r\n    print("I see green people");\r\n}\r\n</pre>', 1),
(57, 6, 'SetCameraPos', 'void SetCameraPos(vector2 pos)', '<p>Sets the camera position. The camera movement can be used to scroll game scene.</p>\r\n<pre>SetCameraPos(vector2(20.0f, 30.0f));\r\n</pre>\r\n<pre>const vector2 origin(0,0);\r\nSetCameraPos(origin);\r\n</pre>', 1),
(58, 6, 'AddToCameraPos', 'void AddToCameraPos(vector2 direction)', '<p>Scrolls the scene by adding the <code>direction</code> vector to the camera position.</p>\r\n<p>Sample:</p>\r\n<pre>// moves the camera 20 pixels to the right\r\nvector2 rightDirection(20.0f, 0.0f);\r\nAddToCameraPos(rightDirection);\r\n</pre>', 1),
(59, 6, 'GetCameraPos', 'vector2 GetCameraPos()', '<p>Returns the camera position. Camera movement is used to scroll the scene.</p>', 1),
(60, 6, 'GetWorldSpaceCursorPos2', 'vector2 GetWorldSpaceCursorPos2()', '<p>Returns the current cursor position in world space (considering the camera position).</p>\r\n<pre>GetWorldSpaceCursorPos2() == (input.GetCursorPos() + GetCameraPos())\r\n</pre>', 1),
(63, 6, 'EnableLightmaps', 'void EnableLightmaps(bool enable)', '<p>Toggles pre-rendered lightmaps. It is recommended to leave it enabled for faster static light rendering. <a href="../../manual/17">More about this</a>.</p>', 1),
(64, 6, 'UsePixelShaders', 'void UsePixelShaders(bool enable)', '<p>Enables or disables pixel shaders.</p>', 1),
(65, 6, 'EnableRealTimeShadows', 'void EnableRealTimeShadows(bool enable)', '<p>Toggles real-time shadow rendering.</p>\r\n<ul class="thumbnails">\r\n<li class="span4">\r\n<div class="thumbnail"><a class="thumbnail" href="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/static-shadows.png"><img src="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/static-shadows.png" alt="" /></a>\r\n<p>Static shadows</p>\r\n</div>\r\n</li>\r\n<li class="span4">\r\n<div class="thumbnail"><a class="thumbnail" href="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/dynamic-shadows.png"><img src="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/dynamic-shadows.png" alt="" /></a>\r\n<p>Dynamic shadows</p>\r\n</div>\r\n</li>\r\n</ul>\r\n<div class="alert alert-block"><strong>Warning!</strong> Shadows are not available on OpenGL ES 2.0 implementations (Android and iOS)</div>', 1),
(179, 14, 'GetGlobalExternalStorageDirectory', 'string GetGlobalExternalStorageDirectory()', '<p>Returns the full path to the directory where the game should store files such as player information, saved game data and user preferences.</p>\r\n<p>Files in the external storage directory are not guaranteed to persist in case the game is uninstalled from the system.</p>\r\n<p><strong>Windows/iOS:</strong> the same as <code>GetExternalStorageDirectory</code></p>\r\n<p><strong>Mac OS X:</strong> <code>~/Documents/&lt;bundle-name&gt;/</code></p>\r\n<p><strong>Android:</strong> returns the path to the directory which won''t be erased if the application is removed. E.g.: <code>/sdcard/.ethanon/&lt;application_package&gt;/files</code></p>', 1),
(68, 6, 'SetBackgroundColor', 'void SetBackgroundColor(uint color)', '<p>Sets the background color. The background color is used to fill the entire back-buffer at the beginning of every frame.</p>\r\n<pre>uint white = ARGB(255,255,255,255);\r\nSetBackgroundColor(white);\r\n</pre>\r\n<pre>uint black = 0xFF000000;\r\nSetBackgroundColor(black);\r\n</pre>', 1),
(69, 6, 'GetBackgroundColor', 'uint GetBackgroundColor()', '<p>Returns the current background color in a 32-bit pixel format (e.g. <code>0xFFFF0000</code> or <code>ARGB(255,255,0,0)</code>). The background color is used to fill the entire back-buffer at the beginning of every frame.</p>\r\n<pre>uint black = 0xFF000000;\r\nuint white = ARGB(255,255,255,255);\r\n\r\nuint bgColor = GetBackgroundColor();\r\n\r\nif (bgColor == black)\r\n    print("too dark!");\r\n\r\nif (bgColor == white)\r\n    print("too bright!");\r\n</pre>', 1),
(72, 6, 'SetPositionRoundUp', 'void SetPositionRoundUp(bool enable)', '<p>Toggles the position roundup for sprites. When enabled, the engine will render sprites using integer x and y values.</p>\r\n<p><strong>Example:</strong> an entity placed at <code>vector2(1.2f, 4.888f)</code> will be rendered at <code>vector2(1, 4)</code>.</p>\r\n<p>Enabling position roundup is recommended for pixel-art style games since it prevents texture blurring.</p>', 1),
(73, 12, 'GetTimeF', 'float GetTimeF()', '<p>Returns the current elapsed time in milliseconds. The timer starts running when the application starts.</p>', 1),
(74, 12, 'GetTime', 'uint GetTime()', '<p>Returns the current elapsed time in milliseconds. The timer starts running when the application starts.</p>', 1),
(75, 7, 'rand', 'int rand(int n)', '<p>Generates and returns a random number between <code>0</code> and <code>n</code>.</p>', 1),
(76, 7, 'rand', 'int rand(int min, int max)', '<p>Generates and returns a random number between <code>min</code> and <code>max</code>.</p>', 1),
(77, 7, 'randF', 'float randF(float f)', '<p>Generates and returns a random floating point value between <code>0.0f</code> and <code>f</code>.</p>', 1),
(78, 7, 'randF', 'float randF(float min, float max)', '<p>Generates and returns a random floating point value between <code>min</code> and <code>max</code>.</p>', 1),
(79, 12, 'GetFPSRate', 'float GetFPSRate()', '<p>Returns the current FPS rate.</p>', 1),
(80, 12, 'UnitsPerSecond', 'float UnitsPerSecond(float speed) ', '<p>Returns the approximate distance that an object should move during the current frame to keep a constant speed in units per second.</p>\r\n<pre>vector2 directionLeft(-1, 0);\r\nfloat speed = UnitsPerSecond(10.0f);\r\n\r\n// move entity leftwards at 10 pixels per second\r\nentity.AddToPositionXY(directionLeft * speed);\r\n</pre>', 1),
(81, 7, 'normalize', 'vector3 normalize(vector3 v) ', '<p>Returns the normalized vector.</p>', 1),
(82, 7, 'normalize', 'vector2 normalize(vector2 v) ', '<p>Returns the normalized vector.</p>', 1),
(83, 7, 'radianToDegre', 'float radianToDegree(float angle)', '<p>Converts radians to degrees.</p>', 1),
(84, 7, 'degreeToRadian', 'float degreeToRadian(float angle)', '<p>Converts degrees to radians.</p>', 1),
(85, 7, 'ARGB', 'uint ARGB(uint8 alpha, uint8 red, uint8 green, uint8 blue)', '<p>Converts <code>alpha</code>, <code>red</code>, <code>green</code> and <code>blue</code> values to a 32-bit color format (<code>DWORD</code>).</p>\r\n<p>Sample:</p>\r\n<pre>const uint blue = ARGB(255,0,0,255);\r\nif (blue == 0xFF0000FF)\r\n    print("it works!");\r\n</pre>', 1),
(86, 13, 'parseFloat', 'float parseFloat(string str)', '<p>Parses a <code>string</code> into a <code>float</code>.</p>\r\n<p>Sample:</p>\r\n<pre>string str = "0.456";\r\nfloat value = parseFloat(str);\r\n</pre>', 1),
(87, 13, 'parseInt', 'int parseInt(string str) ', '<p>Parses a <code>string</code> into an <code>int</code> primitive.</p>\r\n<p>Sample:</p>\r\n<pre>string str = "42";\r\nint value = parseInt(str);</pre>', 1),
(88, 13, 'parseUInt', 'uint parseUInt(string str)', '<p>Parses a <code>string</code> into an <code>uint</code> primitive.</p>\r\n<p>Sample:</p>\r\n<pre>string str = "128";\r\nuint value = parseUInt(str);</pre>', 1),
(89, 7, 'length', 'float length(vector2 v)', '<p>Returns the vector length.</p>', 1),
(90, 7, 'length', 'float length(vector3 v)', '<p>Returns the vector length.</p>', 1),
(91, 7, 'distance', 'float distance(vector2 a, vector2 b)', '<p>Returns the distance between <code>a</code> and <code>b</code>.</p>', 1),
(92, 7, 'distance', 'float distance(vector3 a, vector3 b)', '<p>Returns the distance between <code>a</code> and <code>b</code>.</p>', 1),
(93, 7, 'scale', 'matrix4x4 scale(float x, float y, float z)', '<p>Builds a matrix that scales along the x-axis, the y-axis, and the z-axis.</p>', 1),
(94, 7, ' translate', 'matrix4x4 translate(float x, float y, float z)', '<p>Builds a translation matrix.</p>', 1),
(95, 7, 'rotateX', 'matrix4x4 rotateX(float radianAngle)', '<p>Builds a matrix that rotates around the x-axis.</p>', 1),
(96, 7, ' rotateY', 'matrix4x4 rotateY(float radianAngle)', '<p>Builds a matrix that rotates around the y-axis.</p>', 1),
(97, 7, 'rotateZ', 'matrix4x4 rotateZ(float radianAngle)', '<p>Builds a matrix that rotates around the z-axis.</p>', 1),
(98, 7, 'multiply', 'matrix4x4 multiply(matrix4x4 a, matrix4x4 b)', '<p>Returns the product of matrices <code>a</code> and <code>b</code>.</p>', 1),
(105, 8, 'DrawText', 'void DrawText(vector2 position, string text, string bitmapFontFile, uint color, float scale = 1.0f) ', '<p>Draw text strings to screen. This function supports bitmap fonts exported by the AngelCode''s BMFont tool (<code>*.fnt</code> files on text mode). Fonts may use multiple bitmap pages, but it is highly recommended to use only one page per font for better performance.</p>\r\n<p>The <code>*.fnt</code> font files and all its pages must be in the <code>&lt;project-directory&gt;/data/</code> folder. Ethanon Engine includes to the projects some default bitmap fonts:</p>\r\n<ul>\r\n<li>&lt;project-directory&gt;/data/Verdana14.fnt</li>\r\n<li>&lt;project-directory&gt;/data/Verdana14_shadow.fnt</li>\r\n<li>&lt;project-directory&gt;/data/Verdana20.fnt</li>\r\n<li>&lt;project-directory&gt;/data/Verdana20_shadow.fnt</li>\r\n<li>&lt;project-directory&gt;/data/Verdana24.fnt</li>\r\n<li>&lt;project-directory&gt;/data/Verdana24_shadow.fnt</li>\r\n<li>&lt;project-directory&gt;/data/Verdana30.fnt</li>\r\n<li>&lt;project-directory&gt;/data/Verdana30_shadow.fnt</li>\r\n<li>&lt;project-directory&gt;/data/Verdana64.fnt</li>\r\n</ul>\r\n<p>Font files listed above are included by default. The user may create and edit his own fonts with BMFont.</p>\r\n<pre>// text drawing example\r\nDrawText(vector2(0,200), "Text drawing test!", "Verdana14_shadow.fnt", ARGB(250,255,255,255));</pre>', 1),
(106, 8, 'DrawFadingText', 'void DrawFadingText(vector2 pos, string text, string bitmapFontFile, uint color, uint lifeTimeMS)', '<p>Draws a temporary fading text string that will last <code>lifeTimeMS</code> millisecons.</p>\r\n<pre>const uint white = ARGB(255,255,255,255);\r\n\r\n// this text will last 2 seconds in screen\r\nDrawFadingText(pos, "the lazy grey fox", "Verdana20.fnt", white, 2000);\r\n</pre>', 1),
(107, 8, 'ComputeCarretPosition', 'vector2 ComputeCarretPosition(string bitmapFontFile, string text, uint cursorPos)', '<p>Computes and returns the carret 2D coordinates based on the <code>cursorPos</code>.</p>\r\n<pre>const string text = "the quick brown fox";\r\nconst uint qCharPos = 4;\r\n\r\n// find the position of the letter ''q'':\r\nconst vector2 carretPos(ComputeCarretPosition("Verdana20.fnt", text, qCharPos));\r\n\r\nconst vector2 textPos(20,40);\r\nDrawText(textPos, text, "Verdana20.fnt", 0xFFFFFFFF);\r\n\r\n// draw a sprite over the ''q'' character\r\nDrawSprite("sprites/circle.png", textPos + carretPos, 0xFFFFFFFF);\r\n</pre>', 1),
(108, 8, 'ComputeTextBoxSize', 'vector2 ComputeTextBoxSize(string bitmapFontFile, string text)', '<p>Computes and returns the text bounding box size.</p>\r\n<pre>const string text = "the quick brown fox";\r\nvector2 boxSize = ComputeTextBoxSize("Verdana20.fnt", text);\r\n\r\n// draw a rectangular frame behind the text\r\nDrawShapedSprite("sprites/circle.png", pos, boxSize, 0xFFFFFFFF);\r\nDrawText(pos, text, "Verdana20.fnt", 0xFFFFFFFF);\r\n</pre>', 1),
(109, 8, 'LoadSprite', 'void LoadSprite(string fileName)', '<p>Load sprite bitmaps into video memory which can be used to draw in-game menus and such items. Using this function to load bitmap files that are used by game entities will preload its textures, preventing the in-game lag that happens when the entity has to draw an entity whose bitmaps haven''t been loaded yet.</p>\r\n<pre>void onSceneLoaded()\r\n{\r\n    // load a 256x256 sprite\r\n    LoadSprite("animations/animated_sprite_256x256.png");\r\n    // divides the sprite into a 4x2 rect (4 columns and 2 rows)\r\n    SetupSpriteRects("animations/animated_sprite_256x256.png", 4, 2);\r\n\r\n    // preloads entity bitmaps so the engine doesn''t have to load it during gameplay\r\n    LoadSprite("entities/level1boss.png");<br />    LoadSprite("entities/normalmaps/level1boss_normal.png");\r\n}\r\n</pre>', 1),
(192, 16, 'IsSharedDataConstant', 'bool IsSharedDataConstant(string key)', '<p>Returns <code>true</code> if the shared data named <code>key</code> is constant. Constant data can only be created in C++.</p>\r\n<div class="well well-small"><a href="../../manual/82">More about shared data</a></div>', 1),
(193, 16, 'GetSharedData', 'string GetSharedData(string key)', '<p>Returns the value&nbsp;of the shared data named&nbsp;<code>key</code>. Returns an empty string if no shared data matches the name of <code>key</code>.</p>\r\n<div class="well well-small"><a href="../../manual/82">More about shared data</a></div>', 1),
(196, 15, 'EnablePreLoadedLightmapsFromFile', 'void EnablePreLoadedLightmapsFromFile(bool enable)', '<p>Toggles pre rendered lightmaps. If the scene has pre rendered lightmaps, the engine will automatically load and apply them. Notice that lightmaps are only rendered when static entities are affected by static light sources.</p>\r\n<p>Lightmaps can be saved into bitmap files from the <em>Scene Editor</em> by simply pressing the <em>Save lightmaps to file</em> button. It will create a directory named <code>scenes/<em>scene-file-name</em>-esc/</code> and place all bitmaps there.</p>\r\n<p><img src="https://dl.dropboxusercontent.com/u/42072982/ethanon_share/gfx/save-lightmaps-to-file.png" alt="" width="420" height="328" /></p>', 1),
(194, 16, 'SharedDataExists', 'bool SharedDataExists(string key)', '<p>Returns <code>true</code> if the shared data named <code>key</code> exists.</p>\r\n<div class="well well-small"><a href="../../manual/82">More about shared data</a></div>', 1),
(114, 8, 'GetSpriteSize', 'vector2 GetSpriteSize(string fileName)', '<p>Returns the sprite bitmap actual size in pixels.</p>\r\n<p>Sample:</p>\r\n<pre>void onSceneLoaded()\r\n{\r\n	// load a 256x256 sprite\r\n	LoadSprite("animations/animated_sprite_256x256.png");\r\n\r\n	vector2 size = GetSpriteSize("animations/animated_sprite_256x256.png");\r\n	print("frame width:  " + size.x);\r\n	print("frame height: " + size.y);\r\n}\r\n</pre>\r\n<p>Output:</p>\r\n<pre>frame width:  256\r\nframe height: 256</pre>', 1),
(115, 8, 'DrawRectangle', 'void DrawRectangle(vector2 pos, vector2 size, uint color1, uint color2, uint color3, uint color4)', '<p>Draws a rectangle at position <code>pos</code> and with <code>size</code> dimensions.</p>\r\n<ul>\r\n<li><code>color1</code> upper left corner</li>\r\n<li><code>color2</code> upper right corner</li>\r\n<li><code>color3</code> lower left corner</li>\r\n<li><code>color4</code> lower right corner</li>\r\n</ul>\r\n<p>Sample:</p>\r\n<pre>void onSceneUpdate()\r\n{<br />    uint black = 0xFF000000;<br />    uint dark = 0xFF0A0A0A;\r\n    DrawRectangle(vector2(2, 250), vector2(64,64), black, black, dark, dark);\r\n}\r\n</pre>\r\n<div class="alert alert-block"><strong>Warning</strong> This function is not working on Android and iOS implementations yet.</div>', 1),
(116, 8, 'DrawLine', 'void DrawLine(vector2 p0, vector2 p1, uint color0, uint color1, float widthPx) ', '<p>Draws a line connecting <code>p0</code> and <code>p1</code>. If two different colors are set, the rasterizer will smoothly interpolate both colors along the surface.</p>\r\n<pre>uint green = ARGB(255,0,255,0);\r\nuint blue  = ARGB(255,0,0,255);\r\n\r\n// draw a line across the screen\r\nDrawLine(vector2(0,0), GetScreenSize(), green, blue, 2.0f);\r\n</pre>\r\n<div class="alert alert-block"><strong>Warning</strong> This function is not working on Android and iOS implementations yet.</div>', 1),
(117, 9, ' LoadMusic', 'bool LoadMusic(string fileName)', '<p>Loads a music sample for playback, usually through streaming. Long ambient sound effects should also be loaded with this function to avoid buffering ridiculous amounts of data.</p>\r\n<pre>void onSceneCreated()\r\n{\r\n    LoadMusic("musics/highway_to_hell.mp3");\r\n}\r\n</pre>', 1),
(118, 9, 'LoadSoundEffect', 'bool LoadSoundEffect(string fileName)', '<p>Loads a sound effect sample. Unlike <code>LoadMusic</code>, this function loads the entire sound buffer into memory, so avoid samples longer than 20 seconds.</p>\r\n<pre>void onSceneCreated()\r\n{\r\n    LoadSoundEffect("soundfx/explosion.mp3");\r\n}\r\n</pre>', 1),
(119, 9, 'PlaySample', 'bool PlaySample(string fileName)', '<p>Plays a preloaded audio sample.</p>\r\n<p>Example:</p>\r\n<pre>void onSceneCreated()\r\n{\r\n    LoadMusic("musics/epic-song.mp3");\r\n    PlaySample("musics/epic-song.mp3");\r\n}\r\n</pre>', 1),
(120, 9, 'LoopSample', 'bool LoopSample(string fileName, bool enable)', '<p>Toggles the sound or music looping.</p>\r\n<pre>void onSceneCreated()\r\n{\r\n    LoadMusic("musics/epic_song.mp3");\r\n\r\n    // enables looping\r\n    LoopSample("musics/epic_song.mp3", true);\r\n\r\n    // plays the (hopefully)epic song\r\n    PlaySample("musics/epic_song.mp3");\r\n}\r\n</pre>', 1),
(121, 9, 'StopSample', 'bool StopSample(string fileName) ', '<p>Stops an audio sample playback.</p>\r\n<p>Example:</p>\r\n<pre>void DoGameOverStuff()\r\n{\r\n    StopSample("musics/epic-song.mp3");\r\n\r\n    LoadSample("musics/game-over-sad-song.mp3");\r\n    PlaySample("musics/game-over-sad-song.mp3");\r\n}</pre>', 1),
(122, 9, 'PauseSample', 'bool PauseSample(string fileName)', '<p>Pauses a sample playback.</p>\r\n<pre>if (DoPauseGameStuff())\r\n{\r\n    PauseSample("musics/epic_song.mp3");\r\n}\r\n\r\nif (DoResumeGameStuff())\r\n{\r\n    PlaySample("musics/epic_song.mp3");\r\n}\r\n</pre>\r\n<div class="alert alert-block"><strong>Warning</strong> This function is not working on Android yet.</div>', 1),
(123, 9, 'SetSampleVolume', 'bool SetSampleVolume(string fileName, float volume)', '<p>Sets the sample volume.</p>\r\n<ul>\r\n<li><code>0.0f</code> completely silent</li>\r\n<li><code>1.0f</code> full sample volume</li>\r\n</ul>\r\n<p>Example:</p>\r\n<pre>void boom(float volume)\r\n{\r\n    SetSampleVolume("soundfx/explosion.mp3", volume);\r\n    PlaySample("soundfx/explosion.mp3");\r\n}\r\n</pre>', 1),
(124, 9, 'SetSamplePan', 'bool SetSamplePan(string fileName, float pan)', '<p>Set sample pan.</p>\r\n<ul>\r\n<li><code>-1.0</code> completely to the left</li>\r\n<li>&nbsp;<code>0.0</code> in the middle (both sides)</li>\r\n<li>&nbsp;<code>1.0</code> completely to the right</li>\r\n</ul>\r\n<pre>void onSceneCreated()\r\n{\r\n    LoadSoundEffect("soundfx/explosion.mp3");\r\n}\r\n<br />// position the sound on the sides if the explosion x coordinate exceeds screen boundaries\r\nvoid boom(vector2 explosionPos)\r\n{\r\n    float pan = 0.0f;\r\n    if (explosionPos.x &lt; 0.0f)\r\n        pan = -1.0f;\r\n    else if (explosionPos.x &gt; GetScreenSize().x)\r\n        pan = 1.0f;\r\n\r\n    SetSamplePan("soundfx/explosion.mp3", pan);<br />    PlaySample("soundfx/explosion.mp3");<br />}\r\n</pre>', 1),
(125, 9, 'SampleExists', 'bool SampleExists(string fileName)', '<p>Returns <code>true</code> if the given sound effect sample has already been loaded.</p>\r\n<pre>void onSceneCreated()\r\n{\r\n    LoadSoundEffect("soundfx/explosion.mp3");\r\n}\r\n\r\nvoid onSceneUpdate()\r\n{\r\n    if (SampleExists("soundfx/explosion.mp3"))\r\n        print("explosion is ready");\r\n}\r\n</pre>\r\n<div class="alert alert-block"><strong>Warning</strong> This function is not working for music samples on Android yet.</div>', 1),
(126, 9, 'IsSamplePlaying', 'bool IsSamplePlaying(string fileName)', '<p>Returns <code>true</code> if the sample is playing.</p>\r\n<pre>if (IsSamplePlaying("soundfx/crowd_chanting.mp3"))\r\n{\r\n    print("I can hear the crowd");\r\n}\r\n</pre>\r\n<div class="alert alert-block"><strong>Note</strong>&nbsp;Temporarily not working on Android.</div>', 1),
(128, 4, 'ForwardCommand', 'void ForwardCommand(string commandLine)', '<p>Forwards a custom command line that can be captured by Android Java side or iOS Objective-C side.</p>\r\n<p>This may be used to control ad positioning, flurry events, calling system''s UI elements and other platform specific tasks.</p>\r\n<pre>ForwardCommand("open_url http://asanteegames.com/");\r\nForwardCommand("vibrate 100");\r\n</pre>\r\n<p><a href="../../manual/81">This page</a> describes how to capture commands forwarded by this function.</p>', 1),
(129, 14, 'GetExternalStorageDirectory', 'string GetExternalStorageDirectory()', '<p>Returns the full path to the directory where the game should store files that can be shared among other apps and users.</p>\r\n<p>Files in the global external storage directory shouldn''t be deleted when the game is removed from the system unless the target platform won''t allow its persistence.</p>\r\n<p><strong>Windows:</strong> the same as <code>GetResourceDirectory</code></p>\r\n<p><strong>Mac OS X:</strong> <code>~/Library/Application Support/&lt;bundle-name&gt;/</code></p>\r\n<p><strong>iOS:</strong> <code>&lt;NSDocumentDirectory&gt;/ethdata/&lt;processName&gt;/</code></p>\r\n<p><strong>Android:</strong> returns the valid external storage directory, e.g.: <code>/sdcard/Android/data/&lt;application_package&gt;/files</code></p>', 1),
(130, 15, 'SetFastGarbageCollector', 'void SetFastGarbageCollector(bool enable)', '<p>Toggles the faster incremental garbage collecting.</p>\r\n<p>When the fast garbage collector is enabled, there won''t be any full-cycle garbage collection and it may cause the game to use more memory than it should.</p>\r\n<p>By default, the fast collector is disabled. The average performance loss is normally&nbsp;negligible.</p>', 1),
(131, 15, 'ReleaseResources', 'void ReleaseResources() ', '<p>Release all graphic and buffered audio resources loaded so far.&nbsp;<a href="../../manual/79">More about resource management</a>&nbsp;in Ethanon Engine.</p>', 1),
(188, 15, 'SetPersistentResources', 'void SetPersistentResources(bool enable)', '<p>Toggles persistent resources. <a href="../../manual/79">More about resource management</a>&nbsp;in Ethanon Engine.</p>', 1),
(132, 14, 'GetStringFromFileInPackage', 'string GetStringFromFileInPackage(string fileName) ', '<p>Returns the entire content from a file as a string. This function looks for the file in the game package (packed into Android apk files, iOS App bundle or the current package from which the application is getting its resources).</p>\r\n<p>Currently, Android is the only platform that packs all application resources in a zip package. When this function is used on other platforms that do not zip application resources, it will behave just like the <code>GetStringFromFile</code> function. Always using this function to load resources that are bundled with the game original package is recommended for cross-platform safety.</p>\r\n<p>If it fails, an empty string is returned.</p>\r\n<p>Sample:</p>\r\n<pre>const string resourceDir = GetResourceDirectory();\r\nconst string content = <strong>GetStringFromFileInPackage(resourceDir + "my_file.txt")</strong>;\r\n</pre>', 1),
(133, 14, 'FileInPackageExists', 'bool FileInPackageExists(string fileName)', '<p>Returns <code>true</code> if the file in package exists.</p>\r\n<pre>if (FileInPackageExists(GetResourceDirectory() + "my_file.txt")\r\n{\r\n    print("my file is in the game package!");\r\n}</pre>\r\n<p>Use this function to check if files in the game apk (Android), app bundle (iOS) or game content zip package exist.</p>', 1),
(134, 14, 'FileExists', 'bool FileExists(string fileName) ', '<p>Returns <code>true</code> if the file exists.</p>\r\n<pre>if (FileExists(GetExternalStorageDirectory() + "my_file.txt")\r\n{\r\n    print("my file does exist! Yey!");\r\n}\r\n</pre>', 1),
(135, 3, 'GetAllEntitiesInScene', 'void GetAllEntitiesInScene(ETHEntityArray& outArray)', '<p>Inserts to <code>&amp;outArray</code> a handle to every entity in the scene.</p>\r\n<p>Sample:</p>\r\n<pre>ETHEntityArray entities;\r\nGetAllEntitiesInScene(entities);\r\n\r\n// double the size of every entity in scene\r\nfor (uint t = 0; t &lt; entities.Size(); t++)\r\n{\r\n    entities[t].Scale(2.0f);\r\n}\r\n</pre>\r\n<div class="alert alert-block"><strong>Warning!</strong> Depending on how many entities the scene has, this function may become expensive to the CPU. Using this function too many times inside the game loop must be avoided. Consider retrieving those entities before the game loop starts and store them in an accessible place.</div>', 1),
(136, 3, 'AddScaledEntity', 'int AddScaledEntity(string fileName, vector3 position, float scale)', '<p>Adds a new entity to scene with an initial&nbsp;<code>position</code>&nbsp;and scales it using <code>scale</code>.</p>\r\n<p>This function returns the new entity ID.</p>\r\n<pre>// full sized crate\r\nAddScaledEntity("crate.ent", vector3(200,200,0), 1.0f);\r\n\r\n// half sized crate\r\nAddScaledEntity("crate.ent", vector3(200,300,0), 0.5f);\r\n\r\n// double sized crate\r\nAddScaledEntity("crate.ent", vector3(200,400,0), 2.0f);\r\n</pre>', 1),
(137, 3, 'AddEntity', 'int AddEntity(string entityName, vector3 position, float angle, ETHEntity@ &out, string alternativeName, float scale)', '<p>Adds an entity to scene.</p>\r\n<p><code>position</code> are the initial coordinates</p>\r\n<p><code>angle</code> is the initial rotating angle</p>\r\n<p>this function copies to <code>&amp;out</code> a handle to the new entity</p>\r\n<p>leave an empty string as argument to <code>alternativeName</code> in order to use the default entity name (<code>fileName</code>).</p>\r\n<p><code>scale</code> sets the initial entity&nbsp;scale value</p>\r\n<p>This funcion returns the new entity ID.</p>\r\n<pre>ETHEntity@ soldierHandle;\r\n\r\n// Adds a soldier which is twice as big (2.0f as scale)\r\nAddEntity("soldier.ent", vector3(0,0,0), 90.0f, @soldierHandle, "bigger_soldier", 2.0f);\r\n</pre>', 1),
(138, 3, 'AddScaledEntity', 'int AddScaledEntity(string entityName, vector3 position, float scale, ETHEntity@ &out)', '<p>Adds a new entity to scene with an initial&nbsp;<code>position</code>&nbsp;and scales it using&nbsp;<code>scale</code>.</p>\r\n<p>this function copies to&nbsp;<code>&amp;out</code>&nbsp;a handle to the new entity</p>\r\n<p>This function returns the new entity ID.</p>\r\n<pre>ETHEntity@ crate;<br />\r\n// half sized crate\r\nAddScaledEntity("crate.ent", vector3(200,300,0), 0.5f, @crate);\r\n\r\n// turn the half-sized crate upside down\r\ncrate.SetAngle(180.0f);\r\n</pre>', 1),
(139, 12, 'GetLastFrameElapsedTime', 'uint GetLastFrameElapsedTime()', '<p>Returns the amount of milliseconds elapsed during the latest game frame.</p>', 1),
(140, 7, 'multiply', 'vector3 multiply(vector3 v, matrix4x4 m) ', '<p>Returns the product of vector <code>v</code> and matrix <code>m</code>.</p>', 1),
(142, 7, 'multiply', 'vector2 multiply(vector2 v, matrix4x4 m)', '<p>Returns the product of vector&nbsp;<code>v</code> and matrix <code>m</code>.</p>', 1),
(143, 6, 'SetZBuffer', 'void SetZBuffer(bool enable)', '<p>Toggles hardware depth sorting.</p>', 1),
(144, 6, 'GetZBuffer', 'bool GetZBuffer()', '<p>Returns <code>true</code> if the hardware depth sorting is enabled.</p>', 1),
(145, 6, 'SetParallaxOrigin', 'void SetParallaxOrigin(vector2 normalizedOrigin)', '<p>Sets the parallax origin spot for the scene. The default value is <code>vector2(0.5f, 0.5f)</code> which represents the screen middle point.</p>\r\n<p>Since the position vector is normalized, <code>vector2(0,0)</code> represents the top-left corner of the screen and <code>vector2(1,1)</code> its bottom-right corner.</p>', 1),
(146, 6, 'SetParallaxIntensity', 'void SetParallaxIntensity(float intensity)', '<p>Changes parallax intensity value. The default parallax intensity is the one set in the Scene Editor.</p>\r\n<div class="well well-small"><strong>Editor''s To-do task</strong> Screen shot of parallax intensity input field in the Scene Editor</div>', 1),
(147, 8, 'GetSpriteFrameSize', 'vector2 GetSpriteFrameSize(string spriteName) ', '<p>Returns the sprite current frame size.</p>\r\n<p>Sample:</p>\r\n<pre>void onSceneLoaded()\r\n{\r\n	// load a 256x256 sprite\r\n	LoadSprite("animations/animated_sprite_256x256.png");\r\n\r\n	// divides the sprite into a 4x2 rect (4 columns and 2 rows)\r\n	SetupSpriteRects("animations/animated_sprite_256x256.png", 4, 2);\r\n\r\n	vector2 size = GetSpriteFrameSize("animations/animated_sprite_256x256.png");\r\n	print("frame width:  " + size.x);\r\n	print("frame height: " + size.y);\r\n}\r\n</pre>\r\n<p>Output:</p>\r\n<pre>frame width:  64\r\nframe height: 128\r\n</pre>', 1),
(148, 8, 'SetupSpriteRects', 'void SetupSpriteRects(string spriteName, uint columns, uint rows)', '<p>Cuts the sprite into a custom number of <code>rows</code> and <code>columns</code>. Useful if you have animated sprites.</p>\r\n<pre>void onSceneLoaded()\r\n{\r\n    // load a 256x256 sprite\r\n    LoadSprite("animations/animated_sprite_256x256.png");\r\n\r\n    // divides the sprite into a 4x4 rect (4 columns and 2 rows)\r\n    SetupSpriteRects("animations/animated_sprite_256x256.png", 4, 2);\r\n\r\n    // will look like this:\r\n    // +-------------------+\r\n    // |    |    |    |    |\r\n    // |  0 |  1 |  2 |  3 |\r\n    // |    |    |    |    |\r\n    // |____|____|____|____|\r\n    // |    |    |    |    |\r\n    // |  4 |  5 |  6 |  7 |\r\n    // |    |    |    |    |\r\n    // |____|____|____|____|\r\n\r\n    // should return vector2(64,128)\r\n    vector2 size = GetSpriteFrameSize("animations/animated_sprite_256x256.png");\r\n\r\n    // select the third frame\r\n    SetSpriteRect("animations/animated_sprite_256x256.png", 2);\r\n}\r\n\r\nvoid onSceneUpdate()\r\n{\r\n    // Draw the third frame\r\n    // +----+\r\n    // |    |\r\n    // |  2 |\r\n    // |    |\r\n    // |____|\r\n    DrawSprite("animations/animated_sprite_256x256.png", vector2(0,0), 0xFFFFFFFF);\r\n}</pre>', 1),
(149, 8, 'SetSpriteRect', 'void SetSpriteRect(string spriteName, uint rectIndex) ', '<p>Selects a sprite frame for a sprite which has been cut by the <code>SetupSpriteRects</code> function.</p>\r\n<p>Sample:</p>\r\n<pre>void onSceneLoaded()\r\n{\r\n    // load a 256x256 sprite\r\n    LoadSprite("animations/animated_sprite_256x256.png");\r\n\r\n    // divides the sprite into a 4x4 rect (4 columns and 2 rows)\r\n    SetupSpriteRects("animations/animated_sprite_256x256.png", 4, 2);\r\n\r\n    // will look like this:\r\n    // +-------------------+\r\n    // |    |    |    |    |\r\n    // |  0 |  1 |  2 |  3 |\r\n    // |    |    |    |    |\r\n    // |____|____|____|____|\r\n    // |    |    |    |    |\r\n    // |  4 |  5 |  6 |  7 |\r\n    // |    |    |    |    |\r\n    // |____|____|____|____|\r\n\r\n    // should return vector2(64,128)\r\n    vector2 size = GetSpriteFrameSize("animations/animated_sprite_256x256.png");\r\n\r\n    // select the third frame\r\n    SetSpriteRect("animations/animated_sprite_256x256.png", 2);\r\n}\r\n\r\nvoid onSceneUpdate()\r\n{\r\n    // Draw the third frame\r\n    // +----+\r\n    // |    |\r\n    // |  2 |\r\n    // |    |\r\n    // |____|\r\n    DrawSprite("animations/animated_sprite_256x256.png", vector2(0,0), 0xFFFFFFFF);\r\n}\r\n</pre>', 1),
(150, 8, 'SetSpriteOrigin', 'void SetSpriteOrigin(string spriteName, vector2 normalizedOrigin)', '<p>Sets the normalized origin point for the sprite named <code>spriteName</code>. The default origin point is <code>vector2(0,0)</code> which represents its upper left corner. <code>vector2(0.5f, 0.5f)</code> represents the center of the sprite.</p>\r\n<pre>// origin in the middle of the button sprite\r\nSetSpriteOrigin("buttons/pauseButton.png", vector2(0.5f, 0.5f));\r\n</pre>\r\n<pre>// origin in the lower right corner of the the button sprite\r\nSetSpriteOrigin("buttons/pauseButton.png", vector2(1.0f, 1.0f));</pre>', 1),
(151, 8, 'DrawSprite', 'void DrawSprite(string spriteName, vector2 pos, uint color = 0xFFFFFFFF, float angle = 0.0f)', '<p>Draw a non-entity sprite from a bitmap file.</p>\r\n<p>Optionally, a custom color value may be used. The default&nbsp;<code>color</code>&nbsp;is white (<code>0xFFFFFFFF</code>), which conserves original bitmap&nbsp;colors.</p>\r\n<p>Sample:</p>\r\n<pre>void onSceneUpdate()\r\n{\r\n    DrawSprite("sprites/sprite.png",       vector2(90.0f, 0.0f));\r\n    DrawSprite("sprites/other_sprite.png", vector2(20.0f, 30.0f), 0xFFFFFFFF, 90.0f);\r\n}\r\n</pre>', 1),
(152, 8, 'DrawShapedSprite', 'void DrawShapedSprite(string spriteName, vector2 pos, vector2 size, uint color = 0xFFFFFFFF, float angle = 0.0f)', '<p>Draws a sprite at position&nbsp;<code>pos</code>&nbsp;and with <code>size</code> dimensions. If <code>size</code> differs from the original sprite frame size, it will be stretched to fit the requested dimensions in pixels.</p>\r\n<p>Optionally, a custom color value may be used. The default&nbsp;<code>color</code>&nbsp;is white (<code>0xFFFFFFFF</code>), which conserves original bitmap&nbsp;colors.</p>\r\n<p>Sample:</p>\r\n<pre>void onSceneUpdate()\r\n{\r\n    const uint WHITE = 0xFFFFFFFF;\r\n\r\n    // adjusts the original bitmap to a 100x20 pixels area\r\n    DrawShapedSprite("any_bitmap_file.png", vector2(0,0), vector2(100,20), WHITE);\r\n}\r\n</pre>', 1),
(153, 9, 'SetGlobalVolume', 'void SetGlobalVolume(float value)', '<p>Sets the global volume. <code>0.0f</code> means complete silence and <code>1.0f</code> means full sound volume.</p>', 1),
(154, 9, 'GetGlobalVolume', 'float GetGlobalVolume()', '<p>Returns the global volume.</p>\r\n<ul>\r\n<li><code>0.0f</code> for complete silence and</li>\r\n<li><code>1.0f</code> for full sound volume.</li>\r\n</ul>', 1);
INSERT INTO `ethfunction` (`id`, `ethfunction_type_id`, `title`, `declaration`, `description`, `status`) VALUES
(155, 9, 'SetSampleSpeed', 'bool SetSampleSpeed(string fileName, float speed)', '<p>Sets the sample playback frequency scale. Some systems have software or hardware limitations that might cap the final frequency value. E.g: Android''s lowest value allowed is <code>0.5f</code> (sample playback lasts twice as long) and the highest value is <code>2.0f</code> (playback is twice as short).</p>\r\n<pre>void onSceneCreated()\r\n{\r\n    LoadSoundEffect("soundfx/explosion.mp3");\r\n}\r\n\r\nvoid boom()\r\n{\r\n    // randomly varies frequency to avoid too repetitive sounds\r\n    SetSampleSpeed("soundfx/explosion.mp3", randF(0.8f, 1.2f));\r\n    PlaySample("soundfx/explosion.mp3");\r\n}\r\n</pre>', 1),
(156, 10, 'SetFixedHeight', 'void SetFixedHeight(float height) ', '<p>This functions is used to compute and set the global scale factor to a value that will automatically scale the scene (up or down) as if the screen height would <span style="text-decoration: underline;">always</span> be <code>height</code> pixels tall.</p>\r\n<p>In other words, if the original scene height is <code>height</code> pixels, it will&nbsp;<span style="text-decoration: underline;">always</span>&nbsp;fit the entire scene in screen automatically.</p>\r\n<pre>SetFixedHeight(512.0f);\r\n</pre>\r\n<p>The example above does the exact same thing as the example below:</p>\r\n<pre>SetScaleFactor(GetScreenSize().y / 512.0f);\r\n</pre>', 1),
(157, 10, 'SetFixedWidth', 'void SetFixedWidth(float width) ', '<p>This functions is used to compute and set the global scale factor to a value that will automatically scale the scene (up or down) as if the screen width would&nbsp;<span style="text-decoration: underline;">always</span>&nbsp;be&nbsp;<code>width</code>&nbsp;pixels tall.</p>\r\n<p>In other words, if the original scene width is&nbsp;<code>width</code>&nbsp;pixels, it will&nbsp;<span style="text-decoration: underline;">always</span>&nbsp;fit the entire scene in screen automatically.</p>\r\n<pre>SetFixedWidth(512.0f);\r\n</pre>\r\n<p>The example above does the exact same thing as the example below:</p>\r\n<pre>SetScaleFactor(GetScreenSize().x / 512.0f);</pre>', 1),
(158, 10, 'GetScale', 'float GetScale() ', '<p>Returns the current global scale factor. The default value is <code>1.0f</code>.</p>', 1),
(159, 10, 'Scale', 'float Scale(float value) ', '<p>Scales the <code>value</code> using the current global scale factor.</p>\r\n<pre>SetScaleFactor(2.0f);\r\nprint(Scale(10.0f));\r\n</pre>\r\n<p>Output:</p>\r\n<pre>20</pre>', 1),
(160, 10, 'SetScaleFactor', 'void SetScaleFactor(float scale) ', '<p>Sets the current global scale factor value. Example:</p>\r\n<pre>SetScaleFactor(2.0f);\r\n</pre>\r\n<p>The line above will set the new global scale factor to <code>2</code>, which means that all entities added to scene (or loaded from a scene after that) will be scaled by 2.</p>\r\n<p>The global scale factor also affects all camera and entity movements (<code>ETHEntity::AddToPosition</code>, <code>AddToCameraPos</code>, etc.). The current global gravity vector and all physics operations are automatically scaled as well. That said, the programmer shouldn''t worry about scaling up scene motion events since the global scaling system will take care of that automatically.</p>\r\n<div class="alert">\r\n<p>Notice that the global scaling system won''t scale sprites and text drawing operations, because sometimes we do not want our UI being scaled the same way the game scene is. If you want to scale sprites with the global scale system, you can do something like this:</p>\r\n<pre>void drawScaledSprite(string name, vector2 pos)\r\n{\r\n	const vector2 size(GetFrameSize(name) * GetScale());\r\n	DrawShapedSprite(name, pos, size, 0xFFFFFFFF);\r\n}\r\n</pre>\r\n</div>', 1),
(161, 10, 'Scale', 'vector2 Scale(vector2 v) ', '<p>Scales the <code>v</code> vector using the current global scale factor.</p>\r\n<pre>SetScaleFactor(2.0f);\r\nvector2 v(10.0f, 20.0f);\r\nvector2 scaledVector(Scale(v));\r\nprint(vector2ToString(scaleVector));\r\n</pre>\r\n<p>Output:</p>\r\n<pre>(20, 40)</pre>', 1),
(162, 10, 'Scale', 'vector3 Scale(vector3 v) ', '<p>Scales the&nbsp;<code>v</code>&nbsp;vector using the current global scale factor.</p>\r\n<pre>SetScaleFactor(2.0f);\r\nvector3 v(10.0f, 20.0f, 30.0f);\r\nvector3 scaledVector(Scale(v));\r\nprint(vector3ToString(scaleVector));\r\n</pre>\r\n<p>Output:</p>\r\n<pre>(20, 40, 60)</pre>', 1),
(164, 11, 'SetGravity', 'void SetGravity(vector2 gravityVector) ', '<p>Sets a new gravity value for the current scene. The current gravity value is <code>vector2(0, 10)</code>.</p>', 1),
(165, 11, 'GetGravity', 'vector2 GetGravity()', '<p>Returns the current gravity vector. The default gravity is <code>vector2(0, 10)</code>.</p>', 1),
(166, 11, 'SetNumIterations', 'void SetNumIterations(int velocityIterations, int positionIterations)', '<p>Sets the number of velocity and position iterations of the simulator. The default velocity iteration value is&nbsp;<code>5</code>&nbsp;and the default position iteration is&nbsp;<code>2</code>.</p>\r\n<p>Check the&nbsp;<a href="http://box2d.org/documentation/">Box2D User Manual</a>&nbsp;for more information about iterations.</p>', 1),
(167, 11, 'GetNumIterations', 'void GetNumIterations(int &velocityIterations, int &positionIterations) ', '<p>Copies into <code>&amp;velocityIterations</code> and <code>&amp;positionIterations</code> the current number of velocity and position iterations on the simulator. The default velocity iteration value is <code>5</code> and the default position iteration is <code>2</code>.</p>\r\n<p>Check the <a href="http://box2d.org/documentation/">Box2D User Manual</a> for more information about iterations.</p>', 1),
(168, 11, 'SetTimeStepScale', 'void SetTimeStepScale(float scale) ', '<p>Sets the current time step scale. Scaling the time step is useful to create slow motion effects.</p>', 1),
(169, 11, 'GetTimeStepScale', 'float GetTimeStepScale()', '<p>Returns the current time step scale. Scaling the time step is useful to create slow motion effects.</p>', 1),
(170, 11, 'GetClosestContact', 'ETHEntity@ GetClosestContact(vector2 a, vector2 b, vector2& outPoint, vector2& outNormal)', '<p>Casts a ray from <code>a</code> to <code>b</code> and returns a handle to the first entity-body found in the way between the two points. If no entity-body intersects the segment, this function returns <code>null</code>.</p>\r\n<p>If any entity is found, this function copies into <code>outPoint</code> the exact point, in world space, where the closest intersection happened, and copies into <code>outNormal</code> its surface normal.</p>\r\n<p>Sample:</p>\r\n<pre>vector2 characterPos(200, 300);\r\nvector2 potOfGoldPos(500, 800);\r\n\r\nvector2 point, normal;\r\nETHEntity@ firstEntityFound = <strong>GetClosestContact(characterPos, potOfGoldPos, point, normal)</strong>;\r\n\r\nif (firstEntityFound !is null)\r\n{\r\n    if (firstEntityFound.GetEntityName() == "potOfGold.ent")\r\n        print("The character sees the pot of gold!");\r\n    else\r\n        print("Something is in front of our view! The character can''t see the pot of gold!");\r\n}\r\nelse\r\n{\r\n    print("Nothing was found!");\r\n}\r\n</pre>\r\n<p>Notice that the intersection tests are only performed on entities that have physics-simulated bodies.</p>', 1),
(171, 11, 'GetClosestContact', 'ETHEntity@ GetClosestContact(vector2 a, vector2 b, vector2& outPoint, vector2& outNormal, string semicolonSeparatedIgnoreList)', '<p>Casts a ray from&nbsp;<code>a</code>&nbsp;to&nbsp;<code>b</code>&nbsp;and returns a handle to the first entity-body found in the way between the two points, except if the entity name matches any of the names set in the <code>semicolonSeparatedIgnoreList</code>. If no entity-body intersects the segment, this function returns&nbsp;<code>null</code>.</p>\r\n<p>If any entity is found, this function copies into&nbsp;<code>outPoint</code>&nbsp;the exact point, in world space, where the closest intersection happened, and copies into&nbsp;<code>outNormal</code>&nbsp;its surface normal.</p>\r\n<p>Sample:</p>\r\n<pre>vector2 characterPos(200, 300);\r\nvector2 potOfGoldPos(500, 800);\r\n\r\nvector2 point, normal;\r\n\r\nETHEntity@ firstEntityFound = GetClosestContact(characterPos, potOfGoldPos, point, normal,\r\n                                                "potOfGold.ent;characer.ent");\r\n\r\nif (firstEntityFound is null)\r\n{\r\n    print("The character sees the pot of gold!");\r\n}\r\n</pre>\r\n<p>Notice that the intersection tests are only performed on entities that have physics-simulated bodies.</p>', 1),
(172, 11, 'GetContactEntities', 'bool GetContactEntities(vector2 a, vector2 b, ETHEntityArray &outArray) ', '<p>Copies into <code>&amp;outArray</code> a handle to every entity-body that intersects the line segment whose end points are <code>a</code> and <code>b</code>.</p>\r\n<p>Notice that the intersection tests are only performed on entities that have physics-simulated bodies.</p>', 1),
(173, 11, 'IsFixedTimeStep', 'bool IsFixedTimeStep() const ', '<p>Returns <code>true</code> if the fixed time step is enabled. By default, fixed time step is disabled in Ethanon.</p>\r\n<p>Using fixed time step is recommended for the most reliable simulation but its speed will vary with the FPS and may result in bad gameplay in some cases.</p>', 1),
(174, 11, 'GetFixedTimeStepValue', 'float GetFixedTimeStepValue()', '<p>Returns the amount of seconds used by the physics simulator time step frame when the fixed time step is enabled.</p>', 1),
(175, 11, 'SetFixedTimeStep', 'void SetFixedTimeStep(bool enable)', '<p>Enables or disables fixed time stepping. By default, fixed time step is disabled in Ethanon.</p>\r\n<p>Using fixed time step is recommended for the most reliable simulation but its speed will vary with the FPS and may result in bad gameplay in some cases.</p>', 1),
(176, 11, 'SetFixedTimeStepValue', 'void SetFixedTimeStepValue(float value) ', '<p>Sets the fixed time step in seconds. The default value is <code>1.0f / 60.0f</code>. By default, fixed time stepping is disabled in Ethanon.</p>\r\n<p>Using fixed time step is recommended for the most reliable simulation but its speed will vary with the FPS and may result in bad gameplay in some cases.</p>', 1),
(177, 11, 'ResolveJoints', 'void ResolveJoints() ', '<p>Scans all joint declarations in the entities in scene and connects all entities if their parts are found successfully.</p>', 1),
(178, 11, 'GetCurrentPhysicsTimeStepMS', 'float GetCurrentPhysicsTimeStepMS() ', '<p>Returns the amount of milliseconds that are currently being used by the physics simulator frame step.</p>', 1),
(180, 6, 'SetZAxisDirection', 'void SetZAxisDirection(vector2 direction)', '<p>Sets Z-axis direction to the current scene. <a href="../../manual/19">More about z-axis direction</a>.</p>', 1),
(181, 6, 'GetZAxisDirection', 'vector2 GetZAxisDirection()', '<p>Returns the current scene Z-axis direction vector. <a href="../../manual/19">More about Z-axis directions</a>.</p>', 1),
(182, 7, 'Standard math functions', 'cos, sin, tan, asin, acos, atan, atan2, cosh, sinh, tanh, max, min, log, log10, pow, sqrt, ceil, sign, floor, abs', '<p>Standard math functions. All functions operate with the <code>float</code> type</p>', 1),
(195, 16, 'RemoveSharedData', 'bool RemoveSharedData(string key)', '<p>Deletes a shared data entry named <code>key</code> and returns <code>true</code> if it was successful.</p>\r\n<div class="well well-small"><a href="../../manual/82">More about shared data</a></div>', 1),
(191, 16, 'SetSharedData', 'bool SetSharedData(string key, string value)', '<p>Creates or changes a shared data value named <code>key</code> with the given string-based <code>value</code>.</p>\r\n<div class="well well-small"><a href="../../manual/82">More about shared data</a></div>', 1),
(184, 3, 'GetEntitiesAroundBucket', 'void GetEntitiesAroundBucket(vector2 bucket, ETHEntityArray &out, string whiteList = "")', '<p>Copies into <code>&amp;out</code> a handle to each entity contained in the buckets around <code>bucket</code>.&nbsp;<a href="../../manual/44">More about scene buckets</a>.</p>\r\n<p>Sample:</p>\r\n<pre>vector2 bombPos(200.0f, 300.0f);\r\nvector2 bombBucket = GetBucket(bombPos);\r\n\r\nETHEntityArray entities;\r\nGetEntitiesAroundBucket(bombBucket, entities);\r\n\r\nfor (uint t = 0; t &lt; entities.Size(); t++)\r\n{\r\n    print(entities[t].GetEntityName() + " is around the bomb! Careful!");\r\n}\r\n</pre>\r\n<p>This function alternatively receives a semicolon-separated <code>whiteList</code> string that enumerates the entities that should be included in the array:</p>\r\n<pre>ETHEntityArray entities;\r\n\r\n// get only the vampires and wolves around the bucket\r\nGetEntitiesAroundBucket(bombBucket, entities, "vampire.ent;wolf.ent");\r\n</pre>\r\n<p>Setting an empty string to <code>whiteList</code> will return handles to all entities without exceptions.</p>\r\n<p>This function seeks entities in&nbsp;the bucket itself, and all eight buckets that touch the edges and the corners of <code>bucket</code>.</p>\r\n<p>This function is accumulative, which means <code>&amp;out</code> won''t be cleaned before more entities are inserted.</p>', 1),
(185, 3, 'GetEntitiesAroundEntity', 'void GetEntitiesAroundEntity(ETHEntity@ entity, ETHEntityArray &out) ', '<p>Copies into&nbsp;<code>&amp;out</code>&nbsp;a handle to each entity contained in the buckets around&nbsp;<code>entity</code>''s parent bucket.&nbsp;<a href="../../manual/44">More about scene buckets</a>.</p>\r\n<p>Sample:</p>\r\n<pre>ETHEntity@ bomb = SeekEntity("bomb.ent");\r\n\r\nETHEntityArray entities;\r\nGetEntitiesAroundEntity(bomb, entities);\r\n\r\nfor (uint t = 0; t &lt; entities.Size(); t++)\r\n    print(entities[t].GetEntityName() + " is around the bomb! Careful!");\r\n</pre>\r\n<p>This function seeks entities in&nbsp;the <code>entity</code>''s parent bucket itself, and all eight buckets that touch its edges and corners.</p>\r\n<p>This function is accumulative, which means&nbsp;<code>&amp;out</code>&nbsp;won''t be cleaned before more entities are inserted.</p>', 1),
(186, 11, 'DisableContact', 'void DisableContact()', '<p>Disables collision solving for the current contact. This function can only be called inside the <a href="../../manual/73">pre solve contact callback</a>.</p>', 1),
(187, 8, 'PlayParticleEffect', 'void PlayParticleEffect(string parFileName, vector2 pos, float angle, float scale)', '<p>Inserts a <strong>temporary</strong> particle effect the the sprite layer. This function loads a <code>*.par</code> file and add the particle system to the sprite drawing layer, removing the particle effect from the rendering stack as soon as it is finished. Example:</p>\r\n<pre>vector2 buttonPos(100, 200);\r\nPlayParticleEffect("button_sparkles.par", buttonPos, 0.0f, 1.0f);\r\n</pre>\r\n<p>This functions is useful to combine particle effects to the game UI.</p>\r\n<p>Only temporary particle effects are allowed, which means that the Repeat count must be greater than zero. This function will fail on infinite particle effects.</p>\r\n<div class="alert alert-info">\r\n<p><strong>Important!</strong> Unlike sprites and text drawing procedures, this function does not need to be called at every frame.</p>\r\n</div>', 1),
(189, 15, 'ArePersistentResourcesEnabled', 'bool ArePersistentResourcesEnabled()', '<p>Returns <code>true</code> if persistent resources are enabled, <code>false</code> otherwise.</p>', 1),
(190, 3, 'LoadScene', 'void LoadScene(string fileName, string onSceneCreatedFunc, string onSceneUpdateFunc, string onResumeFunc, vector2 bucketSize = vector2(256, 256))', '<p>Send a scene load request and assigns an&nbsp;<code>onSceneCreated</code>,&nbsp;<code>onSceneUpdate</code>&nbsp;and an&nbsp;<code>onResume</code>&nbsp;callback function, and optionally a custom&nbsp;<code>bucketSize</code>.</p>\r\n<pre>LoadScene("bowser_castle.esc", "NewGame", "UpdateScene", "ResumeGame");</pre>\r\n<p><a href="../../manual/31">Read more about scene callback functions</a></p>\r\n<p><a href="../../manual/79">Read more about onResume functions</a></p>\r\n<p><a href="../../manual/44">More about buckets</a></p>', 1);

-- --------------------------------------------------------

--
-- Table structure for table `ethfunction_type`
--

CREATE TABLE IF NOT EXISTS `ethfunction_type` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `description` text NOT NULL,
  `status` int(11) NOT NULL DEFAULT '1',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=latin1 AUTO_INCREMENT=17 ;

--
-- Dumping data for table `ethfunction_type`
--

INSERT INTO `ethfunction_type` (`id`, `title`, `description`, `status`) VALUES
(4, 'Application and system', '<p>Functions that provide and manipulate application states and system properties.</p>', 1),
(3, 'Scene and entities', '<p>Manipulation of scene states, properties and its entities.</p>', 1),
(7, 'Math', '<p>Math utilities.</p>', 1),
(12, 'Time', '<p>Time utilities.</p>', 1),
(6, 'Environment and display', '<p>Properties related to render modes and display options.</p>', 1),
(8, 'Drawing', '<p>Sprite, text and other primitive drawing functions.</p>', 1),
(9, 'Audio and multimedia', '<p>Audio and video playback utilities.</p>', 1),
(10, 'Global scale', '<p>Functions related to scene global scaling.</p>', 1),
(11, 'Box2D physics', '<p>Functions that manipulate global physics simulation properties.</p>', 1),
(13, 'String', '<p>String utilities.</p>', 1),
(14, 'File I/O', '<p>Functions to handle file reading and writing.</p>', 1),
(15, 'Resource management', '<p>Functions that control resource management states.</p>', 1),
(16, 'Shared data', '<p>Access to string-based data shared across language layers.</p>', 1);

-- --------------------------------------------------------

--
-- Table structure for table `ethmethod`
--

CREATE TABLE IF NOT EXISTS `ethmethod` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(255) NOT NULL,
  `description` text NOT NULL,
  `status` int(11) NOT NULL DEFAULT '1',
  `ethclass_id` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=latin1 AUTO_INCREMENT=268 ;

--
-- Dumping data for table `ethmethod`
--

INSERT INTO `ethmethod` (`id`, `title`, `description`, `status`, `ethclass_id`) VALUES
(4, 'int close()', '<p>Closes the file. This method returns a negative value if it fails.</p>', 1, 5),
(5, 'int getSize() const', '<p>Returns the file size in bytes.</p>', 1, 5),
(3, 'int open(string fileName, string mode)', '<p>Opens a file to read (when <code>mode</code> equals <code>"r"</code>), write (<code>"w"</code>) or append (<code>"a"</code>) to. This method returns a negative value if it fails.</p>', 1, 5),
(6, 'bool isEndOfFile() const', '<p>Returns <code>true</code> if the end of file is reached.</p>', 1, 5),
(7, 'int readString(uint length, string& out)', '<p>Reads a string from file. This method returns a negative value if it fails.</p>', 1, 5),
(8, 'int readLine(string& out)', '<p>Reads a string line from the file. This method returns a negative value if it fails.</p>', 1, 5),
(9, 'int writeString(string str)', '<p>Writes a string to the file. This method returns a negative value if it fails.</p>', 1, 5),
(10, 'int64 readInt(uint bytes)', '<p>Reads a custom sized binary integer value from the file. This method returns a negative value if it fails.</p>', 1, 5),
(11, 'uint64 readUInt(uint bytes)', '<p>Reads a custom sized unsigned int value from file. This method returns a negative value if it fails.</p>', 1, 5),
(12, 'float readFloat()', '<p>Reads binary float primitive from file.</p>', 1, 5),
(13, 'double readDouble()', '<p>Reads binary double primitive data from file.</p>', 1, 5),
(14, 'int writeInt(int64 value, uint bytes)', '<p>Writes a custom sized integer primitive to the file. This method returns a negative value if it fails.</p>', 1, 5),
(15, 'int writeUInt(uint64 value, uint bytes)', '<p>Writes a custom sized binary unsigned integer value to the file. This method returns a negative value if it fails.</p>', 1, 5),
(16, 'int writeFloat(float value)', '<p>Writes a binary float primitive to the file. This method returns a negative value if it fails.</p>', 1, 5),
(17, 'int writeDouble(double value)', '<p>Writes a binary double primitive to the file. This method returns a negative value if it fails.</p>', 1, 5),
(18, 'int getPos() const', '<p>Retrieves the file cursor position.</p>', 1, 5),
(19, 'int setPos(int pos)', '<p>Sets the cursor position. This method returns a negative value if it fails.</p>', 1, 5),
(20, 'int movePos(int delta)', '<p>Moves the cursor position using a delta value. This method returns a negative value if it fails.</p>', 1, 5),
(217, 'uint getHours()', '<p>Returns the hour of the day it was the last time the <code>dateTime::update</code> method has been called.</p>', 1, 16),
(211, 'vector2 GetPivotAdjust()', '<p>Returns the pivot adjust for the entity sprite. The pivot adjust is normally set in the Entity Editor.</p>', 1, 9),
(212, 'void DisableLightSource() ', '<p>Disables the entity light source if it has one.</p>', 1, 9),
(213, 'uint update() ', '<p>Fills the class date and time attributes with current values.</p>', 1, 16),
(25, 'vector2()', '<p>Default constructor. Instantiates a zero length vector.</p>', 1, 7),
(26, 'vector2(float x, float y)', '<p>Instantiates a <code>vector2</code> with initial values.</p>', 1, 7),
(27, 'vector2(const vector2 &in v)', '<p>Copy constructor.</p>', 1, 7),
(28, 'float length() const', '<p>Return vector length.</p>', 1, 7),
(218, 'uint getMinutes()', '<p>Returns the minute of the hour it was during the last time the <code>dateTime::update</code> method was called.</p>', 1, 16),
(210, 'void SetPivotAdjust(vector2 pivot)', '<p>Sets a new pivot adjust position to the entity. Pivot adjust vectors are normally set in the Entity Editor.</p>', 1, 9),
(32, 'vector3()', '<p>Default constructor. Instantiates a zero length vector.</p>', 1, 8),
(33, 'vector3(float x, float y, float z)', '<p>Instantiates a <code>vector3</code> with initial values.</p>', 1, 8),
(34, 'vector3(const vector3 &in v)', '<p>Copy constructor.</p>', 1, 8),
(35, 'float length() const', '<p>Return vector length.</p>', 1, 8),
(37, 'void SetPosition(vector3 pos)', '<p>Moves the entity to the point passed as parameter.</p>', 1, 9),
(38, 'void SetPositionXY(vector2 pos)', '<p>Moves the entity to the point passed as parameter. Affects only X and Y axis. The Z position remains as is.</p>', 1, 9),
(39, 'void AddToPosition(vector3 direction)', '<p>Adds a <code>direction</code> vector to the entity current position.</p>\r\n<pre>// move entity to the left\r\n<strong>entity.AddToPosition(vector3(-1,0,0));\r\n</strong></pre>', 1, 9),
(40, 'void AddToPositionXY(vector2 direction)', '<p>Adds the <code>direction</code> vector to the entity position. The coordinate along the Z axis remains unchanged.</p>', 1, 9),
(41, 'vector3 GetPosition()', '<p>Returns entity position in world-space.</p>', 1, 9),
(42, 'vector2 GetPositionXY()', '<p>Returns the X and Y coordinates of the entity position.</p>', 1, 9),
(43, 'vector2 GetSize()', '<p>Returns the current entity sprite size in pixels. This method takes sprite cut and scale into consideration when calculating the current size.</p>', 1, 9),
(44, 'uint GetFrame()', '<p>Returns the entity''s current sprite frame. Used on entities that use sprite cut (tiling).</p>', 1, 9),
(45, 'uint GetNumFrames()', '<p>Returns the number of frames that the entity has. Used on entities with sprite cut (tiling).</p>\r\n<pre>// cut sprite into four columns and two rows\r\nentity.SetSpriteCut(4, 2);\r\nprint("num frames: " + <strong>entity.GetNumFrames()</strong>);</pre>\r\n<p>Output:</p>\r\n<pre>num frames: 8</pre>', 1, 9),
(46, 'bool SetSpriteCut(uint numColumns, uint numRows)', '<p>Resets the current sprite cut (tiling) by equaly sized columns and rows. This method will set the current sprite frame back to 0.</p>', 1, 9),
(47, 'bool SetFrame(uint frame)', '<p>Set the current entity frame if it uses sprite tiling (also known as sprite cut).</p>', 1, 9),
(48, 'bool SetFrame(uint column, uint row)', '<p>Sets the current frame for the entity in a two-dimensional grid&nbsp;if it uses sprite tiling (also known as sprite cut).</p>', 1, 9),
(49, 'int GetID()', '<p>Returns the current entity ID. The entity ID is an unique number that identifies each entity in scene.</p>', 1, 9),
(50, 'void SetAngle(float angle)', '<p>Set entity rotation angle in degrees. Vertical entities can''t be rotated.</p>', 1, 9),
(51, 'float GetAngle()', '<p>Gets the entity rotation angle in degrees.</p>', 1, 9),
(52, 'void AddToAngle(float delta)', '<p>Rotates the entity by adding <code>delta</code> degrees to the current entity angle. Vertical entities can''t be rotated.</p>', 1, 9),
(53, 'bool IsStatic()', '<p>Returns <code>true</code> if the entity is static or <code>false</code> if it is dynamic. <a href="../../manual/17">More about entity states</a>.</p>', 1, 9),
(55, 'collisionBox GetCollisionBox() const', '<p>Returns the unscaled collision box of this entity. If the entity hasn''t been set as collidable in the Entity Editor this method will return a box without volume.</p>\r\n<pre>if (entity.Collidable())\r\n{\r\n    collisionBox box = <strong>entity.GetCollisionBox();</strong>\r\n\r\n    const vector3 boxRelativePos = box.pos;\r\n    const vector3 boxSize = box.size;\r\n}\r\n</pre>\r\n<div class="alert">\r\n<p><strong>Warning!</strong> This method always returns the original collision box size and position, disregarding the entity scale or the current scene global scaling factor.</p>\r\n</div>', 1, 9),
(56, 'string GetEntityName()', '<p>Returns the entity name. By default, the entity name is equivalent to its original file name, e.g. <code>"zombie.ent"</code>, but entity names may be changed in the Scene Editor or with <code>AddEntity</code>:</p>\r\n<pre>int id = AddEntity("zombie.ent", vector3(200,200,0), "special_zombie");\r\nETHEntity@ specialZombie = SeekEntity(id);\r\nprint("Entity name: " + specialZombie.GetEntityName());\r\n</pre>\r\n<p>Output:</p>\r\n<pre>Entity name: special_zombie</pre>', 1, 9),
(57, 'bool Collidable()', '<p>Returns <code>true</code> if this this entity has a child collision box (which can be enabled in the Entity Editor).</p>', 1, 9),
(214, 'uint getDay()', '<p>Returns the day in the month it was the last time the <code>dateTime::update</code> method has been called.</p>\r\n<div class="alert">This method is based on the gregorian calendar</div>', 1, 16),
(59, 'bool SetFloat(string name, float value)', '<p>Sets a custom float variable to the entity. This method will overwrite both type and value if another data with the same name exists.</p>\r\n<p>Sample:</p>\r\n<pre>entity.SetFloat("speed", 10.5f);\r\nprint("Our beloved character walks at " + entity.GetFloat("speed") + " pixels per second");</pre>\r\n<p>Output:</p>\r\n<pre>Our beloved character walks at 10.5 pixels per second</pre>', 1, 9),
(60, 'bool SetInt(string name, int value)', '<p>Sets a custom int variable to the entity. This method will overwrite both type and value if another data with the same name exists.</p>\r\n<p>Sample:</p>\r\n<pre>entity.SetInt("hp", 2400);<br /><br />print("Character health is: " + entity.GetInt("hp"));</pre>\r\n<p>Output:</p>\r\n<pre>Character health is: 2400\r\n</pre>', 1, 9),
(61, 'bool SetUInt(string name, uint value)', '<p>Sets a custom <code>uint</code> variable to the entity. This method will overwrite both type and value if another data with the same name exists.</p>\r\n<p>Sample:</p>\r\n<pre><strong>entity.SetUInt("bagSlots", 15);</strong><br />print("Our beloved character has " + entity.GetUInt("bagSlots") + " slots in his bag");</pre>\r\n<p>Output:</p>\r\n<pre>Our beloved character has 15 slots in his bag</pre>', 1, 9),
(62, 'bool SetString(string name, string value)', '<p>Sets a custom string variable to the entity. This method will overwrite both type and value if another data with the same name exists.</p>\r\n<p>Sample:</p>\r\n<pre><strong>entity.SetString("characterName", "Boris");</strong>\r\nprint("Character name is: " + entity.GetString("characterName"));\r\n</pre>\r\n<p>Output:</p>\r\n<pre>Character name is: Boris\r\n</pre>', 1, 9),
(64, 'bool SetVector2(string name, vector2 data)', '<p>Sets a custom <code>vector2</code> data to the entity. This method will overwrite both type and value if another data with the same name exists.</p>\r\n<p>Sample:</p>\r\n<pre><strong>bullet.SetVector2("direction", vector2(1, 0));</strong>\r\nbullet.AddToPositionXY(bullet.GetVector2("direction"));</pre>', 1, 9),
(65, 'bool SetVector3(string name, vector3 data)', '<p>Sets a custom <code>vector3</code> data to the entity. This method will overwrite both type and value if another data with the same name exists.</p>\r\n<p>Sample:</p>\r\n<pre><strong>battleShip.SetVector3("shootingTargetPos", vector3(200,20,100));</strong>\r\nShootToDestination(battleShip.GetVector3("shootingTargetPos"));</pre>', 1, 9),
(66, 'void AddToFloat(string name, float value)', '<p>Adds&nbsp;<code>value</code> to a float custom variable. If the target custom data does not exist or if it is not a float, this method does nothing.</p>', 1, 9),
(67, 'void AddToInt(string name, int value)', '<p>Adds&nbsp;<code>value</code> to a custom int variable. If the target custom data does not exist or if it is not an int, this method does nothing.</p>', 1, 9),
(68, 'void AddToUInt(string name, uint value)', '<p>Adds <code>value</code> to a custom uint variable. If the target custom data does not exist or if it is not an uint, this method does nothing.</p>', 1, 9),
(69, 'void AddToVector2(string name, vector2 v)', '<p>Adds the <code>v</code> vector to a custom <code>vector2</code> variable. If the target custom data does not exist or if it is not a <code>vector2</code>, this method does nothing.</p>', 1, 9),
(70, 'void AddToVector3(string dataName, vector3 v)', '<p>Adds the <code>v</code> vector to a custom <code>vector3</code> variable. If the target custom data does not exist or if it is not a <code>vector3</code>, this method does nothing.</p>', 1, 9),
(71, 'void MultiplyFloat(string name, float value)', '<p>Multiplies a float custom variable by <code>value</code>. If the target custom data does not exist or if it is not a float, this method does nothing.</p>', 1, 9),
(72, 'DATA_TYPE CheckCustomData(string name)', '<p>Returns the data type of a given custom variable. If there is no matching data for that name, returns <code>DT_NODATA</code>.</p>\r\n<pre>DATA_TYPE dt = <strong>entity.CheckCustomData("characterName")</strong>;\r\nif (dt == DT_NODATA)\r\n    print("no name!");\r\n\r\nif (dt != DT_STRING)\r\n    print("It should be a string!");\r\n</pre>\r\n<p><a href="../../api/constants/8">The DATA_TYPE enum</a>.</p>', 1, 9),
(73, 'float GetFloat(string name)', '<p>Retrieves the value of a custom float variable from entity. If there is no float variable with that name it''ll return <code>0.0f</code>.</p>\r\n<pre>entity.SetFloat("speed", 10.0f);\r\nif (<strong>entity.GetFloat("speed")</strong> == 10.0f)\r\n    print("It works!");\r\n</pre>', 1, 9),
(74, 'int GetInt(string name)', '<p>Retrieves the value of a custom int variable from the entity. If there is no int variable with that name it''ll return <code>0</code>.</p>\r\n<pre><strong>entity.SetInt("hp", 100);</strong>\r\nif (entity.GetInt("hp") == 100)\r\n    print("It works!");</pre>', 1, 9),
(75, 'uint GetUInt(string name)', '<p>Returns the value of a custom uint variable from the entity. If there is no uint variable with that name it''ll return <code>0</code>.</p>\r\n<pre>entity.SetUInt("slotsInBag", 15);\r\nif (entity.<strong>GetUInt("slotsInBag")</strong> == 15)\r\n    print("It works!");</pre>', 1, 9),
(76, 'string GetString(string name)', '<p>Retrieves the value of a custom string variable from the entity. If there is no string with that name this function will return an empty string.</p>\r\n<pre>entity.SetString("name", "Jack");\r\nif (<strong>entity.GetString("name")</strong> == "Jack")\r\n    print("It works!");</pre>', 1, 9),
(77, 'bool HasCustomData()', '<p>Returns <code>true</code> if the entity has custom variables in it.&nbsp;<a href="../../manual/36">More about custom data</a>.</p>', 1, 9),
(78, 'bool EraseData(string name) ', '<p>Erases a custom variable with matching name. <a href="../../manual/36">More about custom data</a>.</p>\r\n<p>Sample:</p>\r\n<pre>entity.SetVector2("directionVec", vector2(1,0));\r\n<strong>entity.EraseData("directionVec");\r\n</strong>if (entity.CheckCustomData("directionVec") == DT_NODATA)\r\n    print("no more directionVec!");\r\n</pre>\r\n<p>Output:</p>\r\n<pre>no more directionVec!</pre>', 1, 9),
(79, 'void DebugPrintCustomData() const ', '<p>Prints all the custom variables to the console screen.</p>', 1, 9),
(80, 'ENTITY_TYPE GetType()', '<p>Returns the entity type. <a href="../../api/constants/7">The ENTITY_TYPE enum</a>.</p>', 1, 9),
(81, 'bool SetSprite(string fileName)', '<p>Changes the current sprite for the entity. The bitmap file must be in the project''s <code>entities/</code> folder, but its directory should be omitted in the argument:</p>\r\n<pre>ETHEntity@ ent = SeekEntity("character.ent");\r\n<strong>ent.SetSprite("other_bitmap.png");</strong></pre>', 1, 9),
(82, 'bool SetNormal(string fileName)', '<p>Changes the current normal map texture. The normal map bitmap file must be in the project''s <code>entities/normalmaps/</code> folder, but its path should be omitted in the argument:</p>\r\n<pre>ETHEntity@ ent = SeekEntity("character.ent");\r\n<strong>ent.SetNormal("other_normal.png");</strong></pre>', 1, 9),
(83, 'void SetSoundVolume(float volume)', '<p>Set the entity sound volume (from <code>0.0f</code> to <code>1.0f</code>).</p>', 1, 9),
(84, 'void SilenceParticleSystems(bool silence) ', '<p>Stop all sound effects that the entity might be playing.</p>', 1, 9),
(87, 'bool IsInvisible()', '<p>Returns <code>true</code> if this entity is invisible.</p>\r\n<p>Invisible entities have no sprite or particle systems. They may be used for invisible collision walls or to mark spots in scene, like dynamically added enemies starting position, or even the main character''s entry point in scene.</p>', 1, 9),
(88, 'bool HasParticleSystem()', '<p>Returns <code>true</code> if the entity has any children particle systems.</p>', 1, 9),
(89, 'bool HasLightSource()', '<p>Returns <code>true</code> if the entity has a child light source.</p>', 1, 9),
(90, 'bool HasSoundEffect() ', '<p>Returns <code>true</code> if any of the entity''s particle children has its own sound effect.</p>', 1, 9),
(91, 'void SetLightRange(float range)', '<p>Set the unscaled light range if the entity has a child light source.</p>', 1, 9),
(92, 'float GetLightRange() ', '<p>Returns the child light range. If the entity has no light source this function returns <code>0</code>.</p>', 1, 9),
(93, 'void SetLightColor(vector3 color) ', '<p>Sets the child light color if the entity has one.</p>', 1, 9),
(94, 'vector3 GetLightColor()', '<p>Returns the light color. If the entity has no light source this method returns <code>vector3(0,0,0)</code>.</p>', 1, 9),
(95, 'void SetEmissiveColor(vector3 color)', '<p>Set the entity emissive (self-illumination) color. The default emissive color is black (<code>vector3(0,0,0)</code>).</p>\r\n<p>When the emissive color is white (<code>vector3(1,1,1)</code>), the ambient light color won''t darken the entity sprite.</p>', 1, 9),
(96, 'vector3 GetEmissiveColor()', '<p>Returns the entity emissive (self-illumination) color. The default color is black (<code>vector3(0,0,0)</code>).</p>', 1, 9),
(97, 'void KillParticleSystem(uint slot)', '<p>Kills a child particle system. <code>slot</code> must be <code>0</code> for slot A and <code>1</code> for slot B.</p>\r\n<p>Killing a particle effect will prevent it from spawning new particles, which makes the effect vanish slowly and gently.</p>', 1, 9),
(98, 'bool ParticlesKilled(uint slot)', '<p>Returns <code>true</code> if the child particle system is killed. <code>0</code> for slot A and <code>1</code> for slot B.</p>', 1, 9),
(99, 'bool PlayParticleSystem(uint slot)', '<p>Plays a child particle system. It may be used to restore killed particle systems. <code>slot</code> must be <code>0</code> for slot A and <code>1</code> for slot B.</p>', 1, 9),
(100, 'bool AreParticlesOver()', '<p>Returns <code>true</code> if all child particle effects are over.</p>', 1, 9),
(101, 'void SetColor(vector3 color)', '<p>Set entity color. The default entity color is white (<code>vector3(1,1,1)</code>).</p>\r\n<p>This value is multiplied by the entity sprite pixel colors shading the entire sprite.</p>', 1, 9),
(102, 'vector3 GetColor() ', '<p>Returns the entity color. The default entity color is white (<code>vector3(1,1,1)</code>), which preserves sprite original colors.</p>', 1, 9),
(103, 'void SetAlpha(float alphaValue)', '<p>Sets the entity alpha (transparency) value. <code>0.0f</code> makes it completely invisible and <code>1.0f</code> enables full opacity. Any value between this will linearly interpolate the transparency.</p>\r\n<p>Dynamic alpha values only work for entities that use the default blending method (Pixel).</p>', 1, 9),
(104, 'float GetAlpha()', '<p>Gets the entity alpha (transparency) value where <code>0.0f</code> means completely invisible and <code>1.0f</code> full opacity.</p>', 1, 9),
(105, 'void SetLayerDepth(float layer)', '<p>Sets the layer depth for the entity. If the entity type is not layerable, <code>SetLayerDepth</code> will automatically convert the entity into a entity.</p>\r\n<p>The layer depth is used to apply z-sorting on layerable entities.&nbsp;<a href="../../manual/12">More about entity types</a>.</p>\r\n<p>layerable</p>', 1, 9),
(106, 'float GetLayerDepth()', '<p>Gets the layer depth from the entity. The layer depth is used to z-sort layerable entities. <a href="../../manual/12">More about entity types</a>.</p>', 1, 9),
(107, 'bool IsAlive() ', '<p>Returns <code>true</code> if this entity is alive in the scene and false if it has already been removed from it.</p>\r\n<p>An entity is normally removed from scene with the <code>DeleteEntity</code> function.</p>\r\n<p>Notice that an entity will still exist in memory even after being deleted if the user still holds an <code>ETHEntity@</code> reference to that entity anywhere in the script.</p>', 1, 9),
(108, 'void Hide(bool hide)', '<p>Sets entity visibility. <code>true</code> to hide it and <code>false</code> to show it.</p>', 1, 9),
(109, 'bool IsHidden() ', '<p>This method tells whether the entity is hidden or not.</p>', 1, 9),
(110, 'bool HasShadow()', '<p>Returns <code>true</code> if the entity is a shadow caster.</p>', 1, 9),
(111, 'void SetShadowZ(const float) ', '<p>Sets the entity''s shadow height (z-position). For a better looking scene the shadow Z-position must be equivalent to the floor height.</p>', 1, 9),
(112, 'float GetShadowZ()', '<p>Returns the entity''s shadow z position. For a better looking scene, the shadow Z-position must be equivalent to the floor height.</p>', 1, 9),
(113, 'vector2 GetCurrentBucket()', '<p>Returns the entity''s current bucket key. <a href="../../manual/44">More about scene buckets</a>.</p>\r\n<p>The same as:</p>\r\n<pre>GetBucket(entity.GetPositionXY());\r\n</pre>', 1, 9),
(114, 'void SetParticlePosition(uint slot, vector3 pos)', '<p>Sets a new relative position to the entity''s particle system. <code>slot</code> must be <code>0</code> for slot A or <code>1</code> for slot B.</p>', 1, 9),
(115, 'void ScaleParticleSystem(uint slot, const float scaleValue)', '<p>Scales the particle system. <code>slot</code> must be <code>0</code> for slot A, and <code>1</code> for slot B.</p>', 1, 9),
(116, 'void MirrorParticleSystemX(uint slot, bool mirrorGravity)', '<p>Mirrors the particle system along the X axis. Set <code>mirrorGravity</code> to <code>true</code> in order to mirror the gravity vector as well.</p>', 1, 9),
(117, 'void MirrorParticleSystemY(uint slot, bool mirrorGravity)', '<p>Mirrors the particle system along the Y axis. Set the <code>mirrorGravity</code> parameter to <code>true</code> in order to mirror the gravity vector as well.</p>', 1, 9),
(118, 'KEY_STATE GetKeyState(KEY key)', '<p>Returns the state of the keyboard <code>key</code>.</p>\r\n<p>Sample:</p>\r\n<pre>ETHInput@ input = GetInputHandle();\r\nif (<strong>input.GetKeyState(K_D)</strong>) == KS_HIT)\r\n{\r\n    print("User has just hit the D key!");\r\n}\r\n</pre>\r\n<div class="well well-small"><a href="../../api/constants/3">Keys</a></div>\r\n<div class="well well-small"><a href="../../api/constants/6">Key states</a></div>', 1, 10),
(119, 'bool KeyDown(KEY key)', '<p>Returns <code>true</code> if the keyboard <code>key</code> is being pressed.</p>\r\n<pre>ETHInput@ input = GetInputHandle();\r\n\r\nif (<strong>input.KeyDown(K_A)</strong>)\r\n{\r\n    print("Player is holding A!");\r\n}\r\n\r\nif (<strong>input.KeyDown(K_SHIFT)</strong>)\r\n{\r\n    print("Player is holding shift!");\r\n}\r\n</pre>\r\n<div class="well well-small"><a href="../../api/constants/6">Key states</a></div>\r\n<div class="well well-small"><a href="../../api/constants/3">Keys</a></div>', 1, 10),
(120, 'vector2 GetCursorPos()', '<p>Returns the mouse cursor position.</p>\r\n<p>Sample:</p>\r\n<pre>ETHInput@ input = GetInputHandle();\r\n\r\n// add entity on cursor position\r\nvector2 cursorPos = <strong>input.GetCursorPos()</strong>;\r\nvector2 worldSpaceCursorPos = cursorPos + GetCameraPos();\r\n\r\nAddEntity("sparkle_effect.ent", vector3(worldSpaceCursorPos, 0.0f));\r\n</pre>', 1, 10),
(121, 'void SetCursorPos(vector2 pos)', '<p>Positions the mouse cursor on a specific spot in screen.</p>', 1, 10),
(122, 'vector2 GetCursorAbsolutePos()', '<p>Returns the cursor absolute position in screen (which is not relative to the game window position).</p>\r\n<div class="alert alert-info">This method returns the same as ETHInput::GetCursorPos if the game runs at fullscreen mode</div>', 1, 10),
(123, 'vector2 GetMouseMove()', '<p>Returns the cursor movement vector.</p>\r\n<pre>ETHInput@ input = GetInputHandle();\r\n\r\n// move entity according to mouse movement\r\nentity.AddToPositionXY(<strong>input.GetMouseMove()</strong>);</pre>', 1, 10),
(124, 'float GetWheelState()', '<p>Returns the current mouse wheel scroll value. The return value is <code>0.0f</code> if the wheel is still.</p>', 1, 10),
(125, 'KEY_STATE GetLeftClickState()', '<p>Returns the left mouse button status.</p>\r\n<div class="well well-small"><a href="../../api/constants/6">Button states</a></div>', 1, 10),
(126, 'KEY_STATE GetRightClickState() ', '<p>Returns the right mouse button status.</p>\r\n<div class="well well-small"><a href="../../api/constants/6">Button states</a></div>', 1, 10),
(127, 'KEY_STATE GetMiddleClickState()', '<p>Returns middle mouse button status.</p>\r\n<div class="well well-small"><a href="../../api/constants/6">Button states</a></div>', 1, 10),
(128, 'string GetLastCharInput()', '<p>Returns the lastest keyboard character entry.</p>\r\n<div class="alert"><strong>Warning</strong> This method is currently not working on Android and iOS implementations.</div>', 1, 10),
(129, 'bool DetectJoysticks()', '<p>Detect Joysticks. Useful to check if the user has plugged a new device.</p>', 1, 10),
(130, 'KEY_STATE JoyButtonState(uint joystickId, J_KEY key)', '<p>Returns the state of a joystick button in the given <code>joystickId</code>.</p>\r\n<pre>ETHInput@ input = GetInputHandle();\r\n\r\n// if player one hit joystick button #8\r\nif (<strong>input.JoyButtonState(0, JK_08)</strong> == KS_HIT)\r\n{\r\n    print("Player 1 hit button 8!");\r\n}\r\n\r\n// if player released left button\r\nif (<strong>input.JoyButtonState(1, JK_LEFT)</strong> == KS_RELEASE)\r\n{\r\n    print("Player 2 released left button!");\r\n}\r\n</pre>\r\n<div class="well well-small"><a href="../../api/constants/6">Button states</a></div>\r\n<div class="well well-small"><a href="../../api/constants/4">Joystick keys</a></div>', 1, 10),
(131, 'bool JoyButtonDown(uint joystickId, J_KEY key)', '<p>Returns <code>true</code> if the joystick <code>key</code> button is being pressed. <code>joystickId</code> specifies the target joystick.</p>\r\n<pre>ETHInput@ input = GetInputHandle();\r\n\r\n// if player one pressed joystick button #8\r\nif (<strong>input.JoyButtonDown(0, JK_08)</strong>)\r\n{\r\n    print("Player 1 is holding button 8!");\r\n}\r\n\r\n// if player two is pressing left\r\nif (<strong>input.JoyButtonDown(1, JK_LEFT)</strong>)\r\n{\r\n    print("Player 2 is holding left button!");\r\n}\r\n</pre>\r\n<div class="well well-small"><a href="../../api/constants/6">Button states</a></div>\r\n<div class="well well-small"><a href="../../api/constants/4">Joystick keys</a></div>', 1, 10),
(132, 'J_STATUS GetJoystickStatus(uint joystickId)', '<p>Returns the status of <code>joystickId</code>.</p>\r\n<div class="well well-small"><a href="../../api/constants/10">Joystick states</a></div>', 1, 10),
(133, 'vector2 GetJoystickXY(uint joystickId)', '<p>Returns the joystick X and Y axis.</p>\r\n<pre>ETHInput@ input = GetInputHandle();\r\n\r\n// move entity according to player 1 analog directions\r\nentity.AddToPositionXY(<strong>input.GetJoystickXY(0)</strong>);\r\n</pre>', 1, 10),
(134, 'float GetJoystickZ(uint joystickId)', '<p>Returns the joystick Z axis.</p>', 1, 10),
(135, 'float GetJoystickRudder(uint joystickId)', '<p>Returns the joystick rudder axis value.</p>', 1, 10),
(136, 'vector2 GetJoystickUV(uint joystickId)', '<p>Returns the joystick U and V axis.</p>', 1, 10),
(137, 'J_KEY GetFirstButtonDown(uint joystickId)', '<p>Returns the the first joystick button that is being pressed for target <code>joystickId</code>. Useful for waiting until the user chooses any key he wants to use.</p>\r\n<p>If no button is being pressed, this method returns <code>JK_NONE</code>.</p>\r\n<p>Sample:</p>\r\n<pre>void onSceneUpdate()\r\n{\r\n    ETHInput@ input = GetInputHandle();\r\n    J_KEY jk =<strong> input.GetFirstButtonDown(0)</strong>;\r\n    if (jk != JK_NONE)\r\n    {\r\n        if (jk == JK_01)\r\n            print("User pressed button #1");\r\n    }\r\n}\r\n</pre>\r\n<div class="well well-small"><a href="../../api/constants/4">Joystick keys</a></div>', 1, 10),
(138, 'uint GetNumJoyButtons(uint joystickId)', '<p>Returns the number of buttons in the given <code>joystickId</code>.</p>', 1, 10),
(139, 'uint GetMaxJoysticks() const', '<p>Returns the maximum number of joysticks supported.</p>', 1, 10),
(215, 'uint getMonth()', '<p>Returns the month it was the last time the <code>dateTime::update</code> method was called.</p>\r\n<div class="alert">This method is based on the gregorian calendar</div>', 1, 16),
(216, 'uint getYear()', '<p>Returns the current year in the gregorian calendar.</p>', 1, 16),
(208, 'void GetObject(string name, ?&out)', '<p>Retrieves the @reference to an AngelScript object which has been stored in the entity custom data map.</p>\r\n<pre>{\r\n    MyObject obj;\r\n    obj.foo = 10;\r\n    entity.SetObject("obj", @obj);\r\n}\r\n\r\n{\r\n    MyObject@ obj;\r\n   <strong> entity.GetObject("obj", @obj);\r\n</strong>    print(obj.foo);\r\n}\r\n</pre>\r\n<p>Output:</p>\r\n<pre>10</pre>\r\n<p>Object types must match.</p>', 1, 9),
(209, 'void SetObject(string name, ?&in)', '<p>Stores a @reference to an AngelScript object in the entity custom data map.</p>\r\n<pre>{\r\n    MyObject obj;\r\n    obj.foo = 10;\r\n    <strong>entity.SetObject("obj", @obj);</strong>\r\n}\r\n\r\n{\r\n    MyObject@ obj;\r\n    entity.GetObject("obj", @obj);\r\n    print(obj.foo);\r\n}\r\n</pre>\r\n<p>Output:</p>\r\n<pre>10\r\n</pre>', 1, 9),
(206, 'void SetScale(vector2 scale)', '<p>Set an absolute scale value to the entity.</p>\r\n<p>Different values to <code>x</code> and <code>y</code> can be set in order to distort entity sprite.</p>\r\n<pre>// set entity sprite size to 200% of its original bitmap size\r\nentity.SetScale(vector2(2.0f, 2.0f));\r\n</pre>\r\n<pre>// shrink entity width to the half of its original sprite size\r\nentity.SetScale(vector2(0.5f, 1.0f));</pre>', 1, 9),
(207, 'vector2 GetScale()', '<p>Returns the current entity scale. Global scale is taken into account.</p>', 1, 9),
(204, 'void Scale(vector2 scale)', '<p>Scales the entity as well as all its light sources and particle systems.</p>\r\n<p>Different values to x and y can be set in order to distort entity sprite.</p>\r\n<pre>// doubles the current entity size\r\nentity.SetScale(vector2(2.0f, 2.0f));\r\n</pre>\r\n<pre>// shrink entity width to the half of its current size\r\nentity.SetScale(vector2(0.5f, 1.0f));\r\n</pre>', 1, 9),
(201, 'vector3 GetAccelerometerData()', '<p>Returns the accelerometer three-dimensional vector.</p>\r\n<ul>\r\n<li><a href="http://developer.android.com/guide/topics/sensors/sensors_overview.html#sensors-coords" target="_blank">Android accelerometer</a></li>\r\n<li><a href="http://developer.apple.com/library/ios/#documentation/EventHandling/Conceptual/EventHandlingiPhoneOS/MotionEvents/MotionEvents.html" target="_blank">iOS accelerometer</a></li>\r\n</ul>\r\n<div class="alert"><strong>Warning</strong> The accelerometer input is not supported on desktop environments. This method will return vector3(0,0,0) if the acceleremeter is not supported.</div>', 1, 10),
(200, 'vector2 GetTouchMove(uint touchIndex)', '<p>Returns the touch movement vector. From which the programmer can extract length and direction and detect his own gestures.</p>\r\n<pre>ETHInput@ input = GetInputHandle();\r\n\r\n// move entity according to 1st touch movement gestures\r\nentity.AddToPositionXY(<strong>input.GetTouchMove(0)</strong>);</pre>\r\n<p>This method will return <code>vector2(0,0)</code> if no touch is detected in the given <code>touchIndex</code>.</p>', 1, 10),
(205, 'void Scale(float scale)', '<p>Scales the entity as well as all its light sources and particle systems.</p>\r\n<pre>// doubles the current entity size\r\nentity.Scale(2.0f);\r\n</pre>\r\n<pre>// shrink entity by half of its current size\r\nentity.Scale(0.5f);\r\n</pre>', 1, 9),
(199, 'uint GetMaxTouchCount()', '<p>Returns the maximum number of simultaneous touches supported.</p>\r\n<pre>ETHInput@ input = GetInputHandle();\r\n\r\nfor (uint t = 0; t &lt; <strong>input.GetMaxTouchCount()</strong>; t++)\r\n{\r\n    if (input.GetTouchState(t) == KS_DOWN)\r\n    {\r\n        vector2 touchPos = input.GetTouchPos(t);\r\n        print("User is touching screen at " + touchPos.x + ","+ touchPos.y);\r\n    }\r\n}\r\n</pre>\r\n<div class="well well-small"><a href="../../api/constants/6">Touch states</a></div>', 1, 10),
(198, 'KEY_STATE GetTouchState(uint touchIndex)', '<p>Retrieves the touch state of the given <code>touchIndex</code>.</p>\r\n<pre>ETHInput@ input = GetInputHandle();\r\n\r\nfor (uint t = 0; t &lt; input.GetMaxTouchCount(); t++)\r\n{\r\n    if (<strong>input.GetTouchState(t)</strong> == KS_DOWN)\r\n    {\r\n        vector2 touchPos = input.GetTouchPos(t);\r\n        print("User is touching screen at " + touchPos.x + ","+ touchPos.y);\r\n    }\r\n}\r\n</pre>\r\n<div class="well well-small"><a href="../../api/constants/6">Touch states</a></div>', 1, 10),
(197, 'vector2 GetTouchPos(uint touchIndex)', '<p>Returns the screen position (in pixels) of a given <code>touchIndex</code>.</p>\r\n<pre>ETHInput@ input = GetInputHandle();\r\n\r\nfor (uint t = 0; t &lt; input.GetMaxTouchCount(); t++)\r\n{\r\n    if (input.GetTouchState(t) == KS_DOWN)\r\n    {\r\n        vector2 touchPos = <strong>input.GetTouchPos(t)</strong>;\r\n        print("User is touching screen at " + touchPos.x + ","+ touchPos.y);\r\n    }\r\n}\r\n</pre>\r\n<p>The return value of this method is undefined if the method <code>ETHInput::GetTouchState</code> return value is different than <code>KS_HIT</code> or <code>KS_DOWN</code>. More about <a href="../../api/constants/6">key state</a>&nbsp;constants.</p>', 1, 10),
(159, 'float get(uint i, uint j) const', '<p>Get the value in the positon (<code>i</code>,<code>j</code>) from matrix.</p>', 1, 12),
(160, 'void set(uint i, uint j, float value)', '<p>Set <code>value</code> to (<code>i</code>,<code>j</code>) positon in the matrix.</p>', 1, 12),
(161, 'uint Size() const', '<p>Returns the number of elements in the array.</p>\r\n<pre>ETHEntityArray zombies;\r\nGetEntityArray("zombie.ent", zombies);\r\nprint("The scene has " + <strong>zombies.Size()</strong> + "zombies!");\r\n</pre>', 1, 13),
(162, 'void Clear() ', '<p>Clears the array releasing all its handles.</p>\r\n<pre>ETHEntityArray zombies;\r\n\r\nGetEntityArray("zombie.ent", zombies);\r\nprint("The array has " + zombies.Size() + " zombies!");\r\n\r\n<strong>zombies.Clear();</strong>\r\nprint("The array has " + zombies.Size() + " zombies!");\r\n</pre>\r\n<p>Output:</p>\r\n<pre>The array has 15 zombies!\r\nThe array has 0 zombies!\r\n</pre>', 1, 13),
(163, 'void Unique()', '<p>Remove repeated entries in the array.</p>\r\n<pre>ETHEntity@ orc = SeekEntity("orc.ent");\r\nETHEntity@ elf = SeekEntity("elf.ent");\r\n\r\nETHEntityArray soldiers;\r\nsoldiers.Insert(orc);\r\nsoldiers.Insert(elf);\r\n\r\nsoldiers.Insert(orc);<br />soldiers.Insert(orc);<br />soldiers.Insert(orc);<br />soldiers.Insert(orc);<br />\r\n<strong>soldiers.Unique();</strong>\r\n\r\nprint("Number of soldiers in the array: " + soldiers.Size());\r\n</pre>\r\n<p>Output:</p>\r\n<pre>Number of soldiers in the array: 2</pre>', 1, 13),
(164, 'void RemoveDeadEntities() ', '<p>Remove all references to entities that have already been deleted from scene.</p>\r\n<pre>ETHEntity@ orc = SeekEntity("orc.ent");\r\nETHEntity@ elf = SeekEntity("elf.ent");\r\n\r\nETHEntityArray soldiers;\r\nsoldiers.Insert(orc);\r\nsoldiers.Insert(elf);\r\n\r\n// deletes the orc from scene\r\nDeleteEntity(orc);\r\n\r\n// since orc is gone, this method will remove it from the array\r\n<strong>soldiers.RemoveDeadEntities();</strong>\r\n\r\nprint("Number of soldiers in the array: " + soldiers.Size());\r\n</pre>\r\n<p>Output:</p>\r\n<pre>Number of soldiers in the array: 1</pre>', 1, 13),
(165, 'void Insert(ETHEntity@ handle)', '<p>Inserts an entity handle at the end of the array.</p>\r\n<pre>ETHEntity@ orc = SeekEntity("orc.ent");\r\nETHEntity@ elf = SeekEntity("elf.ent");\r\n\r\nETHEntityArray soldiers;\r\n<strong>soldiers.Insert(orc);\r\nsoldiers.Insert(elf);</strong>\r\n\r\nprint(soldiers[0]);\r\nprint(soldiers[1]);\r\n</pre>\r\n<p>Output:</p>\r\n<pre>orc.ent\r\nelf.ent\r\n</pre>', 1, 13),
(166, 'void operator+= ', '<p>Appends a copy of the source array at the end of the destination array. Example:</p>\r\n<pre>ETHEntityArray orcs;\r\nGetEntityArray("orc.ent", orcs);\r\n\r\nETHEntityArray elfs;\r\nGetEntityArray("elf.ent", elfs);\r\n    \r\nETHEntityArray soldiers;\r\n<strong>soldiers</strong> <strong>+=</strong> orcs;\r\n<strong>soldiers</strong> <strong>+=</strong> elfs;\r\n// now the "soldiers" array holds all elf and orc handles\r\n\r\n// Clears the "orcs" and "elfs" arrays but the "soldiers" array still stores the handles\r\norcs.clear();\r\nelfs.clear();</pre>', 1, 13),
(167, 'ETH_BODY_SHAPE GetShape() const', '<p>Returns the current <a href="../../api/constants/11">body shape</a>.</p>', 1, 14),
(168, 'void SetGravityScale(float scale)', '<p>Scale the gravity applied to this body by the <code>scale</code> value.</p>', 1, 14),
(169, 'float GetGravityScale() const', '<p>Get the gravity scale of the body.</p>', 1, 14),
(170, 'void SetAngularVelocity(float velocity)', '<p>Set the angular velocity. <code>velocity</code> describes the new angular velocity in radians/second.</p>', 1, 14),
(171, 'void SetAwake(bool awake)', '<p>Toggles the entity-body sleeping state. <code>true</code> disables the sleeping mode awaking the entity, <code>false</code> does the opposite. The excerpt below has been extracted from the <a href="http://box2d.org/documentation/">Box2D User Manual</a>:</p>\r\n<div class="well">\r\n<p>What does sleep mean? Well it is expensive to simulate bodies, so the less we have to simulate the better. When a body comes to rest we would like to stop simulating it.</p>\r\n<p>When Box2D determines that a body (or group of bodies) has come to rest, the body enters a sleep state which has very little CPU overhead. If a body is awake and collides with a sleeping body, then the sleeping body wakes up. Bodies will also wake up if a joint or contact attached to them is destroyed. You can also wake a body manually.</p>\r\n<p>The body definition lets you specify whether a body can sleep and whether a body is created sleeping.</p>\r\n</div>', 1, 14),
(236, 'string getAttributeNames(string entityName)', '<p>Returns a comma-separated string listing all attributes in the enml-entity named <code>entityName</code>.</p>\r\n<pre>enmlEntity character;\r\ncharacter.add("class", "rogue");\r\ncharacter.add("level", "85");\r\ncharacter.add("name", "Nathan");\r\n\r\nenmlFile f;\r\nf.addEntity("partyMember0", entity);\r\n\r\nprint(<strong>f.getAttributeNames("partyMember0")</strong>);\r\n</pre>\r\n<p>Output:</p>\r\n<pre>class,level,name</pre>', 1, 17),
(172, 'void SetBullet(bool enable)', '<p>Set <code>true</code> to enable the bullet mode for the entity.</p>\r\n<p>The excerpt below has been extracted from the&nbsp;<a href="http://box2d.org/documentation/">Box2D User Manual</a>:</p>\r\n<p>Game simulation usually generates a sequence of images that are played at some frame rate. This is&nbsp;called discrete simulation. In discrete simulation, rigid bodies can move by a large amount in one time step. If a physics engine doesn''t account for the large motion, you may see some objects incorrectly pass&nbsp;through each other. This effect is called tunneling.</p>\r\n<p>By default, Box2D uses continuous collision detection (CCD) to prevent dynamic bodies from tunneling&nbsp;through static bodies. This is done by sweeping shapes from their old position to their new positions.&nbsp;The engine looks for new collisions during the sweep and computes the time of impact (TOI) for these&nbsp;collisions. Bodies are moved to their first TOI and then halted for the remainder of the time step.</p>\r\n<p>Normally CCD is not used between dynamic bodies. This is done to keep performance reasonable. In&nbsp;some game scenarios you need dynamic bodies to use CCD. For example, you may want to shoot a high&nbsp;speed bullet at a stack of dynamic bricks. Without CCD, the bullet might tunnel through the bricks.</p>', 1, 14),
(173, 'bool IsAwake() const', '<p>Returns <code>true</code> if the entity-body is awake, <code>false</code> otherwise. The excerpt below has been extracted from the <a href="http://box2d.org/documentation/">Box2D User Manual</a>:</p>\r\n<div class="well">\r\n<p>What does sleep mean? Well it is expensive to simulate bodies, so the less we have to simulate the better. When a body comes to rest we would like to stop simulating it.</p>\r\n<p>When Box2D determines that a body (or group of bodies) has come to rest, the body enters a sleep state which has very little CPU overhead. If a body is awake and collides with a sleeping body, then the sleeping body wakes up. Bodies will also wake up if a joint or contact attached to them is destroyed. You can also wake a body manually.</p>\r\n<p>The body definition lets you specify whether a body can sleep and whether a body is created sleeping.</p>\r\n</div>', 1, 14),
(235, 'string getEntityNames()', '<p>Returns a comma-separated string listing all entities in the enml-file.</p>\r\n<pre>enmlFile f;\r\nf.addEntity("partyMember0", entity0);\r\nf.addEntity("partyMember1", entity1);\r\nf.addEntity("partyMember2", entity2);\r\n\r\nprint(<strong>f.getEntityNames()</strong>);\r\n</pre>\r\n<p>Output:</p>\r\n<pre>partyMember0,partyMember1,partyMember2</pre>', 1, 17),
(174, 'bool IsBullet() const', '<p>Returns <code>true</code> if the entity is a bullet.</p>\r\n<p>The excerpt below has been extracted from the <a href="http://box2d.org/documentation/">Box2D User Manual</a>:</p>\r\n<p>Game simulation usually generates a sequence of images that are played at some frame rate. This is&nbsp;called discrete simulation. In discrete simulation, rigid bodies can move by a large amount in one time step. If a physics engine doesn''t account for the large motion, you may see some objects incorrectly pass&nbsp;through each other. This effect is called tunneling.</p>\r\n<p>By default, Box2D uses continuous collision detection (CCD) to prevent dynamic bodies from tunneling&nbsp;through static bodies. This is done by sweeping shapes from their old position to their new positions.&nbsp;The engine looks for new collisions during the sweep and computes the time of impact (TOI) for these&nbsp;collisions. Bodies are moved to their first TOI and then halted for the remainder of the time step.</p>\r\n<p>Normally CCD is not used between dynamic bodies. This is done to keep performance reasonable. In&nbsp;some game scenarios you need dynamic bodies to use CCD. For example, you may want to shoot a high&nbsp;speed bullet at a stack of dynamic bricks. Without CCD, the bullet might tunnel through the bricks.</p>', 1, 14),
(175, 'float GetMass() const', '<p>Get the total mass of the body.</p>', 1, 14),
(234, 'string getErrorString() ', '<p>Returns the parsing error message.</p>\r\n<pre>const string str = GetStringFromFile("sample.enml");\r\n\r\nenmlFile f;\r\nif (f.parseString(str) == 0)<br />{<br />    print(<strong>f.getErrorString()</strong>);<br />}</pre>', 1, 17),
(176, 'float GetAngularVelocity() const', '<p>Gets the angular velocity in radians/second.</p>', 1, 14),
(231, 'bool getInt(string entityName, string attributeName, int &out)', '<p>Copies into <code>out</code> the parsed value of an int attribute named <code>attributeName</code> contained in <code>entityName</code>.</p>\r\n<p>If the attribute does not exist or the parsing fails, the <code>out</code> value remains unchanged.</p>', 1, 17),
(177, 'vector2 GetLinearVelocity() const', '<p>Returns the linear velocity of the center of mass.</p>', 1, 14),
(229, 'string get(string entityName, string attributeName)', '<p>Returns the raw string value of <code>attributeName</code> contained in <code>entityName</code>.</p>\r\n<p>If the attribute does not exist this method returns an empty string.</p>', 1, 17),
(178, 'void ApplyTorque(float torque)', '<p>Apply a torque. This affects the angular velocity without affecting the linear velocity of the center of mass. This wakes up the body.</p>\r\n<p><code>torque</code> runs about the z-axis (out of the screen), usually in N-m.</p>', 1, 14),
(179, 'void ApplyForce(vector2 force, vector2 point)', '<p>Apply a force at a world point. If the force is not applied at the center of mass, it will generate a torque and affect the angular velocity. This wakes up the body.</p>\r\n<p><code>force</code> describes the world force vector, usually in Newtons (N).</p>\r\n<p><code>point</code> indicates the world position of the point of application.</p>', 1, 14),
(180, 'void ApplyForceToCenter(vector2 force)', '<p>Apply a force to the center of mass. This wakes up the body. <code>force</code> describes the world force vector, usually in Newtons (N).</p>', 1, 14),
(232, 'bool getUInt(string entityName, string attributeName, uint &out)', '<p>Copies into <code>out</code> the parsed value of an uint attribute named <code>attributeName</code> contained in <code>entityName</code>.</p>\r\n<p>If the attribute does not exist or the parsing fails, the <code>out</code> value remains unchanged.</p>', 1, 17),
(181, 'void SetLinearVelocity(vector2 velocity)', '<p>Set the linear velocity of the center of mass.</p>', 1, 14),
(182, 'void ApplyAngularImpulse(float impulse)', '<p>Applies an angular impulse in units of kg*m*m/s</p>', 1, 14),
(230, 'bool getDouble(string entityName, string attributeName, double &out)', '<p>Copies into <code>out</code> the parsed value of a double attribute named <code>attributeName</code> contained in <code>entityName</code>.</p>\r\n<p>If the attribute does not exist or the parsing fails, the <code>out</code> value remains unchanged.</p>', 1, 17),
(183, 'void ApplyLinearImpulse(vector2 impulse, vector2 point)', '<p>Apply an impulse at a point. This immediately modifies the velocity. It also modifies the angular velocity if the point of application is not at the center of mass. This wakes up the body.</p>\r\n<p><code>impulse</code> describes the world impulse vector, usually in N-seconds or kg-m/s.</p>\r\n<p><code>point</code> describes the world position of the point of application.</p>', 1, 14),
(233, 'bool getFloat(string entityName, string attributeName, float &out)', '<p>Copies into <code>out</code> the parsed value of a float attribute named <code>attributeName</code> contained in <code>entityName</code>.</p>\r\n<p>If the attribute does not exist or the parsing fails, the <code>out</code> value remains unchanged.</p>', 1, 17),
(184, 'bool IsSensor() const', '<p>Returns <code>true</code> if this entity is a sensor body.</p>', 1, 14),
(185, 'bool IsFixedRotation() const', '<p>Returns <code>true</code> if this entity has fixed rotation.</p>', 1, 14),
(228, 'bool exists(string entityName)', '<p>Returns <code>true</code> if the enml-file has an enml-entity named <code>entityName</code>.</p>', 1, 17),
(186, 'float GetFriction() const', '<p>Get the coefficient of friction.</p>', 1, 14),
(227, 'uint parseString(string content)', '<p>Fills the entire file with enml-entities read from <code>content</code>.</p>\r\n<pre>const string str = GetStringFromFile(GetResourceDirectory() + "sample.enml");\r\n\r\nenmlFile f;\r\n<strong>f.parseString(str)</strong>;\r\n\r\nprint(f.get("myCar", "name"));\r\nprint(f.get("theWall", "artist"));</pre>\r\n<p>If the parsing is completed successfully, this method returns a&nbsp;<code>0</code>.</p>', 1, 17),
(187, 'void SetFriction(float friction)', '<p>Set the coefficient of friction. This will <strong>not</strong> change the friction of existing contacts.</p>', 1, 14),
(226, 'string generateString()', '<p>Generates an enml declaration string that can be saved for later use.</p>\r\n<pre>enmlFile f;\r\n\r\nenmlEntity entity;\r\nentity.add("class", "rogue");\r\nentity.add("level", "85");\r\nentity.add("name", "Nathan");\r\nf.addEntity("partyMember0", entity);\r\n\r\nstring str = <strong>f.generateString()</strong>;\r\nSaveStringToFile(GetExternalStorageDirectory() + "myFile.txt", str);\r\n</pre>\r\n<p>Output:</p>\r\n<pre>partyMember0\r\n{\r\n    class = rogue;\r\n    level = 85;\r\n    name = Nathan;\r\n}\r\n</pre>', 1, 17),
(188, 'float GetRestitution() const', '<p>Returns the coefficient of restitution.</p>', 1, 14),
(189, 'void SetRestitution(float restitution)', '<p>Set the coefficient of restitution. This will <strong>not</strong> change the restitution of existing contacts.</p>', 1, 14),
(225, 'void addEntity(string entityName, enmlEntity &in)', '<p>Inserts an enml-entity to the enml-file.</p>\r\n<p>Sample:</p>\r\n<pre>enmlFile f;\r\n\r\nenmlEntity entity;\r\n<strong>entity.add("class", "rogue");\r\nentity.add("level", "85");\r\nentity.add("name", "Nathan");\r\n</strong>f.addEntity("partyMember0", entity);\r\n\r\nentity.clear();\r\n<strong>entity.add("class", "paladin");\r\nentity.add("level", "71");\r\nentity.add("name", "John");\r\n</strong>f.addEntity("partyMember1", entity);\r\n\r\nstring str = f.generateString();\r\nSaveStringToFile("myFile.txt", str);\r\n</pre>', 1, 17),
(224, 'void clear()', '<p>Clears all the content stored in the object.</p>', 1, 17),
(223, 'string getAttributeNames() ', '<p>Returns a comma-separated string listing all attributes in the enml-entity.</p>\r\n<pre>enmlEntity character;\r\ncharacter.add("class", "rogue");\r\ncharacter.add("level", "85");\r\ncharacter.add("name", "Nathan");\r\n\r\nprint(<strong>character.getAttributeNames()</strong>);\r\n</pre>\r\n<p>Output:</p>\r\n<pre>class,level,name\r\n</pre>', 1, 18),
(192, 'float GetJointAngle() const', '<p>Returns the current joint angle in radians.</p>', 1, 15),
(222, 'string get(string attributeName)', '<p>Returns a string containing the value of the attribute <code>attributeName</code>.</p>\r\n<p>If the attribute does not exist in this entity, this method returns an empty string.</p>', 1, 18),
(193, 'float GetJointSpeed() const', '<p>Returns&nbsp;the current joint angle speed in radians per second.</p>', 1, 15);
INSERT INTO `ethmethod` (`id`, `title`, `description`, `status`, `ethclass_id`) VALUES
(221, 'void add(string attributeName, string value)', '<p>&nbsp;Set an enml-entity attribute.</p>\r\n<pre>enmlEntity character;\r\n<strong>character.add("class", "rogue");</strong><br />\r\nprint(character.get("class"));\r\n</pre>\r\n<p>Output:</p>\r\n<pre>rogue</pre>', 1, 18),
(195, 'void SetMotorSpeed(float speed) ', '<p>Sets the motor speed in radians per second.</p>', 1, 15),
(220, 'void clear()', '<p>Clears all attributes.</p>\r\n<pre>enmlEntity character;\r\ncharacter.add("class", "rogue");\r\ncharacter.add("level", "85");<br /><br /><strong>character.clear();</strong><br />\r\ncharacter.add("name", "Nathan");<br />\r\nprint(character.getAttributeNames());\r\n</pre>\r\n<p>Output:</p>\r\n<pre>name</pre>', 1, 18),
(196, 'void SetMaxMotorTorque(float maxTorque)', '<p>Sets the maximum motor torque, usually in N-m.</p>', 1, 15),
(219, 'uint getSeconds() ', '<p>Returns the number of elapsed seconds of the minute it was during the last time the <code>dateTime::update</code> method was called.</p>', 1, 16),
(237, 'void writeToFile(string fileName)', '<p>Writes the enml-file declaration into an ansi-encoded text file.</p>', 1, 17),
(238, 'bool parseFromFile(string fileName)', '<p>Fills the entire enml-file with enml-entities parsed from an ansi-enconded text file.</p>\r\n<pre>enmlFile f;\r\n<strong>f.parseStringFromFile(GetResourceDirectory() + "sample.enml")</strong>;\r\n\r\nprint(f.get("myCar", "name"));\r\nprint(f.get("theWall", "artist"));\r\n</pre>\r\n<p>If the parsing fails this method returns <code>false</code>.</p>', 1, 17),
(240, 'void addValue(string entityName, string attributeName, string value)', '<p>Adds an attribute to an enml-entity contained in the enml-file or changes the target value if the given attribute already exists.</p>', 1, 17),
(241, 'uint length() const', '<p>Returns a count of the number of characters in the string.</p>\r\n<div class="alert alert-info">\r\n<p>The description above has been adapted from the std::string::length page on&nbsp;<a href="http://www.cplusplus.com/">cplusplus.com</a>.</p>\r\n</div>', 1, 19),
(242, 'void resize(uint n)', '<p>Resizes the string content to <code>n</code> characters.</p>\r\n<p>If <code>n</code> is smaller than the current length of the string, the content is reduced to its first <code>n</code> characters, the rest being dropped.</p>\r\n<div class="alert alert-info">\r\n<p>The description above has been adapted from the std::string::resize page on&nbsp;<a href="http://www.cplusplus.com/">cplusplus.com</a>.</p>\r\n</div>', 1, 19),
(243, 'uint find(string sequence) const ', '<p>Searches the string for the content specified in <code>sequence</code> and returns the position of the first occurrence in the string.</p>\r\n<p>This method returns the position of the first occurrence in the string of the searched content. If the content is not found, the constant <code>NPOS</code> is returned.</p>\r\n<pre>string str = "There are two needles in this haystack with needles.";\r\nstring str2 = "needle";\r\nconst uint found = str.find(str2);\r\n\r\nif (found != NPOS)\r\n    print("first needle found at: " + found);\r\n</pre>\r\n<p>Output:</p>\r\n<pre>first needle found at: 14</pre>\r\n<div class="alert alert-info">\r\n<p>The description above has been adapted from the std::string::find page on&nbsp;<a href="http://www.cplusplus.com/">cplusplus.com</a>.</p>\r\n</div>', 1, 19),
(244, 'string substr(uint pos, uint size) const', '<p>Returns a string object with its contents initialized to a substring of the current object.</p>\r\n<p>This substring is the character sequence that starts at character position <code>pos</code> and has a length of <code>size</code> characters.</p>\r\n<p>When the <code>NPOS</code> constant is used as <code>size</code>, all the characters between <code>pos</code> and the end of the string are used as the initialization substring:</p>\r\n<pre>const string str = "quick brown fox";\r\nstring quick = <strong>str.substr(0, 5)</strong>;\r\nstring fox = <strong>str.substr(12, NPOS)</strong>;\r\n</pre>\r\n<p>If the value of <code>size</code> would make the substring to span past the end of the current string content, only those characters until the end of the string are used.</p>\r\n<div class="alert alert-info">\r\n<p>The description above has been adapted from the std::string::substr&nbsp;page on&nbsp;<a href="http://www.cplusplus.com/">cplusplus.com</a>.</p>\r\n</div>', 1, 19),
(245, 'void SetPositionX(float value)', '<p>Set a new value to the entity x coordinate.</p>', 1, 9),
(246, 'void SetPositionY(float value)', '<p>Sets a new value to the entity Y coordinate.</p>', 1, 9),
(247, 'void SetPositionZ(float value)', '<p>Sets a new value to the entity Z coordinate.</p>', 1, 9),
(248, 'float GetPositionX()', '<p>Faster access to the entity x coordinate. The same as <code>entity.GetPosition().x</code></p>', 1, 9),
(249, 'float GetPositionY()', '<p>Faster access to the entity y coordinate. The same as <code>entity.GetPosition().y</code></p>', 1, 9),
(250, 'float GetPositionZ()', '<p>Faster access to the entity z coordinate. The same as <code>entity.GetPosition().z</code></p>', 1, 9),
(252, 'void AddToPositionX(float value)', '<p>Adds&nbsp;<code>value</code> to the entity X coordinate moving it to the left or to the right.</p>\r\n<pre>// move entity 10 pixels to the right\r\n<strong>entity.AddToPositionX(10.0f);</strong></pre>', 1, 9),
(253, 'void AddToPositionY(float value)', '<p>Adds <code>value</code> to the entity Y coordinate moving it upwards or downwards.</p>\r\n<pre>// move entity 10 pixels down\r\n<strong>entity.AddToPositionY(10.0f);\r\n</strong></pre>', 1, 9),
(254, 'void AddToPositionZ(float value)', '<p>Adds <code>value</code> to the entity Z coordinate.</p>', 1, 9),
(255, 'ETHRevoluteJoint@ GetRevoluteJoint(uint jointIndex)', '<p>Retrieves a reference to the revolute joint. If the joint declared at <code>jointIndex</code> position in the entity joint list is not a revolute joint, this method will return <code>null</code>.</p>', 1, 14),
(259, 'void ResolveJoints()', '<p>Tries to resolve each Box2D joint declared in the entity, if there are any. More about this method can be found at the <a href="../manual/77">Joints</a> page in the Manual.</p>', 1, 9),
(256, 'ETHPhysicsController@ GetPhysicsController()', '<p>Returns a handle to the <a href="../../api/class/14"><code>ETHPhysicsController</code></a>&nbsp;object of this entity.</p>\r\n<p>Notice that for an entity to have a physics controller it must be set up as <code>Collidable</code> in the Entity Editor and a physics-managed body must be assigned to it there.</p>\r\n<p>This method returns <code>null</code> if this entity has no Box2D physics body.</p>', 1, 9),
(257, 'vector2(float xy)', '<p>Instantiates a <code>vector2</code> with equal values for <code>x</code> and <code>y</code>.</p>', 1, 7),
(258, 'vector3(float xyz)', '<p>Instantiates a&nbsp;<code>vector3</code>&nbsp;with equal values for&nbsp;<code>x</code>,&nbsp;<code>y</code> and <code>z</code>.</p>', 1, 8),
(260, 'void GetMotorSpeed() const', '<p>Returns the motor speed in radians per second.</p>\r\n<div class="alert alert-info">\r\n<p><strong>Compatibility warning!</strong> This method will only work from Ethanon <strong>v0.9.6</strong> and above.</p>\r\n</div>', 1, 15),
(261, 'float GetDensity() const', '<p>Returns the entity body density.</p>', 1, 14),
(262, 'void SetParticleBitmap(uint slot, string particleBitmapName)', '<p>Sets another particle bitmap to the system at the given <code>slot</code>. The particle bitmap must be in the <code>project-root/particles/</code> directory.</p>\r\n<p>Sample:</p>\r\n<pre>entity.SetParticleBitmap(0, "debris-bitmap.png");</pre>', 1, 9),
(263, 'bool GetFlipX()', '<p>Returns true if the sprite is horizontally flipped.</p>', 1, 9),
(264, 'bool GetFlipY()', '<p>Returns true if the sprite is vertically flipped.</p>', 1, 9),
(265, 'void SetFlipX(bool flip)', '<p>Set <code>true</code> in order to flip the entity''s sprite horizontally.</p>\r\n<div class="alert alert-block">\r\n<p><strong>Notice</strong> that if your entity uses rich pixel shaded lighting, flipping it will produce incorrect lighting.</p>\r\n</div>', 1, 9),
(266, 'void SetFlipY(bool flip)', '<p>Set <code>true</code> in order to flip the entity''s sprite vertically.</p>\r\n<div class="alert alert-block">\r\n<p><strong>Notice</strong> that if your entity uses rich pixel shaded lighting, flipping it will produce incorrect lighting.</p>\r\n</div>', 1, 9),
(267, 'void SetDensity(float density)', '<p>Resets entity body density.</p>', 1, 14);

-- --------------------------------------------------------

--
-- Table structure for table `ethpage`
--

CREATE TABLE IF NOT EXISTS `ethpage` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `parent_id` int(11) NOT NULL,
  `lft` int(11) NOT NULL,
  `rght` int(11) NOT NULL,
  `name` varchar(255) DEFAULT NULL,
  `description` text,
  `show_menu` int(11) NOT NULL DEFAULT '1',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=latin1 AUTO_INCREMENT=83 ;

--
-- Dumping data for table `ethpage`
--

INSERT INTO `ethpage` (`id`, `parent_id`, `lft`, `rght`, `name`, `description`, `show_menu`) VALUES
(7, 80, 5, 8, 'File Formats', '<p>Ethanon Engine file formats:</p>\r\n<table class="table table-bordered table-striped">\r\n<tbody>\r\n<tr>\r\n<td><strong>Format type</strong></td>\r\n<td><strong>Extension</strong></td>\r\n<td><strong>Encoding</strong></td>\r\n</tr>\r\n<tr>\r\n<td>Ethanon project</td>\r\n<td><code>*.ethproj</code></td>\r\n<td>ANSI</td>\r\n</tr>\r\n<tr>\r\n<td>Entities</td>\r\n<td><code>*.ent</code></td>\r\n<td>UCS-2 / UTF-16 little endian</td>\r\n</tr>\r\n<tr>\r\n<td>Scenes</td>\r\n<td><code>*.esc</code></td>\r\n<td>UCS-2&nbsp;/ UTF-16 little endian</td>\r\n</tr>\r\n<tr>\r\n<td>Particle effects</td>\r\n<td><code>*.par</code></td>\r\n<td>UCS-2&nbsp;/ UTF-16 little endian</td>\r\n</tr>\r\n<tr>\r\n<td>Script code</td>\r\n<td><code>*.angelscript</code></td>\r\n<td>UTF-8 with BOM</td>\r\n</tr>\r\n<tr>\r\n<td>ENML data</td>\r\n<td><code>*.enml</code></td>\r\n<td>ANSI</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<div class="alert alert-block"><strong>Notice</strong>&nbsp;that .angelscript files must be encoded as UTF-8 with BOM.</div>', 1),
(6, 0, 1, 10, 'About Ethanon Engine', '<p><a href="http://ethanonengine.com"><img style="float: right;" src="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/ethanon-warlock.png" alt="" width="150" height="150" />Ethanon Engine</a> is a free and cross-platform 2D game development tool focused on the recent video cards for hardware acceleration and shader effects. Any game style is allowed, from top-down view RPGs to side scrollers and shoot''em up games. The main goal is to provide high-quality lighting, shadow and particle effects with an easy to use visual interface, simple and direct scripting environment.</p>\r\n<p>Entirely based on classical 2D sprites, Ethanon Engine uses pixel shaders to perform normal map based lighting and supports many sorts of map design (e.g.: isometric, orthogonal, hexagonal) since it relies on arbitrarily positioned entities instead of fixed tiles.</p>\r\n<p>Game flow is controlled by the&nbsp;<a href="http://www.angelcode.com/angelscript/">AngelScript</a>&nbsp;language, which brings familiar Java/C#/C++ syntax to gameplay scripts.</p>\r\n<p>The engine source-code is released under the <a href="http://opensource.org/licenses/mit-license.php">MIT open source License</a>.</p>\r\n<h3>Engine goals</h3>\r\n<ul>\r\n<li><strong>Highly scriptable<br /></strong>Letting the developer code his way through game mechanics in an imperative way encourages the creation of innovative elements. The way the scripting language is bound to the core engine allows highly customizable events that couldn''t be so easily achieved in a more declarative environment.<br /><br /></li>\r\n<li><strong>Familiar language</strong><br />Good game programmers know C++ (at least we think they should). The Ethanon''s AngelScript language provides a comfortable and familiar scripting environment for intermediate C++, Java or C# developers. AngelScript packs convenient high level features such as garbage collection and polymorphism while allows lower level and imperative optimizations when necessary.<br /><br /></li>\r\n<li><strong>Keep it simple, classic and epic</strong><br />We love classical 16-bit arcade games, who doesn''t? Ethanon Engine allow us to make games like those ones we always loved, based on simple 2D sprites driven by key-frame animations, no fanciness at all (except for the lighting system, of course).</li>\r\n</ul>\r\n<div class="alert alert-info">\r\n<p><strong>Ethanon games can run on:</strong></p>\r\n<ul>\r\n<li>Windows (XP+)</li>\r\n<li>Mac OS X (10.6+)</li>\r\n<li>Android (2.1+)</li>\r\n<li>iOS (4+)</li>\r\n</ul>\r\nMore platforms coming soon!</div>\r\n<div class="alert alert-info"><strong>Ethanon tools currently run on:</strong>\r\n<ul>\r\n<li>Windows (XP+)</li>\r\n<li>Mac OS X (10.6+)<em><br /></em></li>\r\n</ul>\r\nPorts for Linux are coming in a near future.</div>\r\n<div class="alert alert-info">The current standard script editor is SciTE. Sublime plug-in is available <a href="http://ethanonengine.com/downloads/">here</a>!</div>', 1),
(8, 0, 11, 30, 'Entities', '<p>Each scene consists in a list of 2D entities, such as walls, pillars, crates, characters, space ships, enemies, candles, torches or even floor tiles or back/foreground decorative elements.</p>\r\n<p>Entities may be dynamically added to scene during gameplay through scripting (<code>AddEntity</code> function).</p>\r\n<ul class="thumbnails">\r\n<li class="span4">\r\n<div class="thumbnail"><img src="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/entity-editor.png" alt="" />\r\n<p>The Entity Editor tab</p>\r\n</div>\r\n</li>\r\n</ul>\r\n<p>Each entity may consist of:</p>\r\n<div class="well well-small">\r\n<p><img style="float: left; margin-left: 16px; margin-right: 16px; margin-top: 0px; margin-bottom: 0px;" src="../../app/webroot/img/barril.png" alt="" /><strong>Sprite (diffuse map):</strong>&nbsp;determines entity color and shape from a bitmap file. Transparent pixels are supported.<br /><br /><br /></p>\r\n</div>\r\n<div class="well well-small">\r\n<p><img style="float: left; margin-left: 16px; margin-right: 16px; margin-top: 0px; margin-bottom: 0px;" src="../../app/webroot/img/barril_nm.png" alt="" /><strong>Normal map:</strong>&nbsp;used for rich 3D lighting.&nbsp;This bitmap represents what the entity surface looks like. Entities without a normal map will look flat when lit.<br /><br /></p>\r\n</div>\r\n<div class="well well-small">\r\n<p><img style="float: left; margin-left: 16px; margin-right: 16px; margin-top: 0px; margin-bottom: 0px;" src="../../app/webroot/img/barril_gloss.png" alt="" /><strong>Gloss map:</strong>&nbsp;used for specular lighting.&nbsp;This bitmap will determine how parts of the sprite should reflect light sources. Brighter pixels increase reflection shininess.</p>\r\n</div>\r\n<div class="well well-small">\r\n<p><img style="float: left; margin-left: 16px; margin-right: 16px; margin-top: 0px; margin-bottom: 0px;" src="../../app/webroot/img/particle_a.png" alt="" /><strong>Particle system slot-A/0:</strong>&nbsp;each entity may have up to two particle systems attached to it. Both may be used at the same time for creating effects such as fire (using particle slot A) and smoke (using slot B). If the particle system on slot A is not infinite (has no limited number of repetitions) and its owner entity has a light source, the light source brightness will decrease accordingly to how many particles are still alive.</p>\r\n</div>\r\n<div class="well well-small">\r\n<p><img style="float: left; margin-left: 16px; margin-right: 16px; margin-top: 0px; margin-bottom: 0px;" src="../../app/webroot/img/particle_b.png" alt="" /><strong>Particle system slot-B/1:</strong>&nbsp;Second particle source.<br /><br /><br /><br /></p>\r\n</div>\r\n<div class="well well-small">\r\n<p><strong>Light source:</strong>&nbsp;entities may cast a point light. Lights have individual customization properties such as color and range.</p>\r\n</div>\r\n<div class="well well-small">\r\n<p><strong>Light halo bitmap:</strong>&nbsp;if the entity has its own light source, it may have a bitmap to be rendered as a light halo (optional).</p>\r\n</div>\r\n<div class="well well-small">\r\n<p><strong>Physics-simulated body:</strong> a Box2D body can be assigned to entity in order to enable simulation. The collision shape may be a <em>box</em>, <em>circle</em>, a <em>polygon</em> or a <em>compound shape</em>. <a href="../../manual/72">More about physics on Ethanon Engine</a>.</p>\r\n</div>\r\n<p>Combinations of the elements listed above may create various sorts of entities:</p>\r\n<table style="width: 90%;">\r\n<tbody>\r\n<tr>\r\n<td><img src="../../app/webroot/img/fire.png" alt="" /></td>\r\n<td><img src="../../app/webroot/img/pilar.png" alt="" /></td>\r\n</tr>\r\n<tr>\r\n<td>\r\n<p>Entity content:</p>\r\n<ul>\r\n<li>Bitmap</li>\r\n<li>normal map</li>\r\n<li>Particle system A (the fire)</li>\r\n<li>Particle system B (the smoke)</li>\r\n<li>Light source</li>\r\n<li>Halo</li>\r\n</ul>\r\n</td>\r\n<td>\r\n<p>Entity content:</p>\r\n<ul>\r\n<li>Bitmap</li>\r\n<li>normal map</li>\r\n</ul>\r\n</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>Entities are stored in *.ent files.</p>\r\n<div class="alert alert-block">\r\n<p><strong>Warning!</strong> Shadows are not available on OpenGL ES 2.0 implementations (Android and iOS)</p>\r\n</div>\r\n<p>Once added into the scene, every single entity is assigned an identification number (ID number). Many entities in a scene will probably share several properties in common, e.g.: the same original file name, the same sprite file, etc. but never the same ID number.</p>\r\n<p>Examples of entity usage in script:</p>\r\n<pre>// add zombie to scene\r\nAddEntity("zombie.ent", vector3(posX, posY, posZ), angle);\r\n\r\n// add a character to scene, retrieve a handle and move him\r\nETHEntity@ heroHandle;\r\nAddEntity("hero.ent", heroPos, @heroHandle);\r\nheroHandle.AddToPosition(movementVector);\r\n</pre>', 1),
(9, 0, 31, 30, 'Ethanon Editor', '<p>The Ethanon Editor allows developers to visually compose, configure and edit entities and particle systems that are attached to entities. Also create entire scenes and see how they are going to look like in real-time.</p>\r\n<p>The Editor is divided into three main tools: <span style="text-decoration: underline;">ParticleFX Editor</span>, <span style="text-decoration: underline;">Entity Editor</span> and <span style="text-decoration: underline;">Scene Editor</span>.</p>\r\n<h4>Input fields</h4>\r\n<p>Editor tools have numerical input fields that allow using the mouse scroll wheel&nbsp;to gradually increase or decrease their values by scrolling up or down.</p>\r\n<p>The screenshot below shows three numerical input fields. The one in the middle is selected:</p>\r\n<p><img src="../../app/webroot/img/numerical_input.png" alt="" width="200" height="42" /></p>\r\n<p>Using the mouse wheel is recommended for editing whenever possible since it allows the user to gradually see the effects of the change.</p>', 1),
(11, 9, 24, 25, 'ParticleFX Editor', '<p>Particle effect editor generates *.par files that may be loaded by the Entity Editor to attach particle systems to entities.</p>\r\n<p><strong>File Menu:</strong></p>\r\n<p><img src="../../app/webroot/img/particlefx_menu.png" alt="" width="191" height="152" /></p>\r\n<ul>\r\n<li><strong>Save</strong>: saves the current particle system into a .PAR file.</li>\r\n<li><strong>Save as...</strong>:saves the current particle system as...</li>\r\n<li><strong>Open</strong>: opens a .PAR file.</li>\r\n<li><strong>Load bitmap</strong>: loads a different bitmap file to the particle system.</li>\r\n<li><strong>Load sound fx</strong>: assigns a sound effect to the particle system.</li>\r\n<li><strong>Unload sound fx</strong>: removes the sound effect from the particle system.</li>\r\n<li><strong>Load background</strong>: loads and shows a background image.</li>\r\n<li><strong>Go to project manager</strong>: sends the user back to the project manager where another project can be created or a new one can be started.</li>\r\n</ul>\r\n<p><strong>Edition</strong>:</p>\r\n<p><img src="../../app/webroot/img/particlefx.png" alt="" width="476" height="667" /></p>\r\n<ul>\r\n<li><strong>Particles</strong>: maximum number of active particles.</li>\r\n<li><strong>Repeats</strong>: number&nbsp;of particle life-cycles&nbsp;repetitions before stopping. 0 means it will loop forever.</li>\r\n<li><strong>Grav X</strong>: gravity vector along the X-axis.</li>\r\n<li><strong>Grav Y</strong>: gravity vector along the Y-axis.</li>\r\n<li><strong>Dir X</strong>: particle direction along the X-axis.</li>\r\n<li><strong>Dir Y</strong>: particle direction along the Y-axis.</li>\r\n<li><strong>R Dir X</strong>: randomization value for the particle direction along the X-axis.</li>\r\n<li><strong>R Dir Y</strong>: randomization value for the particle direction along the Y-axis.</li>\r\n<li><strong>Bounding</strong>: a bounding sphere radius which the engine will use to perform bounding sphere visibility test.</li>\r\n<li><strong>All at once</strong>: 0 if all to particles should be released instantly as the system execution starts or 1 if they should be released one-by-one (smother).</li>\r\n<li><strong>Start X</strong>: particles start position along the X-axis.</li>\r\n<li><strong>Start Y</strong>: particles start position along the Y-axis.</li>\r\n<li><strong>R Start X</strong>: randomization value for the particles start position along the X-axis.</li>\r\n<li><strong>R Start Y</strong>: randomization value for the particles start position along the Y-axis.</li>\r\n<li><strong>Color0.A/R/G/B</strong>: starting transparency and RGB color values of every particle.</li>\r\n<li><strong>Color1.A/R/G/B</strong>: ending transparency and RGB color values of every particle. Every particle will have its color gradually blended from Color0 to Color1 during its life-cycle.</li>\r\n<li><strong>Size</strong>: particle starting size (radius).</li>\r\n<li><strong>Size+</strong>: particle growing value. Negative values will reduce particle size.</li>\r\n<li><strong>R Size</strong>: randomizer for the particle starting radius.</li>\r\n<li><strong>Time</strong>: the particle cycle lifetime (in milliseconds).</li>\r\n<li><strong>R Time</strong>: lifetime randomizer (in milliseconds).</li>\r\n<li><strong>S Angle</strong>: particle starting angle (in degrees).</li>\r\n<li><strong>Angle Dir</strong>: particle rotating direction. Switch between positive and negative values for clockwise or counter-clockwise direction.</li>\r\n<li><strong>R Angle Dir</strong>: particle rotation randomizer.</li>\r\n<li><strong>R Angle St</strong>: particle start angle randomizer (in degrees).</li>\r\n<li><strong>Min Size</strong>: particle minimum size.</li>\r\n<li><strong>Max Size</strong>: particle maximum size.</li>\r\n<li><strong>Emissive.R/G/B</strong>: emissive (self-illumination) color for particles.</li>\r\n</ul>\r\n<p><strong>Alpha mode/Animation options</strong>:</p>\r\n<p><img src="../../app/webroot/img/particle_alpha.png" alt="" width="200" height="140" /></p>\r\n<p><strong>Alpha mode</strong>:</p>\r\n<ul>\r\n<li><strong>Pixel</strong>: per-pixel alpha channel value (color interpolation based on each pixel''s alpha value).</li>\r\n<li><strong>Additive</strong>: additive pixel color combination, good for bright effects such as fire and flare.</li>\r\n<li><strong>Modulate</strong>: multiply pixel color combination, good for dark particle effects such as black smoke.</li>\r\n</ul>\r\n<p><strong>Sprite cut</strong>:</p>\r\n<ul>\r\n<li><strong>Sprite columns</strong>: number of sprite keyframe columns.</li>\r\n<li><strong>Sprite rows</strong>: sprite keyframe animation rows.</li>\r\n</ul>\r\n<p>If either <em>columns</em> or <em>rows</em> is greater than 1, the sprite bitmap will be animated and the following options will show up:</p>\r\n<ul>\r\n<li><strong>Animate</strong>: animate sprite frames through the particle''s life time from frame 0 to <em>rows * columns</em>.</li>\r\n<li><strong>Pick random frame</strong>: every time a new particle is released, a random frame will be assigned to it.</li>\r\n</ul>', 1),
(12, 8, 12, 13, 'Entity types', '<p>Each entity has a type that tells the engine how it should&nbsp;be rendered and&nbsp;behave. There are three basic entity types: <span style="text-decoration: underline;">vertical</span>, <span style="text-decoration: underline;">horizontal</span>, and <span style="text-decoration: underline;">layerable</span>:</p>\r\n<ul class="thumbnails">\r\n<li class="span4">\r\n<div class="thumbnail"><img src="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/entity-types.png" alt="" />\r\n<p>Entity type options in the editor</p>\r\n</div>\r\n</li>\r\n</ul>\r\n<div class="well well-small">\r\n<p><strong>Horizontal entities<br /></strong>The most common type of entity. Should be used on all elements on side scrolling games.<br />Should also be assigned to floor tiles on top-down view games. It is important to set every ground entity as horizontal because from a top-down perspective they will always lay on the "bottom layer" and parallel to the horizon.</p>\r\n</div>\r\n<div class="well well-small">\r\n<p><strong>Vertical</strong><strong>&nbsp;entities</strong><strong><br /></strong>Entities that visually* have three-dimensions on top-down view games. Examples of vertical entities: crates, pillars, walls, barrels, characters, fire, smoke, trees, bushes...<br />*technically, vertical entities will never be true three-dimensional objects since Ethanon Engine is based on 2D sprites, but they may represent entities in a three-dimensional space.</p>\r\n</div>\r\n<div class="well well-small">\r\n<p><strong>Layerable</strong><strong>&nbsp;entities</strong><strong><br /></strong>Are drawn and ordered by their own user-defined depth value disregarding their in-scene z-position. Depth values may range between <code>0.0f</code> (furthest) and <code>1.0f</code> (closest).</p>\r\n</div>\r\n<p>All entities may be rotated except vertical entities.</p>\r\n<p>Entities are rendered from back to front. They are ascendantely&nbsp;sorted by z-position value or depth value in case of layerable entities.</p>\r\n<ul class="thumbnails">\r\n<li class="span4">\r\n<div class="thumbnail"><img src="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/chrono_trigger.png" alt="" />\r\n<p>Classic RPG-like Top-down view games should use horizontal entities for ground tiles and vertical entities for characters, walls, pilars, chests, etc.</p>\r\n</div>\r\n</li>\r\n<li class="span4">\r\n<div class="thumbnail"><img src="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/super_mario_world.png" alt="" />\r\n<p>Side scrolling games can use only horizontal entities and a z-axis direction of <code>(0,0)</code> is recommended. Z position may then be used to sort entity layers.</p>\r\n</div>\r\n</li>\r\n</ul>', 1),
(13, 8, 18, 19, 'Temporary entities', '<p>Entities with finite particle systems and no Sprite bitmap are considered as temporary by the engine. It means that they will be automatically deleted as soon as all particle systems attached to the entity are finished.</p>\r\n<p>Finite particle systems are defined by limited number of particle life-cycle repetitions. When the particle system''s repeat count is zero, the particle cycles will stop as the owner entity is deleted.</p>', 1),
(14, 9, 22, 23, 'Entity Editor', '<p>This is where all entity components are set up. Including sprite bitmap assignment, normals, light, particle effects and even controls how the illumination is going to affect the surface as well as its shadow appearance.</p>\r\n<p><strong>File Menu</strong>:</p>\r\n<p><img src="../../app/webroot/img/entity_editor_file_menu.png" alt="" width="200" height="101" /></p>\r\n<ul>\r\n<li><strong>New</strong>: resets all entity options and clears all slots to start a new entity from the ground up.</li>\r\n<li><strong>Open</strong>: opens an .ENT file.</li>\r\n<li><strong>Save</strong>: saves the current .ENT file.</li>\r\n<li><strong>Save as...</strong>: saves the current .ENT file as...</li>\r\n<li><strong>Go to project manager</strong>: sends the user back to the project manager.</li>\r\n</ul>\r\n<p><strong>Add resources menu</strong>:</p>\r\n<p><img src="../../app/webroot/img/entity_editor_addresources_menu.png" alt="" width="200" height="118" /></p>\r\n<ul>\r\n<li><strong>Add entity bitmap</strong>: assigns a sprite to the entity.</li>\r\n<li><strong>Add normal map</strong>:&nbsp;assigns&nbsp;a normal map to the entity.</li>\r\n<li><strong>Add halo bitmap</strong>:&nbsp;assigns&nbsp;a halo bitmap. It will be visible only if the entity has a light source.</li>\r\n<li><strong>Add gloss bitmap</strong>:&nbsp;assigns&nbsp;a gloss bitmap to the entity. It will enable specular reflections on the entity surface.</li>\r\n<li><strong>Add particle slot A</strong>:&nbsp;assigns&nbsp;a particle system to the first particle slot.</li>\r\n<li><strong>Add particle slot B</strong>:&nbsp;assigns&nbsp;a particle system to the second particle slot.</li>\r\n</ul>\r\n<p><strong>Remove... menu</strong>:</p>\r\n<p><img src="../../app/webroot/img/entity_editor_remove_menu.png" alt="" width="200" height="118" /></p>\r\n<ul>\r\n<li><strong>Entity bitmap</strong>: removes the sprite if there is any.</li>\r\n<li><strong>Normal map</strong>: removes the normal map if there is any.</li>\r\n<li><strong>Halo</strong>: removes the halo bitmap if there is any.</li>\r\n<li><strong>Gloss map</strong>: removes the gloss bitmap. It will disable specular reflections.</li>\r\n<li><strong>Particle slot A</strong>: removes the particle system from the first slot if there is any.</li>\r\n<li><strong>Particle slot B</strong>: removes the particle system from the second slot if there is any.</li>\r\n</ul>\r\n<p><strong>Origin</strong>:</p>\r\n<p><img src="../../app/webroot/img/entity_editor_origin.png" alt="" width="256" height="256" /></p>\r\n<p>The crossed circle indicates the entity''s origin spot.</p>\r\n<p><strong>Left panel</strong>:</p>\r\n<p><img src="../../app/webroot/img/entity_editor_left.png" alt="" width="200" height="594" /></p>\r\n<ul>\r\n<li><strong>Entity type</strong>: click the name to change the type of entity: Horizontal, Vertical or Layerable.</li>\r\n<li><strong>Pivot x/y</strong>: specify a value for pivot adjustment. Pivot adjustment is useful to align the symbolic bottom of vertical entities to entity origin.</li>\r\n<li><strong>Sprite columns</strong>: number of columns into which the sprite will be cut.</li>\r\n<li><strong>Sprite rows</strong>: number of rows into which the sprite will be cut.</li>\r\n<li><strong><strong>Emissive.r/g/b</strong></strong>: emissive (self-illumination) color for the entity.</li>\r\n</ul>\r\n<p><strong>Boolean properties</strong>:</p>\r\n<p>Boolean properties are true when its button is highlighted:</p>\r\n<ul>\r\n<li><strong>Cast shadow</strong>: true if this entity should cast shadows.</li>\r\n<li><strong>Static entity</strong>: true if it is a static entity and false if it should be dynamic.</li>\r\n<li><strong>Collidable</strong>: true if it is a collidable entity. If it is false, the collision system will skip the entity during the tests.</li>\r\n<li><strong>(TO-DO):</strong> describe physics engine attributes</li>\r\n<li><strong>Apply light</strong>: true if the entity should be lit.</li>\r\n<li><strong>Cast light</strong>: true if the entity will have its own light source.</li>\r\n</ul>\r\n<p><strong>Shadow properties</strong>:</p>\r\n<p>The following fields will show up if the Boolean value "Cast shadow" is true (highlighted).</p>\r\n<ul>\r\n<li><strong>Scale</strong>: shadow width scale.</li>\r\n<li><strong>Opacity</strong>: transparency level for the dynamic shadows.</li>\r\n<li><strong>Shadow length:</strong> projected length scale</li>\r\n</ul>\r\n<p><strong>Light properties</strong>:</p>\r\n<p>These fields will show up if the Boolean value "Cast light" is true (highlighted).</p>\r\n<ul>\r\n<li><strong>Light.pos.x/y/z</strong>: light relative position.</li>\r\n<li><strong>Range</strong>: light range radius (in pixels).</li>\r\n<li><strong>Light.R/G/B</strong>: red, green and blue color components where 0.0 equals 0x00 and 1.0 equals 0xFF for each channel.</li>\r\n<li><strong>Specular</strong>: light specular brightness.</li>\r\n</ul>\r\n<p>The fields below will show up if the entity has a light halo bitmap:</p>\r\n<ul>\r\n<li><strong>Halo alpha</strong>: halo brightness.</li>\r\n<li><strong>Halo size</strong>: halo radius size (in pixels).</li>\r\n</ul>\r\n<p>The fields below will show up if the entity has active particle systems:</p>\r\n<ul>\r\n<li><strong>Attach light to particles</strong>: select a particle slot to lock the light source position to the particle system origin.</li>\r\n</ul>\r\n<p><strong>Right panel</strong>:</p>\r\n<p><img src="../../app/webroot/img/entity_editor_right_menu.png" alt="" width="200" height="588" /></p>\r\n<ul>\r\n<li><strong>Edit lights</strong>: allows light source editing when active.</li>\r\n<li><strong>Edit particles</strong>: allows particle position editing when active.</li>\r\n<li><strong>Edit collision</strong>: shows the collision box when active.</li>\r\n</ul>\r\n<p><strong>Lighting mode</strong>:</p>\r\n<ul>\r\n<li><strong>Pixel shaded</strong>: use per-pixel lighting.</li>\r\n<li><strong>Vertex shaded</strong>: user per-vertex lighting.</li>\r\n</ul>\r\n<p><strong>Blend mode</strong>:</p>\r\n<ul>\r\n<li><strong>Default</strong>: sprite bitmap alpha channel controls transparency levels.</li>\r\n<li><strong>Additive</strong>: sprite color will be added to the background color (make colors&nbsp;brighter).</li>\r\n<li><strong>Modulate</strong>: sprite color will be multiplied by the background color (make colors darker).</li>\r\n</ul>\r\n<p><strong>Particle start position</strong>:</p>\r\n<p>Particle system starting points.</p>\r\n<p>The following fields will show up while in "Edit collision" mode:</p>\r\n<ul>\r\n<li><strong>Box.pos.x/y/z</strong>: relative collision box position.</li>\r\n<li><strong>Box.size.x/y/z</strong>: collision box width, height and depth.</li>\r\n</ul>\r\n<p><strong>Other options</strong></p>\r\n<ul>\r\n<li><strong>Sound volume</strong>: adjusts entity general sound volume. 0 for complete silence and 1 for full volume.</li>\r\n<li><strong>Layer depth</strong>: if the entity type is layerable, this value defines the entity depth. 0 for furthest and 1 for closest.</li>\r\n<li><strong>Spec. power</strong>: specular component power. Higher values will make the reflection brighter. This field will only show up if the entity has a gloss map.</li>\r\n</ul>\r\n<p><strong>Custom data</strong>:</p>\r\n<ul>\r\n<li><strong>+ New variable</strong>: adds a new variable. Custom variables may be used in the scripting side.</li>\r\n</ul>\r\n<p><strong>Particle scale</strong>:</p>\r\n<p>Quickly scale the particles.</p>', 1),
(15, 8, 20, 21, 'Lights and entities', '<p>There are two types of lighting in a scene:</p>\r\n<div class="well well-small">\r\n<p><strong>Entity lights</strong></p>\r\n<ul>\r\n<li>Lights attached to&nbsp;in-scene&nbsp;entities.</li>\r\n<li>Useful to represent torches, candles, fire, lamps, etc.</li>\r\n<li>May as well belong to invisible entities (entities without sprite)</li>\r\n<li>An entity light is always attached to the parent entity, being translated and rotated with it</li>\r\n<li>Entity lights are labelled as static or dynamic depending on their parent entity configuration.</li>\r\n</ul>\r\n</div>\r\n<div class="well well-small">\r\n<p><strong>Odd lights</strong><strong><br /></strong></p>\r\n<ul>\r\n<li>Lights without parent entity.</li>\r\n<li>Can only be placed in the scene through scripting (with the <code>AddLight</code> function).</li>\r\n<li>Odd lights are immediately erased after being rendered.</li>\r\n<li>To keep odd lights in scene it must be added at every rendering frame.</li>\r\n<li>Odd lights are always treated as dynamic lights.</li>\r\n</ul>\r\n</div>', 1),
(18, 9, 28, 29, 'Scene Editor', '<p>Once the entities (*.ent files) are ready, the Scene Editor is used to compose complex scenes.</p>\r\n<p>Features:</p>\r\n<ul>\r\n<li>Use the entity selection bar on the bottom of the screen or roll the mouse wheel to <span style="text-decoration: underline;">browse</span>&nbsp;existing entities</li>\r\n<li>Left-click anywhere to <span style="text-decoration: underline;">place</span> the entity where the cursor is</li>\r\n<li>Right-click anywhere to switch to entity <span style="text-decoration: underline;">selection mode</span></li>\r\n<li>Once in selection mode, left-click any entity in scene to <span style="text-decoration: underline;">select</span> it</li>\r\n<li>Drag and drop any selected entity to <span style="text-decoration: underline;">move</span> it</li>\r\n<li>Press Delete to <span style="text-decoration: underline;">remove</span> the selected entity from scene</li>\r\n<li>While in the entity placing mode, Hold SHIFT to <span style="text-decoration: underline;">align</span>&nbsp;it&nbsp;as a tile map</li>\r\n<li>Press ''F'' to <span style="text-decoration: underline;">c</span><span style="text-decoration: underline;">hange the starting frame</span> from the selected entity (if it has animation)</li>\r\n<li>Hit ''Q'' and ''W'' keys to rotate entities before placing them.</li>\r\n</ul>\r\n<p><strong>File Menu</strong>:</p>\r\n<p><img src="../../app/webroot/img/scene_editor_file_menu.png" alt="" width="200" height="101" /></p>\r\n<ul>\r\n<li><strong>New</strong>: clear scene and starts a new one.</li>\r\n<li><strong>Open</strong>: open a scene.</li>\r\n<li><strong>Save</strong>:&nbsp;saves scene.</li>\r\n<li><strong>Save as...</strong>: save scene as...</li>\r\n<li><strong>Go to project manager</strong>: sends the user back to the project manager.</li>\r\n</ul>\r\n<p><strong>Right panel</strong>:</p>\r\n<p><img src="../../app/webroot/img/scene_editor_right_panel.png" alt="" width="200" height="328" /></p>\r\n<p><strong>Lighting mode</strong>:</p>\r\n<ul>\r\n<li><strong>Pixel shaded</strong>: enables per-pixel lighting (if supported).</li>\r\n<li><strong>Vertex shaded</strong>: enables per-vertex lighting.</li>\r\n</ul>\r\n<p><strong>Tools</strong></p>\r\n<ul>\r\n<li><strong>Place entity</strong>: activates the entity browsing and placing mode.</li>\r\n<li><strong>Select entity</strong>: activates the entity selection mode.</li>\r\n<li><strong>Ambient R/G/B</strong>: ambient light color.</li>\r\n<li><strong>Light intensity</strong>: multiply the intensity of every light source in scene.</li>\r\n<li><strong>Parallax</strong>: parallax effect intensity in scene. Parallax enhances 2D sprites depth feel according to entity''s z-position.</li>\r\n<li><strong>Z-axis dir x/y</strong>: vector that represents the direction of the z-axis. The default vector is <code>vector2(0,-1)</code>. These fields will be visible only if the "Show advanced options" field is active.</li>\r\n<li><strong>Update lightmaps</strong>: recalculates all lightmaps for static entities.</li>\r\n<li><strong>Update entities</strong>: updates all entities according to the last changes made to the original .ent files. Entities in scene whose original names were changed won''t be automatically updated.</li>\r\n<li><strong>Toggle static/dynamic</strong>: toggles the state of the selected entity between static and dynamic.</li>\r\n<li><strong>Lock static entities</strong>: locks every static entity while in "Select entity" mode. Check this option to prevent static entities from being accidentally moved.</li>\r\n<li><strong>Use static lightmaps</strong>: enables or disables pre-rendered static lightmaps.</li>\r\n<li><strong>Show custom data</strong>: when active, shows all custom data stored in the entities.</li>\r\n</ul>\r\n<p><strong>"Select entity" mode</strong>:</p>\r\n<p><img src="../../app/webroot/img/scene_editor_selection_mode.png" alt="" width="338" height="274" /></p>\r\n<p>While in selection mode, the entity ID will appear at the upper left corner of selected and highlighted entities.</p>\r\n<p><strong>"Place entity" mode</strong>:</p>\r\n<p><img src="../../app/webroot/img/scene_editor_placing_mode.png" alt="" width="196" height="196" /></p>\r\n<ul>\r\n<li><strong>A</strong>: indicates that the entity has sound effects.</li>\r\n<li><strong>B</strong>: indicates that there''s a light here.</li>\r\n<li><strong>C</strong>: indicates that there are particles here.</li>\r\n</ul>\r\n<p>While browsing entities in the "Place entity" mode, symbols <img src="../../app/webroot/img/l.png" alt="" width="16" height="16" />&nbsp;and <img src="../../app/webroot/img/p.png" alt="" width="16" height="16" />&nbsp;mean that there''s either a light source or a particle system attached to the entity.</p>', 1),
(19, 8, 16, 17, 'Entity space and coordinates', '<p>Although this is a 2D game engine, entities use three-dimensional positioning system. The world-space coordinates on Ethanon Engine are similar to regular 2D screen projection.</p>\r\n<p>Scene origin is at the upper left corner of the screen, the X-axis points to the right and the Y-axis points downwards. There is also a Z-axis that points upwards by default, it produces an impression that the entity is floating because of viewer''s perspective.</p>\r\n<p><img src="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/ethanon-canvas.png" alt="" /></p>\r\n<p>Every vertical entity must have its origin at the center that symbolically represents its bottom side, as shown below:</p>\r\n<p><img src="../../app/webroot/img/origin.png" alt="" /></p>\r\n<p>The origin of an entity may be manually and visually adjusted in the Entity Editor in case it doesn''t initially match the right spot (Pivot adjust).</p>\r\n<ul class="thumbnails">\r\n<li class="span4">\r\n<div class="thumbnail"><img src="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/pivot-adjust.png" alt="" />\r\n<p><span style="text-decoration: underline;">Pivot</span> adjust properties may be used to fix entity origin according to the source sprite.</p>\r\n</div>\r\n</li>\r\n</ul>\r\n<p>For a regular top-view game style, horizontal entities (the floor/ground) will lay on the XY-plane and only "floating" entities should have their Z position greater than 0. The screenshots below show two entities with different Z values:</p>\r\n<p><img src="../../app/webroot/img/ztest0.png" alt="" /><img src="../../app/webroot/img/ztest1.png" alt="" /></p>\r\n<p>Z-axis direction is set to <code>vector2(0,-1)</code> by default, which means that entities with positive z-position move upwards, as images above illustrate, but z-direction can be edited in the Scene Editor''s "Advanced properties".</p>\r\n<ul class="thumbnails">\r\n<li class="span4">\r\n<div class="thumbnail"><img src="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/adv-props-zaxis-dir.png" alt="" />\r\n<p>Select <span style="text-decoration: underline;">Show advanced options</span> in the <span style="text-decoration: underline;">Scene Editor</span> in order to customize the <span style="text-decoration: underline;">Z-axis dir</span>ection of the scene.</p>\r\n</div>\r\n</li>\r\n</ul>\r\n<p>Side-scrollers like Super Mario or most space shooters would rather have <code>vector2(0,0)</code> as z-direction.</p>', 1),
(17, 8, 14, 15, 'Entity states: static and dynamic', '<p>Entities can be either static or dynamic.</p>\r\n<p><span style="text-decoration: underline;">Static</span> entities are faster to render and to process than the&nbsp;<span style="text-decoration: underline;">dynamic</span>:</p>\r\n<ul>\r\n<li><strong>Dynamic entities:</strong>&nbsp;lighting and shadowing is performed in real-time. Which means that for every light (dynamic or static lights) around dynamic entities, lighting shaders will be executed to compute how these lights affect the entity. Once it is declared as dynamic, we never know when they''ll move therefore we can''t pre-calculate lighting.</li>\r\n<li><strong>Static entities:</strong> instead of computing every nearby light source, static entities will have all static lights pre-rendered to a lightmap. Combining static entities and static light sources make lighting effects very cheap for the GPU.</li>\r\n</ul>\r\n<p>Entity callback functions also behave differently on static and dynamic entities:</p>\r\n<ul>\r\n<li><strong>Dynamic entity callbacks:</strong>&nbsp;functions are called once every frame for each dynamic entity. It doesn''t matter if it is being rendered or not.</li>\r\n<li><strong>Static&nbsp;entity callbacks:</strong>&nbsp;callback for static entities are only called if the entity is visible (if its parent visibility bucket is active).</li>\r\n</ul>\r\n<p>Notice that dynamic lights will shade static entities dynamically. Remember that "free lights" only happen if static entities are lit by static lights (lights with static parent entity).</p>\r\n<p>Entity state may be enabled in the Entity Editor.</p>\r\n<ul class="thumbnails">\r\n<li class="span4">\r\n<div class="thumbnail"><img src="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/static-entity-toggle.png" alt="" />\r\n<p>Highlight the <span style="text-decoration: underline;">Static entity</span> toggle button in order to make it static. Disabling it will turn the entity dynamic.</p>\r\n</div>\r\n</li>\r\n</ul>', 1),
(21, 80, 3, 4, 'Project directories and hierarchy', '<p>All game resources must be placed in their correct directory. The engine will not search for media files placed randomly. Files must be stored as shown below:</p>\r\n<table class="table table-bordered table-striped" style="width: 80%;">\r\n<tbody>\r\n<tr>\r\n<td><strong>Element</strong></td>\r\n<td><strong>Directory</strong></td>\r\n</tr>\r\n<tr>\r\n<td>Entity sprites</td>\r\n<td><code>&lt;my-project&gt;/entities/</code></td>\r\n</tr>\r\n<tr>\r\n<td>Entity sprite normalmaps</td>\r\n<td><code>&lt;my-project&gt;/entities/normalmaps/</code></td>\r\n</tr>\r\n<tr>\r\n<td>Particle bitmaps</td>\r\n<td><code>&lt;my-project&gt;/particles/</code></td>\r\n</tr>\r\n<tr>\r\n<td>Sound Effects</td>\r\n<td><code>&lt;my-project&gt;/soundfx/</code></td>\r\n</tr>\r\n<tr>\r\n<td>*.par files</td>\r\n<td><code>&lt;my-project&gt;/effects/</code></td>\r\n</tr>\r\n<tr>\r\n<td>*.esc files</td>\r\n<td><code>&lt;my-project&gt;/scenes/</code></td>\r\n</tr>\r\n<tr>\r\n<td>*.ent files</td>\r\n<td><code>&lt;my-project&gt;/entities/</code></td>\r\n</tr>\r\n<tr>\r\n<td>&lt;my-project&gt;.ethproj</td>\r\n<td><code>&lt;my-project&gt;/</code></td>\r\n</tr>\r\n<tr>\r\n<td>main.angelscript</td>\r\n<td><code>&lt;my_project&gt;/</code></td>\r\n</tr>\r\n<tr>\r\n<td>app.enml</td>\r\n<td><code>&lt;my_project&gt;/</code></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>As a new project is created (<code>File</code> &gt; <code>New project</code> in the projects tab), Ethanon Editor creates all directories and copies all necessary files automatically into it.</p>', 1),
(22, 0, 31, 60, 'Scripting', '<p>All entities, particles and scenes are created and edited in the Ethanon Editors, however programming is necessary to make the game work. For game development, programming tools are essential.</p>\r\n<p>Scripting is required for moving and animating a character, controlling monsters and NPCs, sending players to the next level, saving and loading games and everything else. For that purpose, EE uses the AngelScript language:</p>\r\n<p style="padding-left: 30px;"><em>The AngelCode Scripting Library, or AngelScript as it is also known, is an extremely flexible cross-platform scripting library designed to allow applications to extend their functionality through external scripts. It has been designed from the beginning to be an easy to use component, both for the application programmer and the script writer.</em></p>\r\n<p style="padding-left: 30px;"><em>For the script writer the scripting language follows the widely known syntax of C/C++, but without the need to worry about pointers and memory leaks. Contrary to most scripting languages, AngelScript uses the common C/C++ datatypes for more efficient communication with the host application.</em></p>\r\n<div class="alert alert-info">\r\n<p><strong>Heads up!</strong></p>\r\n<p>This section of the manual assumes that the reader is already familiar to C, C++, Java or C# (intermediate C++ experience is recommended). It introduces the reader to the scripting language features, showing the main differences between AngelScript and other known languages, and how the engine reads and executes scripts.</p>\r\n</div>\r\n<div class="alert alert-block">\r\n<p><strong>Warning</strong></p>\r\n<p>From this point, it is recommended that users who have never used AngelScript before take a look at its manual: <a href="http://www.angelcode.com/angelscript/sdk/docs/manual/doc_script.html" target="_blank">http://www.angelcode.com/angelscript/sdk/docs/manual/doc_script.html</a>.</p>\r\n</div>', 1),
(23, 22, 32, 33, 'Quick introduction to AngelScript', '<p>Here is a list of syntactic differences between AngelScript and other similar languages, such as C++.</p>\r\n<h4>Primitive data types</h4>\r\n<p>Primitives in AngelScript have direct matches in C++:</p>\r\n<table class="table table-bordered table-striped table-condensed" style="width: 50%;">\r\n<tbody>\r\n<tr>\r\n<td><strong>Name</strong></td>\r\n<td><strong>Size (bits)</strong></td>\r\n</tr>\r\n<tr>\r\n<td><code>bool</code></td>\r\n<td>8</td>\r\n</tr>\r\n<tr>\r\n<td><code>double</code></td>\r\n<td>64</td>\r\n</tr>\r\n<tr>\r\n<td><code>float</code></td>\r\n<td>32</td>\r\n</tr>\r\n<tr>\r\n<td><code>int8</code></td>\r\n<td>8</td>\r\n</tr>\r\n<tr>\r\n<td><code>int16</code></td>\r\n<td>16</td>\r\n</tr>\r\n<tr>\r\n<td><code>int</code></td>\r\n<td>32</td>\r\n</tr>\r\n<tr>\r\n<td><code>int64</code></td>\r\n<td>64</td>\r\n</tr>\r\n<tr>\r\n<td><code>uint8</code></td>\r\n<td>8</td>\r\n</tr>\r\n<tr>\r\n<td><code>uint16</code></td>\r\n<td>16</td>\r\n</tr>\r\n<tr>\r\n<td><code>uint</code></td>\r\n<td>32</td>\r\n</tr>\r\n<tr>\r\n<td><code>uint64</code></td>\r\n<td>64</td>\r\n</tr>\r\n<tr>\r\n<td><code>void</code></td>\r\n<td>0</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h4>Object references</h4>\r\n<p>AngelScript has no C-like pointers, however, its object-handles behavior is similar to Java and C# references:</p>\r\n<ul>\r\n<li>Use&nbsp;<code>is</code>&nbsp;(equal) or&nbsp;<code>!is</code>&nbsp;(not equal) as equality operators.</li>\r\n<li>The operator&nbsp;<code>@</code>&nbsp;marks object handles:</li>\r\n</ul>\r\n<pre>MyObject @obj = null;\r\nMyObject @obj2 = GetMyObjectHandle();\r\n@obj = @obj2;\r\nif (obj is null)\r\n{\r\n    // ...\r\n}\r\nelse if (obj2 !is null)\r\n{\r\n    // ...\r\n}</pre>\r\n<h4>Arrays</h4>\r\n<p>Declare arrays by appending&nbsp;<code>[]</code>&nbsp;brackets to the type name. When declaring a variable with a type modifier, the type modifier affects the type of all variables in the list. Example:</p>\r\n<pre>int[] a, b, c;</pre>\r\n<p><code>a</code>,&nbsp;<code>b</code>, and&nbsp;<code>c</code>&nbsp;are now arrays of integers.</p>\r\n<p>When declaring arrays it is possible to define the initial size of the array by passing the length as a parameter to the constructor. The elements can also be individually initialized by specifying an initialization list. Example:</p>\r\n<pre>int[] a;    // A zero-length array of integers\r\nint[] b(3); // An array of integers with 3 elements\r\nint[] c = {,3,4,}; // An array of integers with 4 elements, where\r\n                   // the second and third elements are initialized</pre>\r\n<p>Each element in the array is accessed with the indexing operator. The indices are zero based, i.e the range of valid indices are from&nbsp;<code>0</code>&nbsp;to&nbsp;<code>length - 1</code>.</p>\r\n<pre>a[0] = some_value;</pre>\r\n<p>An array also has the following methods:</p>\r\n<pre>void insertAt(uint index, const T&amp; in);\r\nvoid removeAt(uint index);\r\nvoid insertLast(const T&amp; in);\r\nvoid removeLast();\r\nuint length() const;\r\nvoid resize(uint);</pre>\r\n<div class="alert alert-info">The content above has been adapted from the original AngelScript documentation.</div>\r\n<h4>Handle arrays and handle to arrays</h4>\r\n<p>To declare an array of handles, use:</p>\r\n<pre>MyObject@[] objects;</pre>\r\n<p>To declare a handle to an array, put the&nbsp;<code>@</code>&nbsp;after the brackets:</p>\r\n<pre>MyObject@[]@ arrayOfObjectArrays;\r\nint[]@ handleToArrayOfIntegers;</pre>', 1),
(69, 7, 6, 7, 'The app.enml file', '<p>The&nbsp;<code>app.enml</code>&nbsp;defines default application properties for the game. It&nbsp;must be in the project root directory. All properties set in the <code>default</code> scope are used on all platforms but these values may be overwritten by platform-specific ones.</p>\r\n<p>Example:</p>\r\n<pre>default\r\n{\r\n	title = Ethanon Engine; // window title\r\n	richLighting = true;\r\n}\r\n\r\nwindows\r\n{\r\n	width = 640;\r\n	height = 480;\r\n	windowed = true;\r\n	vsync = true;\r\n}\r\n\r\nandroid\r\n{\r\n	// it will overwrite the default ''richLighting'' property\r\n	richLighting = false; // disables lighting when running on Android\r\n}\r\n\r\nios\r\n{\r\n	fixedHeight = 480; // forces backbuffer height to 480p on iOS\r\n}</pre>\r\n<p>Some other features of the <code>app.enml</code> file are described below.</p>\r\n<h3>Best screen sizes</h3>\r\n<p>In order to force the window size to the current best back-buffer resolution possible, which is the real resolution of the main display, ideal for fullscreen mode, <code>width</code> and <code>height</code> attributes must be set to <code>best</code>:</p>\r\n<pre>default\r\n{\r\n	width  = best;\r\n	height = best;\r\n	windowed = false;\r\n}</pre>\r\n<p>Notice that <code>width</code> and <code>height</code> attributes are always treated as <code>best</code> on non-desktops devices.</p>\r\n<h3>Fixed size back-buffers</h3>\r\n<p>Rendering many large dynamic lights or even too many transparent entities may become costly for some platforms. Sometimes it is good to avoid that extra cost by rendering the entire scene into a smaller back-buffer that will fill the entire screen when the rendering is finished. This can be enabled by setting <code>fixedHeight</code> or <code>fixedWidth</code> parameters:</p>\r\n<pre>default\r\n{\r\n	width = 1024;\r\n	height = 768;\r\n\r\n	// window size is 1024x768, but the actual\r\n	// back-buffer will be 640x480\r\n	fixedHeight = 480;\r\n	fixedWidth = auto;\r\n\r\n	windowed = true;\r\n	vsync = true;\r\n}</pre>\r\n<p>Custom sized back-buffers must keep the same aspect ration as the current screen size, thus only <code>fixedWidth</code> or <code>fixedHeight</code> can be set. If <code>fixedHeight &gt; 0</code>, <code>fixedWidth</code> must be auto and vice versa.</p>\r\n<h3>User-defined words</h3>\r\n<p>The developer may optionally define custom words which may be processed by the engine in pre-compilation time. Example:</p>\r\n<pre>// compiles the code inside if/endif statements when the DESKTOP word is defined\r\n#if ONLINE_LEADERBOARD_SUPPORTED\r\n  print("This platform supports on-line leader-boards!");\r\n#endif\r\n\r\n#if GAME_CENTER\r\n  print("The score leader-board in this platform is provided by Apple''s Game Center");\r\n#endif</pre>\r\n<p>By <strong>default</strong>, Ethanon Engine defines the following words:</p>\r\n<table class="table table-bordered table-striped">\r\n<tbody>\r\n<tr>\r\n<td><strong>Platform / condition</strong></td>\r\n<td><strong>Words defined</strong></td>\r\n</tr>\r\n<tr>\r\n<td>Windows</td>\r\n<td><code>WINDOWS</code>, <code>DESKTOP</code></td>\r\n</tr>\r\n<tr>\r\n<td>Mac OS X</td>\r\n<td><code>MACOSX</code>, <code>DESKTOP</code></td>\r\n</tr>\r\n<tr>\r\n<td>iOS</td>\r\n<td><code>APPLE_IOS</code>, <code>MOBILE</code>, <code>HANDHELD</code></td>\r\n</tr>\r\n<tr>\r\n<td>Android</td>\r\n<td><code>ANDROID</code>, <code>MOBILE</code>, <code>HANDHELD</code></td>\r\n</tr>\r\n<tr>\r\n<td>Application is running from SciTE or Sublime</td>\r\n<td><code>TESTING</code></td>\r\n</tr>\r\n<tr>\r\n<td>Ethanon is running on debug mode</td>\r\n<td><code>DEBUG</code></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>Additional custom words are defined by the <code>definedWords</code> parameter in a comma-separated string. Words defined in the <code>default</code> enml-entity are merged with the ones defined in the platform specific ones:</p>\r\n<pre>default\r\n{\r\n	title = Extremely awesome game;\r\n	width = 1280;\r\n	height = 720;\r\n	<strong>definedWords = DISPLAY_FPS_RATE;</strong>\r\n}\r\n\r\nwindows\r\n{\r\n	definedWords = ENABLE_DEBUGGING_CHEATS;\r\n}<br />\r\nmacosx\r\n{\r\n	definedWords =  ENABLE_DEBUGGING_CHEATS;\r\n}<br />\r\nios\r\n{\r\n	definedWords =  ONLINE_LEADERBOARD_SUPPORTED,GAME_CENTER,ENABLE_BANNER_ADS,ENABLE_VIDEO_ADS;\r\n}<br />\r\nandroid\r\n{\r\n	definedWords =  ONLINE_LEADERBOARD_SUPPORTED,OPEN_FEINT,ENABLE_BANNER_ADS;\r\n}</pre>\r\n<p>With custom words, developers can easily handle differences between platforms and switch them at will.</p>', 1);
INSERT INTO `ethpage` (`id`, `parent_id`, `lft`, `rght`, `name`, `description`, `show_menu`) VALUES
(24, 22, 34, 41, 'How it works', '<p>The Ethanon Engine virtual machine (e.g. machine.exe on Windows) starts by compiling and running&nbsp;main.angelscript placed in the project root directory. Eventually the main script file will <code>#include</code> other source files as well.</p>\r\n<div class="alert alert-info">Notice that .angelscript files must be encoded as <em>UTF-8 with BOM</em>.</div>\r\n<p>Ethanon *.angelscript script files can be edited with SciTE, a text editor included in the SDK. SciTE can also execute (F5) and compile/build (F7) projects. The SciTE mod will highlight all AngelScript and Ethanon reserved global words, such as functions, objects and constants.</p>\r\n<p>Just like many programming languages, a game starts from the main function:</p>\r\n<p>[main.angelscript]</p>\r\n<pre>void main()\r\n{\r\n    // loads my_scene.esc\r\n    LoadScene("scenes/my_scene.esc");\r\n\r\n    // hides the mouse cursor\r\n    HideCursor(true);\r\n\r\n    // set screen options\r\n    SetWindowProperties(\r\n        "Ethanon Engine", // window title\r\n         1024, 768,       // screen size\r\n         true,            // true=windowed / false=fullscreen\r\n         true,            // true=enable vsync false=disable vsync\r\n         PF32BIT);        // color format\r\n}\r\n</pre>\r\n<p>Every Ethanon script must have a <code>void main()</code> function.&nbsp;This function must be <code>void</code> and should not have parameters.</p>\r\n<p><code>LoadScene</code> is a global function that loads a scene from an ESC file. The code above loads <code>my_scene.esc</code> and runs it in a regular game loop.</p>\r\n<p><code>HideCursor</code> and <code>SetWindowProperties</code> functions are EE''s native globals too. They''re called to setup window options, but both are optional. If the function <code>SetWindowProperties</code> is ommited in the <code>main</code> function, the core engine will use its internal defaults (normally defined in app.enml file).</p>\r\n<p><code>SetWindowProperties</code> may be used at any time to change windows states such as changing screen size or toggling between windowed and full screen modes.</p>', 1),
(70, 22, 44, 45, 'Vector and color types', '<p>Ethanon has special data types that describe some of the most commonly used elements in scripting: coordinates in space, sizes and colors.</p>\r\n<h4>Vector objects</h4>\r\n<p>The <code>vector2</code>&nbsp;type can be used to describe a coordinate in a cartesian space, along its&nbsp;<code>x</code> and <code>y</code> axis. Its structure looks like this:</p>\r\n<pre>class vector2\r\n{\r\n    float x, y;\r\n}\r\n</pre>\r\n<p>Example of usage:</p>\r\n<pre>vector2 a; // declares the coordinate a\r\na.x = 100.0f;\r\nb.y = 200.0f;</pre>\r\n<p>or use the default constructor that automatically assigns <code>x</code> and <code>y</code> values:</p>\r\n<pre>vector2 a(100.0f, 200.0f); // the same as above</pre>\r\n<p>Our two-dimensional vector object is also often used to describe rectangular dimensions, where <code>x</code> describes the width and <code>y</code> describes the height:</p>\r\n<pre>vector2 entitySize = entity.GetSize();</pre>\r\n<p>There is also another vector object variant named <code>vector3</code>, which is equivalent to a <code>vector2</code> except this one includes an extra float attribute named <code>z</code>:</p>\r\n<pre>class vector3\r\n{\r\n    float x, y, z;\r\n}\r\n</pre>\r\n<p><code>vector3</code> is commonly used to describe entity coordinates in world space (<a href="../../manual/19">more about entity world space</a>). Example:</p>\r\n<pre>vector3 pos = entity.GetEntityPosition();\r\nentity2.SetPosition(vector3(10.0f, 20.0f, 0.0f));\r\n</pre>\r\n<p>The <code>vector3</code> object can also describe an RGB color value. Where <code>x</code>, <code>y</code> and <code>z</code> are treated as <code>r</code>ed, <code>g</code>reen and <code>b</code>lue color channels respectively.</p>\r\n<p>When used as a color value,&nbsp;<code>vector3</code> attributes usually range between <code>0.0f</code> and <code>1.0f</code>, which is equivalent to a <code>0-255</code> range considering one byte per color channel:</p>\r\n<pre>vector3 red(1,0,0);\r\nvector3 green(0,1,0);\r\nvector3 blue(0,0,1);\r\nvector3 brightGray(0.8f, 0.8f, 0.8f);\r\nvector3 darkGray(0.2f, 0.2f, 0.2f);\r\n</pre>\r\n<p>Some Ethanon native functions and methods require color input as a <code>vector3</code> color format, sometimes it asks for a raw 32-bit <code>uint</code> color value.</p>\r\n<h4>Describing 32-bit color values</h4>\r\n<p>It is also possible to describe color values as 32-bit data segments using the <code>uint</code> type. This color format uses 4 bytes, each byte for a specific color channel: <code>A</code>lpha, <code>R</code>ed, <code>G</code>reen and <code>B</code>lue. Where the alpha value describes a transparency level where <code>0</code> means completely invisible and <code>1</code> means full opacity.</p>\r\n<p><code>uint</code> color values are often represented in the hexadecimal format:</p>\r\n<pre>uint white = 0xFFFFFFFF;\r\nuint black = 0xFF000000;\r\nuint blue  = 0xFF0000FF;\r\nuint semiTransparentRed = 0xCAFF0000;\r\n</pre>\r\n<p>The <code>ARGB</code> helper function provides automatic conversion from separate decimal values:</p>\r\n<pre>uint white = ARGB(255,255,255,255);\r\nuint black = ARGB(255,0,0,0);\r\nuint blue  = ARGB(255,0,0,255);\r\nuint semiTransparentRed = ARGB(202,255,0,0);\r\n</pre>', 1),
(32, 24, 37, 38, 'Entity callbacks', '<p>onSceneCreated and onSceneUpdate (pre-loop and loop) functions are not the only sort of callback functions available. Every different entity may have its own callback functions. Entity callback functions are automatically assigned to entities whenever the engine finds a matching function globally declared in the game script, for example <code>ETHCallback_entity_<em>name</em></code> and <code>ETHConstructorCallback_entity_<em>name</em></code>.</p>\r\n<h3>Entity update callback</h3>\r\n<p>Update callback functions are automatically called by the engine for each matching entity at every game frame. <code>ETHCallback_</code> must always be the prefix for this kind of callback.</p>\r\n<p>The engine will search for a callback function for every entity which is either loaded from the scene file or dynamically added to scene (through script code).</p>\r\n<p>Consider the following example:</p>\r\n<pre>void main()\r\n{\r\n	// loads raccoon_city.esc\r\n	LoadScene("scenes/raccoon_city.esc");\r\n}\r\n\r\n// This function will be automatically assigned to and\r\n// executed for all entities named ''zombie'' or ''zombie.ent''\r\nvoid ETHCallback_zombie(ETHEntity @thisZombie)\r\n{\r\n	if (searchForBrains(@thisZombie) == FRESH_BRAIN)\r\n	{\r\n		eatBrain(@thisZombie)\r\n	}\r\n}\r\n</pre>\r\n<p>Considering the example above, if the scene <code>raccoon_city.esc</code> contains 20 entities named <code>zombie.ent</code>, the function <code>ETHCallback_zombie(ETHEntity@)</code> will be called 20 times for each zombie in scene during each frame.</p>\r\n<p>Update callback functions must have as parameter an <code>ETHEntity@</code> object handle as shown above, that object handle will always point to the current entity. If this function is executed 20 times per frame (to process all the 20 zombies in it), every time this is called in a frame, <code>thisZombie</code> will refer to a different zombie. Remember that an object handle declaration is followed by the <code>@ operator</code> on AngelScript.</p>\r\n<p>Entity exclusive callback functions are great if the game needs entity specific behavior. The <code>ETHEntity</code> object has several methods to control every important property of the entity (position, angle, animation and much more).</p>\r\n<div class="alert alert-info">Notice that the entity name suffix (after the period) is ignored. So the callback function for both <code>character</code> and <code>character.ent</code> entities is <code>ETHCallback_character</code>.</div>\r\n<div class="alert alert-info">Callback functions behave differently on static and dynamic entities. <a href="../../manual/17">More about this</a>.</div>\r\n<h3>Entity constructor callback</h3>\r\n<p>Unlike <em>update callbacks</em>, constructor callback functions are executed only once by the engine, and just before the first <em>update callback</em> function gets called. Its prefix is <code>ETHConstructorCallback_</code>, its type must be <code>void</code> and its parameter must be an <code>ETHEntity@</code> object reference as well:</p>\r\n<pre>// initializes each zombie with HP and LEVEL\r\nvoid ETHConstructorCallback_zombie(ETHEntity@ thisZombie)\r\n{\r\n	thisZombie.SetInt("hp", 100);\r\n	thisZombie.SetUInt("level", 5);\r\n}</pre>\r\n<p>Entity constructors are great to initialize custom variables and other meta data related to entities. The <a href="https://github.com/asantee/ethanon-samples/blob/master/intermediate/frame-animation/main.angelscript">frame-animation</a> sample illustrates its usage.</p>\r\n<p>Notice that constructor callback functions are not necessarily called right after the entity is added to scene, but right before its <em>update</em> callback function is going to be called by the engine.</p>', 1),
(39, 36, 49, 50, 'Retrieving custom variables', '<p>In order to check if a custom variable exists or even to find out its type, use the <code>ETHEntity::CheckCustomData</code> method. The methods <code>ETHEntity::GetFloat</code>, <code>::GetUInt</code>, <code>::GetInt</code>, <code>::GetString</code>, <code>::GetVector2</code> and <code>::GetVector3</code> can be used to retrieve custom data from entities:</p>\r\n<p>Checking data:</p>\r\n<pre>// Retrieves a handle to our character\r\nETHEntity @mainCharacter = SeekEntity("my_character.ent");\r\n\r\n// Checks if "class" exists\r\nDATA_TYPE dt = mainCharacter.CheckCustomData("class");\r\n\r\n// if class doesn''t exist\r\nif (dt == DT_NODATA)\r\n{\r\n    print("No data here\\n");\r\n}\r\nelse if (dt == DT_STRING) // if it exists and it is a string, print it\r\n{\r\n    print(mainCharacter.GetString("class"));\r\n}</pre>\r\n<p>If the <code>ETHEntity::Get*</code> methods try to retrieve an inexistent variable or if its type does not match the retrieving type, it will return <code>0</code> or an empty string.</p>\r\n<p>If you are not sure if a certain variable exists or not, test it with <code>ETHEntity::CheckCustomData</code> before retrieving its value.</p>', 1),
(33, 24, 39, 40, 'Loop diagram', '<p>Here is a small diagram that illustrates how the main loop works:</p>\r\n<p><img src="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/loop-diagram.png" alt="" width="80%" height="80%" /></p>', 1),
(35, 24, 41, 42, 'Runtime generated scenes', '<p>If you want to generate your game scene during runtime instead of loading a prebuilt one, you may set the string <code>"empty"</code> or an empty string <code>""</code> as scene file name:</p>\r\n<pre> // loads an empty scene\r\n LoadScene("empty", "NewGame", "GameLoop");</pre>\r\n<p>or</p>\r\n<pre> // does the same as the example above\r\n LoadScene("", "NewGame", "GameLoop");</pre>\r\n<p>By choosing an empty scene, the user tells EE to create a scene without loading entities from an .ESC file.</p>\r\n<p>For dynamically generated scenes, it is recommended to use only dynamic lighting by calling <code>EnableLightmaps(false)</code> in order to disable all static lighting. The only drawback is that the shadows won''t look as good as they look as static shades.</p>', 1),
(31, 24, 35, 36, 'onSceneCreated and onSceneUpdate', '<p>There are two kinds of callback functions that may be related to a scene:&nbsp;<span style="text-decoration: underline;">onSceneCreated</span> (also known as pre-loop funcion) and <span style="text-decoration: underline;">onSceneUpdate</span> (also known as&nbsp;loop function).</p>\r\n<div class="well well-small"><strong>onSceneCreated</strong> functions will be executed only once right after the scene is loaded but before it gets rendered for the first time. They are useful for procedures like adding NPC''s randomly into the scene before a level starts, or adding custom data to entities.</div>\r\n<div class="well well-small"><strong>onSceneUpdate</strong> functions will be executed at every repetition of the main game loop. This is important to manage menus, control entities or general game events (e.g.: checking if all conditions to finish a level are reached), controlling ambient sound effects or whatever the game needs.</div>\r\n<p>To assign onSceneCreated and&nbsp;onSceneUpdate&nbsp;functions to a scene it is necessary to specify the exact names of the functions when calling the <code>LoadScene</code> function, for example:</p>\r\n<pre>void main()\r\n{\r\n    // loads my_scene.esc\r\n    LoadScene("scenes/my_scene.esc", "NewGame", "GameLoop");\r\n}\r\n\r\nvoid NewGame()\r\n{\r\n    //do something...\r\n}\r\n\r\nvoid GameLoop()\r\n{\r\n    //do something...\r\n}\r\n</pre>\r\n<p>Notice that <code>LoadScene</code> has the function names as second and third parameters. <code>NewGame</code> is going to be the pre-loop (onSceneCreated) function and <code>GameLoop</code> is the loop (onSceneUpdate)&nbsp;function. If any of these parameters aren''t empty strings, the core engine will search for functions with exact names. If they cannot be found, the program will exit and output an error message.</p>\r\n<p>If any of these parameters are set as an empty string, the engine will not execute the respective callback function, e.g.:</p>\r\n<pre>// this one won''t have a pre-loop function\r\nLoadScene("scenes/my_scene.esc", "", "onSceneUpdate");</pre>\r\n<p>or</p>\r\n<pre>// this one won''t have a loop function\r\nLoadScene("scenes/my_scene.esc", "onSceneCreated", "");</pre>\r\n<p>or even</p>\r\n<pre>// this one won''t have any function\r\nLoadScene("scenes/my_scene.esc", "", "");</pre>\r\n<p>Pre-loop and loop functions must be <code>void</code> and may not have parameters.</p>\r\n<p>After loading the first scene and quitting the <code>main()</code> function, the application flow control will be up to the callback functions. The following example loads the first scene and while executing the first scene update function, checks whether the user presses the space key - it loads the next scene if it does:</p>\r\n<pre>void main()\r\n{\r\n   // loads my_scene.esc\r\n   LoadScene("scenes/my_scene.esc", "onSceneCreated", "onSceneUpdate");\r\n}\r\n\r\nvoid onSceneUpdate()\r\n{\r\n    //checks if the space key is pressed\r\n    ETHInput @input = GetInputHandle();\r\n    if(input.KeyDown(K_SPACE))\r\n    {\r\n        // loads the next scene\r\n        LoadScene("scenes/level_two.esc", "otherOnSceneCreated", "onSceneUpdate");\r\n    }\r\n}\r\n\r\nvoid onSceneCreated()\r\n{\r\n    // this one will be called only for my_scene.esc\r\n}\r\n\r\nvoid otherOnSceneCreated()\r\n{\r\n    // this one will be called only for level_two.esc\r\n}\r\n</pre>\r\n<p>Different onSceneCreated and onSceneUpdate (pre-loop and loop) functions were assigned to the next level. Different scenes may either share the same functions or use exclusive ones. It''s up to the programmer to decide.</p>', 1),
(36, 22, 46, 51, 'Entity custom data', '<p>It is possible to store custom data into entities, which may be retrieved at anytime. It allows entities to have much more specific properties for specific behavior. For example, a player''s HP, projectile directions (since each projectile should have its specific moving direction), RPG character''s status such as strength, stamina, agility, etc.</p>\r\n<p>EE supports the following custom data types:</p>\r\n<table class="table table-striped table-bordered" style="width: 90%;">\r\n<tbody>\r\n<tr>\r\n<td><strong>type</strong></td>\r\n<td><strong>Size</strong></td>\r\n<td><strong>Identification constant</strong></td>\r\n</tr>\r\n<tr>\r\n<td><code>float</code></td>\r\n<td>32-bit</td>\r\n<td><code>DT_FLOAT</code></td>\r\n</tr>\r\n<tr>\r\n<td><code>int</code></td>\r\n<td>32-bit</td>\r\n<td><code>DT_INT</code></td>\r\n</tr>\r\n<tr>\r\n<td><code>uint</code></td>\r\n<td>32-bit</td>\r\n<td><code>DT_UINT</code></td>\r\n</tr>\r\n<tr>\r\n<td><code>string</code></td>\r\n<td><code>std::string</code></td>\r\n<td><code>DT_STRING</code></td>\r\n</tr>\r\n<tr>\r\n<td><code>vector2</code></td>\r\n<td><code>2 * sizeof(float)</code></td>\r\n<td><code>DT_VECTOR2</code></td>\r\n</tr>\r\n<tr>\r\n<td><code>vector3</code></td>\r\n<td><code>3 * sizeof(float)</code></td>\r\n<td><code>DT_VECTOR3</code></td>\r\n</tr>\r\n<tr>\r\n<td>AngelScript object handle</td>\r\n<td>-</td>\r\n<td><code>DT_OBJECT</code></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>Each entity may have any combination of custom variables.</p>', 1),
(38, 36, 47, 48, 'Adding custom variables', '<p>Custom variables may either be added through the entity and scene editors or through code.</p>\r\n<p>Every custom data added to an entity must have a name, just like a regular variable. The methods <code>ETHEntity::SetFloat</code>, <code>::SetInt</code>, <code>::SetUInt</code> and <code>::SetString</code> (among others, see the <code>ETHEntity</code> object reference for more information) may be used to add custom data or to update existing values:</p>\r\n<p>Custom data sample:</p>\r\n<pre>// Retrieves a handle to our character\r\nETHEntity @mainCharacter = SeekEntity("main_character");\r\n\r\n// Add custom data to it\r\nmainCharacter.SetString("class", "mage");\r\nmainCharacter.SetFloat("speed", 100.0f);\r\nmainCharacter.SetInt("hp", 60);\r\nmainCharacter.SetUint("maxHp", 70);\r\nmainCharacter.SetVector2("direction", vector2(20, 40));\r\n\r\n// Now hp equals 70. Instead of adding new data,\r\n// it will just update it because "hp" already exists.\r\nmainCharacter.SetInt("hp", 70);\r\n\r\n// Add 10 damage to character\r\nmainCharacter.AddToInt("hp",-10);\r\n\r\n// Will overwrite ''float speed'' since it already exists and is not an int\r\nmainCharacter.SetInt("speed", 150);\r\n</pre>\r\n<p>In order to retrieve data, use <code>ETHEntity::GetFloat</code>, <code>::GetUInt</code>, etc.</p>', 1),
(40, 22, 52, 57, 'Entity Arrays', '<p>Entity exclusive callbacks are useful for quickly programming specific behavior for every different entity in scene, but may be not as useful for handling multiple entities at the same time.</p>\r\n<p>For that reason, sometimes it will be necessary to store entities in a quickly accessible array that could simplify management of multiple objects. In Ethanon Engine this can be done with the <code>ETHEntityArray</code> object. This object is very similar to the <code>std::vector</code> template on C++, matter of fact, it is an <code>std::vector</code> wrapper that provides the most important methods such as <code>Insert</code> (push_back), <code>Size</code> and the <code>[] operator</code>.</p>\r\n<p>Functions like <code>GetEntityArray</code> function may build arrays containing all entities of certain name, or from certain buckets in scene.</p>', 1),
(41, 40, 53, 54, 'Filling the array', '<p>To retrieve an array, use the <code>GetEntityArray</code> function:</p>\r\n<pre>ETHEntityArray bombs;\r\nGetEntityArray("bomb.ent", bombs);</pre>\r\n<p>Now bombs stores an array that contains every <code>bomb.ent</code> entity in scene. The index <code>[] operator</code> for this object is overloaded in order to provide direct access to the <code>ETHEntity@</code> handle.</p>\r\n<pre>bombs[i].SetPosition(vector3(10,20,30));</pre>\r\n<p>It is also possible to fill an array with the <code>Insert</code> method, as shown below:</p>\r\n<pre>ETHEntityArray party;\r\nparty.Insert(SeekEntity("knight.ent"));\r\nparty.Insert(SeekEntity("mage.ent"));<br />party.Insert(SeekEntity("rogue.ent"));<br />party.Insert(SeekEntity(druidEntityID));</pre>\r\n<p>The <code>+= operator</code> is also overloaded. It may be used to concatenate two arrays.</p>', 1),
(42, 40, 55, 56, 'Reading the array', '<p>The <code>ETHEntityArray</code> object allows direct access to the <code>ETHEntity@</code> handle through index <code>[] operators</code> just like in C++:</p>\r\n<pre>for (uint t=0; t&lt;bombs.Size(); t++)\r\n{\r\n    // Checks if the current handle is valid\r\n    // before doing anything\r\n    if ((bombs[t]) is null)\r\n        continue;<br /><br />    // Checks if the current bomb is active in scene\r\n    if (!bombs[t].IsAlive())\r\n        continue;\r\n\r\n    // moves the entity to the right\r\n    bombs[t].AddToPositionXY(vector2(3.0f,0.0f));\r\n}</pre>\r\n<p>See the <code>ETHEntityArray</code> section in the API reference to learn more.</p>', 1),
(44, 0, 61, 72, 'Scene buckets', '<p>Scenes in Ethanon Engine are partitioned into several rectangular buckets, which allows many software optimizations to take place.</p>\r\n<p>The default bucket size is <code>256 x 256</code> pixels, but this dimension may be customized. A bucket consist in a rectangular area that own all entities inside its boundaries. A bucket is identified by its coordinates on a 2D board that represents the scene, as illustrated by the image below:</p>\r\n<p><img src="../../app/webroot/img/buckets.png" alt="" width="717" height="538" /></p>\r\n<p>The buckets are identified by their two-dimensional key. The bucket <code>(1,1)</code> contains four barrels, the bucket <code>(-1,0)</code> contains two pillars, etc.</p>\r\n<p>Notice that the entities on buckets <code>(-1,1)</code> and <code>(0,0)</code> exceed their bucket boundaries, but they are owned by the bucket in which their origin is located.</p>\r\n<p>The core engine automatically sorts all entities and places them into their respective bucket, so the programmer must not worry about managing it. However, the programmer may take advantage of this system to optimize his own code. For instance, if the game requires collision detection testing between a character and other scene elements, it is possible to retrieve an array containing only those buckets around the character, checking collision only against those buckets instead of the whole scene or other unnecessary entities.</p>', 1),
(54, 0, 73, 102, 'F.A.Q.', '<p>Here are some frequently asked questions we receive.</p>', 0),
(45, 44, 62, 65, 'Getting entities from buckets', '<p>To get access to all entities in a bucket, use the global function <code>GetEntitiesFromBucket</code>:</p>\r\n<pre>ETHEntityArray bucketArray;\r\n<br />GetEntitiesFromBucket(vector2(1,1), bucketArray);\r\nfor (uint t = 0; t &lt; bucketArray.Size(); t++)\r\n{\r\n    bucketArray[t].SetColor(newColor);\r\n}</pre>\r\n<p>In the example above, we fill the array with all entities on bucket <code>(1,1)</code> and set a custom color to them.</p>\r\n<p>It is also possible to hold two or more buckets in a single array by using the appending <code>+= operator</code>:</p>\r\n<pre>ETHEntityArray bucketArray;\r\nGetEntitiesFromBucket(vector2(1,1), bucketArray);\r\n\r\nETHEntityArray otherArray;\r\nGetEntitiesFromBucket(vector2(1,2), otherArray);\r\n\r\nbucketArray += otherArray;\r\n\r\notherArray.Clear();</pre>\r\n<p>bucketArray will now hold all entities in the buckets <code>(1,1)</code> and <code>(1,2)</code>.</p>\r\n<p>The global function <code>GetBucket</code> may be used to easily find out to which bucket a point in space belongs:</p>\r\n<pre>ETHEntityArray bucketArray;\r\nconst vector2 monsterBucket = GetBucket(monster.GetPositionXY());\r\nGetEntitiesFromBucket(monsterBucket, bucketArray);</pre>\r\n<p>Or you can use the <code>ETHEntity::GetCurrentBucket</code> method to quickly find which bucket holds the entity:</p>\r\n<pre>ETHEntityArray bucketArray;\r\nconst vector2 bucket = monster.GetCurrentBucket();\r\nGetEntitiesFromBucket(bucket, bucketArray);</pre>', 1),
(46, 44, 66, 67, 'Changing bucket size', '<p>The only way to manipulate the bucket size is before loading a scene. The <code>LoadScene</code> function is overloaded to receive the bucket size from its last parameter. The minimum width and height for a bucket is 128 pixels.</p>\r\n<pre>LoadScene("dungeon.esc", "", "GameLoop", vector2(256,128));</pre>\r\n<p><code>dungeon.esc</code> will now be partitioned into 256x128 buckets.</p>', 1),
(47, 44, 68, 69, 'Border buckets', '<p>By default, the core engine does not process only buckets that are currently visible. Due to that fact that entities might exceed their bucket seams, the surrounding buckets must be included to the loop update process in order to avoid undesired visual artifacts.</p>\r\n<p>The image below shows how the engine includes border buckets:</p>\r\n<p><img src="../../app/webroot/img/bucketseams.png" alt="" width="412" height="292" /></p>\r\n<p>If an entity in a yellow bucket exceeds its seams and partially appears in a blue bucket, it will be drawn normally. This feature avoids visual artifacts, since entities won''t mysteriously disappear as their buckets are scrolled away.</p>\r\n<p>However, it is possible to disable this feature to boost game performance a little bit, and process only visible buckets:</p>\r\n<pre>// Disable border buckets drawing. Set ''true'' to enable it again\r\nSetBorderBucketsDrawing(false);</pre>', 1),
(48, 44, 70, 71, 'Remarks on bucket usage', '<ul>\r\n<li>The Scene Editor has 512x512 buckets instead of the default 256x256.</li>\r\n<li>For correct lighting and culling, entities in scene shouldn''t be larger than the buckets. For example: if your bucket dimension equals 128x128 pixels, the entity sprites in scene shouldn''t exceed that size. Ethanon Engine won''t return any error messages if the scene doesn''t follow these rules, but the end-user might experience lighting and culling artifacts.</li>\r\n<li>An entity may intersect two or more buckets at the same time, but it will only be placed in the bucket where its origin is. The developer must keep that in mind while performing operations such as collision detection, and maybe even including to the test the buckets around the main bucket to avoid disconnecting entities.</li>\r\n<li>Although the bucket key is based on a floating point vector (<code>vector2</code>), its identification must always be integer. E.g. Right: <code>(40.0f,3.0f)</code>, wrong: <code>(10.5f,0.333f)</code>.</li>\r\n</ul>', 1),
(49, 22, 58, 59, 'Important remarks', '<p>A few relevant remarks are listed below.</p>\r\n<h4>Engine versions</h4>\r\n<ul>\r\n<li>If you are reading this documentation on-line from the&nbsp;<a href="http://ethanonengine.com">official Ethanon Engine website</a>, make sure you have the lastest Ethanon Engine binaries.</li>\r\n<li>Always read the change log after updating your Ethanon Engine version.</li>\r\n<li>Binary files and default shaders in your projects directories (machine.exe, data/*.cg, etc.) won''t get automatically updated when you install a new version of Ethanon Engine. In order to update your project, open the project manager in the Ethanon Editor, choose the "New project..." option and overwrite your old *.ethproj file. Don''t worry, you source code will remain intact, only .EXE and .DLL files will be replaced.</li>\r\n</ul>\r\n<h4>Optimization tips</h4>\r\n<ul>\r\n<li>Minimize the number of tile entities (floor, ground, etc.) by using bigger bitmaps when possible. It''ll make your game run faster.</li>\r\n<li>Avoid using the&nbsp;<code>SeekEntity</code>&nbsp;function too many times during the game loop because it may become slow. Prefer manipulating entities through exclusive callback functions. Global processes with loops that scan all entities must be avoided and most of them can be replaced by callback functions or entity arrays.</li>\r\n<li>Using aligned power-of-two sized ground tiles (32x32, 64x64, 128x128, 256x256...) will make the occlusion system run much more efficiently.</li>\r\n<li>Good level design is very important. If the scene doesn''t have big entities that exceed their bucket seams, the border drawing may be turned off and the frame rate may increase drastically.</li>\r\n</ul>\r\n<h4>Safety tips</h4>\r\n<ul>\r\n<li>The&nbsp;<code>ETHEntity</code>&nbsp;object is reference counted. Which means that as long as the application keeps a handle (<code>ETHEntity@</code>) alive, the entity will still be allocated, even if it has already been deleted from the scene. It will only be freed when all handles are destroyed, so avoid having more than one handle at the same time. Global handles are the most unsafe.</li>\r\n<li>The console window will output any relevant information about the program. Watch it closely specially in case of an abnormal functioning.</li>\r\n<li>All boolean functions will return false if they fail. Error checking is always a good habit.</li>\r\n</ul>\r\n<h4>Miscellaneous tips and remarks</h4>\r\n<ul>\r\n<li>If the particle system in the first slot (A) is not infinite, its activity will control the entity''s light brightness.</li>\r\n<li>Whenever a spriteless entity has both particle systems finished (if they are not infinite) it will be automatically deleted.</li>\r\n<li>The&nbsp;<code>LoadScene</code>&nbsp;function will not immediately load a new scene. Instead, it will request the change as shown in the main loop diagram.</li>\r\n<li>Once an entity is placed into the scene using the Scene Editor, its original name will remain the same even if the original ENT file is renamed outside the editor. In other words, the method&nbsp;<code>ETHEntity::GetEntityName</code>&nbsp;will always return the entity name as it was at the moment it was first placed in scene. However, it can be manually renamed at any time in the Scene Editor.</li>\r\n<li>Changing a particle PAR effect won''t automatically update particle effects in the entities.&nbsp;</li>\r\n</ul>', 1),
(55, 54, 74, 75, 'I like it. How can I help?', '<p>Here are some suggestions:</p>\r\n<ul>\r\n<li>Buy Ethanon-powered games if you have an <a href="https://play.google.com/store/search?q=pub:Asantee" target="_blank">Android</a> or an <a href="http://itunes.com/apps/asantee">iPhone/iPad/iPodTouch</a>!</li>\r\n<li>Text/video tutorials: feel free to make tutorials covering any aspect of EE and I''ll be happy to add (or link, if you prefer) it to the official website.</li>\r\n<li>Opinions and feedback: you may always keep me up-to-date about your impressions about the engine (the editor and the scripting language), showing where there''s room for improvement.</li>\r\n<li>Submit your game or demo: have you done anything with the engine? Share it! Send me a link to your projects site, your videos or screen shots.</li>\r\n</ul>', 0),
(56, 54, 76, 77, 'Are there any games made with Ethanon Engine?', '<p>As the game engine is quite new, and it''s not yet finished (there are many features to be implemented specially to the editor), there aren''t many games made with it yet. You can check our <a href="http://www.asantee.net/ethanon/index.php?p=gamegallery">game gallery</a> to see some of the games that already use EE. If you have published anything that uses Ethanon Engine, please, <a href="http://www.asantee.net/ethanon/?p=home#contact">let me know</a>.</p>', 0),
(57, 54, 78, 79, 'Is it powerful enough for a large RPG or even a RTS game?', '<p>It probably is. Although its power hasn''t been extensively explored yet, the scripting system probably offers all necessary features. Also, the spatial hashing culling system should support very large scenes without problems.</p>', 0),
(58, 54, 80, 81, 'Is it cross-platform?', '<p>The engine core doesn''t include a single platform-specific line of code, so, yes it is. At this time, it has implementations for Windows, <a href="https://github.com/asantee/ethanon/tree/master/toolkit/Source/src/gs2d/projects/Android/Ethanon">Android</a> and<a href="https://github.com/asantee/ethanon/tree/master/toolkit/Source/projects/xcode"> iOS</a> (both mobile versions depend on OpenGL ES 2.0 support). However, we are still working on better documentation and tutorials that show how to run your games on both mobile systems, so we will be able to provide an user-friendly SDK. But if you are an experienced <a href="https://github.com/asantee/ethanon/tree/master/toolkit/Source/src/gs2d/projects/Android/Ethanon">Android</a> or <a href="https://github.com/asantee/ethanon/tree/master/toolkit/Source/projects/xcode">iOS</a> programmer, you''re already able to run it by yourself using the project templates included in the repository.</p>\r\n<p><a href="https://github.com/asantee/ethanon/blob/master/toolkit/Source/src/gs2d/projects/Android/Ethanon/build-how-to.txt">Here</a> are some more useful information.&nbsp;</p>\r\n<p>Its multimedia objects don''t have any working OpenGL implementation yet, so no MacOS or Linux support.</p>', 0),
(59, 54, 82, 83, 'Is it necessary to know any programming language to make games with it?', '<p>Yes. Ethanon Engine was not designed for non-programmers. The developer must have good understanding on game logic as well.</p>', 0),
(60, 54, 84, 85, 'What programming language does it use?', '<p>&nbsp;It uses AngelScript, which is quite similar to C++, C# or Java.</p>', 0),
(61, 54, 86, 87, 'How does the lighting system work? Is it actual 2D?', '<p>It is based on three dimensional <a href="http://en.wikipedia.org/wiki/Normal_mapping">normal maps</a>, so we could say that it is partially 3D. Some would call it 2.5D, but we don''t like this term at all since it might be ambiguous. It uses pixel/fragment shaders to compute lighting strength and attenuation over surfaces that are based on actual 2D sprites.</p>', 0),
(62, 54, 88, 89, 'How can I make my own normal maps?', '<p>You can either use tools that convert bump maps (also kno<a href="http://www.katsbits.com/tutorials/textures/how-not-to-make-normal-maps-from-photos-or-images.php">w</a>n as height maps) to normal maps (many image editors such as Gimp or Photoshop have plug-ins for that), or you can make your models in a 3D object editor such as Blender or 3DS Max and use plug-ins to render their world-space normals.</p>\r\n<p>A few links:</p>\r\n<ul>\r\n<li><a href="http://www.asantee.net/ethanon/normalmap_tutorial/creating_normalmaps.pdf">Creating normal maps for 2D characters</a></li>\r\n<li><a href="http://www.katsbits.com/tutorials/textures/how-not-to-make-normal-maps-from-photos-or-images.php">How not to make normal maps from photos or images</a></li>\r\n<li><a href="http://www.bencloward.com/tutorials_normal_maps1.shtml">Creating and using normal maps</a></li>\r\n<li><a href="http://code.google.com/p/gimp-normalmap/">GIMP normal map plug-in</a></li>\r\n<li><a href="http://www.xnormal.net/">xNormal normalmapping tool</a></li>\r\n<li><a href="http://www.youtube.com/watch?v=66ulKGSkJVo">Normalmapping in 3ds max video tutorial</a></li>\r\n</ul>', 0),
(63, 54, 90, 91, 'What language should I learn and how much should I know to make my own games?', '<p>C/C++ programming skills are pretty much recommended. How much you should know depends on how complex you want your game to be. Game logic understanding is essential. If you have no idea what a game loop is, or how animation and vector math works, you should google it and understand it before using Ethanon Engine.</p>', 0),
(64, 54, 92, 93, ' Am I allowed to sell my games? Is it free?', '<p>Yes you are. Yes it is free.</p>', 0),
(65, 54, 94, 95, 'What EXE file should I distribute with my game?', '<p>You should distribute your game with the machine.exe file and your main.as (source-code) or the game.bin file (byte code file, in case you don''t want to share your source-code). When your game is finished, you can rename the machine.exe to whatever_the_name_of_your_game_is.exe.</p>', 0),
(66, 54, 96, 97, 'Can I protect my source code?', '<p>Yes. Just distribute your game with the game.bin instead of the main.as file. The game.bin file will be automatically generated every time you run the machine.exe and it finds the main.as source-code.</p>', 0),
(67, 54, 98, 99, 'Can I make on-line games with it?', '<p>Yes, but for now only if you know any C/C++ network library and write your own Ethanon Engine plug-in that binds the network functions and objects to AngelScript. Check the documentation to learn how to do that.</p>\r\n<p>There are plans for native network functions bindings and objects, but the priority right now is the cross-platform version.</p>', 0),
(68, 54, 100, 101, 'Is Ethanon Engine commercial?', '<p>It is free software, but it doesn''t mean that it is not commercial. Your game studio may request features and get personal or group training. Contact me for more info: andre.santee@gmail.com</p>', 0),
(77, 72, 108, 109, 'Joints', '<p>Joints are used to connect and constrain entity-bodies to each other. They can be used to create more complex systems such as ragdolls, teeters and pulleys. Some may provide limits so we can control the range of motion, some provide motors which can be used to drive the joint at a prescribed speed until a prescribed force or torque is exceeded.</p>\r\n<p>Box2D has several joint types that allow creating virtually anything. Until this moment, Ethanon Engine supports only the most common and most widely used type: <strong>revolute joints</strong>.</p>\r\n<p>It is not yet supported to declare and configure joints through UI in the Ethanon Editor, however, declaring them in the entity XML declaration is pretty straight forward.</p>\r\n<h3>Creating joints</h3>\r\n<p>Joints can be created following three steps:</p>\r\n<ol>\r\n<li>Declare joints in the <code>.ent</code> file</li>\r\n<li>Add connect entities to scene</li>\r\n<li>Resolve joints</li>\r\n</ol>\r\n<p>These steps are described below.</p>\r\n<h4>Declaring joints</h4>\r\n<p>To add a joint into an entity-body, open the entity <code>.ent</code> file as a text file with your favorite text editing app.</p>\r\n<p><a href="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/editing-ent-file.png" target="_blank"><img src="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/editing-ent-file.png" alt="" width="40%" height="40%" /></a></p>\r\n<div class="alert">\r\n<p><strong>Warnings</strong></p>\r\n<ul>\r\n<li>Remember that .ent files are encoded with UTF-16 (with BOM) in the Little-endian type, so make sure you''re a using a good text editor such as Notepad++, Sublime or TextMate.</li>\r\n<li>For safety reasons, close the entity you''re editing if you left it open in the Ethanon Editor.</li>\r\n<li>If the entity you are editing is already in a scene, don''t forget to use the "Update scene" feature in the Scene editor after your editing is done.</li>\r\n</ul>\r\n</div>\r\n<p>Joints are declared as ENML data inside the XML <code>&lt;Joints&gt;</code> tag, which is placed into the <code>&lt;Collision&gt;</code> tag. Example:</p>\r\n<pre><span style="color: #c0c0c0;">&lt;?xml version="1.0" ?&gt;\r\n&lt;Ethanon&gt;\r\n    &lt;Entity shape="1" sensor="0" bullet="0" fixedRotation="0" friction="0.9" density="1" restitution="0.1" gravityScale="1" castShadow="0" type="0" static="0" blendMode="0"&gt;\r\n        &lt;EmissiveColor r="0.3" g="0.3" b="0.3" a="0" /&gt;\r\n        &lt;Sprite&gt;bar2_contrast.png&lt;/Sprite&gt;\r\n        &lt;Particles /&gt;</span>\r\n       <span style="color: #808080;"> &lt;Collision&gt;</span>\r\n        <span style="color: #808080;">    &lt;Position x="0" y="0" z="0" /&gt;\r\n            &lt;Size x="256" y="64" z="1" /&gt;</span>\r\n            &lt;Joints&gt;<br />              <strong>// joint declaractions here</strong>\r\n            &lt;/Joints&gt;\r\n        <span style="color: #808080;">&lt;/Collision&gt;</span>\r\n       <span style="color: #c0c0c0;"> &lt;CustomData /&gt;\r\n    &lt;/Entity&gt;\r\n&lt;/Ethanon&gt;\r\n</span></pre>\r\n<p>One or more joints can be declared inside the <code>&lt;Joints&gt;</code> tag. Each joint will normally make reference to another entity that will be connect to this entity in some way.</p>\r\n<h4>Revolute joints</h4>\r\n<p>A revolute joint forces two bodies to share a common anchor point. The revolute joint has a single degree of freedom: the relative rotation of the two bodies. This is called the joint angle. To specify a revolute you need to provide another entity and the relative position for the two anchor points, for <code>A</code> and <code>B</code> (also called the <em>other entity</em>).</p>\r\n<p><img src="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/revolute-joint.png" alt="" width="20%" height="20%" /></p>\r\n<p>The enml-entity name that identifies a revolute joint is <code>revoluteJoint</code>:</p>\r\n<pre><span style="color: #808080;">        &lt;Collision&gt;</span>\r\n        <span style="color: #808080;">    &lt;Position x="0" y="0" z="0" /&gt;\r\n            &lt;Size x="256" y="64" z="1" /&gt;</span>\r\n            &lt;Joints&gt;<strong>\r\n            revoluteJoint\r\n            {\r\n              // places the anchor point at the top of this entity...\r\n              attachPointAX = 0.0;\r\n              attachPointAY =-1.0;\r\n\r\n              // and in the bottom-left corner of the other entity\r\n              attachPointBX =-1.0;\r\n              attachPointBY = 1.0;\r\n              otherEntityName = anchor_block.ent;\r\n            }</strong>\r\n            &lt;/Joints&gt;\r\n        <span style="color: #808080;">&lt;/Collision&gt;</span>\r\n</pre>\r\n<p>The declaration above will attach <em>this entity</em> and the <em>other entity</em> with a revolute joint.</p>\r\n<h4>Revolute joint optional properties</h4>\r\n<p>Some other joint properties can be set inside the ENML declaration, example:</p>\r\n<pre>revoluteJoint\r\n{\r\n  // places the anchor point at the top of this entity...\r\n  attachPointAX = 0.0;\r\n  attachPointAY =-1.0;\r\n\r\n  // and in the bottom-left corner of the other entity\r\n  attachPointBX =-1.0;\r\n  attachPointBY = 1.0;\r\n  otherEntityName = anchor_block.ent;\r\n  <strong>\r\n  enableLimit = true;\r\n  lowerAngle =-1.5;\r\n  upperAngle = 1.5;\r\n\r\n  enableMotor = true;\r\n  motorSpeed = 1.0;\r\n  maxMotorTorque = 10.0;\r\n</strong>}\r\n</pre>\r\n<p>More about them:</p>\r\n<table class="table table-bordered table-hover">\r\n<tbody>\r\n<tr>\r\n<td>Angle limits</td>\r\n<td>Forces the joint angle to remain between a lower and upper bound. The limit will apply as much torque as needed to make this happen. The limit range should include zero, otherwise the joint will lurch when the simulation begins.<br /><br /> Enable angle limits by setting the <code>enableLimits</code> attribute to <code>true</code> and set the real angle bounds as real number values to <code>upperAngle</code> to <code>lowerAngle</code> in <strong>radians</strong>.</td>\r\n</tr>\r\n<tr>\r\n<td>Motor speed</td>\r\n<td>A joint motor allows you to specify the joint speed (the time derivative of the angle). The speed can be negative or positive. You can provide a maximum torque for the joint motor. The joint motor will maintain the specified speed unless the required torque exceeds the specified maximum. The joint motor can be used to simulate friction. Just set the joint speed to zero, and set the maximum torque to some small, but significant value. The motor will try to prevent the joint from rotating, but will yield to a significant load.<br /><br /> Enable motor features in the current joint by setting the <code>enableMotor</code> flag to <code>true</code> and set <code>motorSpeed</code> and <code>maxMotorTorque</code> properties as real number values.</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>Check out our <a href="https://github.com/asantee/ethanon-samples/tree/master/intermediate/physics-joints">joints sample</a> for a more practical approach.</p>\r\n<h4>Declaring multiple joints</h4>\r\n<p>It is also possible to declare multiple joints for a single entity by simply appending the joint number to the <code>revoluteJoint</code> enml-entity name:</p>\r\n<pre>// car wheels declaration<br /><br />// left wheel<br />revoluteJoint0\r\n{\r\n  // places the first wheel at the left-bottom\r\n  attachPointAX =-1.0;\r\n  attachPointAY = 1.0;\r\n\r\n  // the anchor point in the wheel will be its center point\r\n  attachPointBX = 0.0;\r\n  attachPointBY = 0.0;\r\n  otherEntityName = vehicle_wheel0;\r\n}\r\n<br />// right wheel\r\nrevoluteJoint1\r\n{\r\n  // places the second wheel at the right-bottom\r\n  attachPointAX = 1.0;\r\n  attachPointAY = 1.0;\r\n\r\n  // the anchor point in the wheel will be its center point\r\n  attachPointBX = 0.0;\r\n  attachPointBY = 0.0;\r\n  otherEntityName = vehicle_wheel1;\r\n}</pre>\r\n<p>Notice that joint indexes for multiple joint declarations <strong>must</strong> start from <code>0</code> and progress its value in an one-by-one basis.</p>\r\n<h4>Resolving joints</h4>\r\n<p>A joint is considered resolved as soon as the engine finds the <em>other entity</em> and creates the <code>b2Joint</code> object that will attach them. As soon as a new scene is loaded and before the <code>onSceneUpdate</code> function is called, Ethanon Engine scans all entities and resolves all their joints automatically.</p>\r\n<p>If the engine can''t find the entity named after&nbsp;<code>otherEntityName</code> in its bucket or in any bucket around it, the <code>b2Joint</code> object is not created and the joint will be considered unresolved.</p>\r\n<p>When adding entities with joints dynamically, make sure you insert entity <code>B</code> into scene as well (the <em>other entity</em>, preferably near entity <code>A</code>), and then call the <code>ETHEntity::ResolveJoints</code> method:</p>\r\n<pre>ETHEntity@ entityA;\r\nAddEntity("car_skin.ent", carPos, entityA);\r\nAddEntity("wheel.ent", carPos, "vehicle_wheel0");\r\nAddEntity("wheel.ent", carPos, "vehicle_wheel1");\r\nentityA.ResolveJoints();\r\n</pre>\r\n<p>Notice that placing <em>other entities</em> in the same bucket as entity <code>A</code> makes the resolution process faster.</p>\r\n<h4>Dynamically connecting entities</h4>\r\n<p>It is also possible to select the other entity which will connect the holder of the joint by omitting the "otherEntityName" value in the joint declaration and setting as custom entity variable instead.</p>\r\n<p>Consider the following joint declared in <code>ship.ent</code>:</p>\r\n<pre>revoluteJoint\r\n{\r\n  // places the thruster joint on the center-bottom side of the ship \r\n  attachPointAX = 0.0;\r\n  attachPointAY = 1.0;\r\n\r\n  attachPointBX = 0.0;\r\n  attachPointBY = 0.0;\r\n}</pre>\r\n<p>Now, once the <code>ship.ent</code> entity is dynamically added to scene, set an <code>int</code> custom variable containing the ID of the other entity to be connected (make sure it is in the scene as well):</p>\r\n<pre>ETHEntity@ ship;\r\nAddEntity("ship.ent", pos, ship);\r\n\r\nETHEntity@ thruster;\r\nAddEntity("thruster.ent", pos, thruster);\r\n\r\n// considering you''ve named your joint as "revoluteJoint", it could also be "revoluteJoint0/1/2..."\r\n// the line below tells the engine to connect the ship to the entity of a given ID\r\nship.SetInt("revoluteJoint", thruster.GetID());\r\n\r\nship.ResolveJoints();\r\n</pre>\r\n<p>The variable name must match the joint name declared in the enml content.</p>\r\n<h4>Programming joints with script code</h4>\r\n<p>The <code>ETHRevoluteJoint</code> handle object allows dynamic control of joint properties. This object may be retrieved using the <code>ETHPhysicsController::GetRevoluteJoint</code> method. Sample:</p>\r\n<pre>void ETHCallback_sensor_with_two_joints(ETHEntity@ thisEntity)\r\n{\r\n	ETHPhysicsController@ controller = thisEntity.GetPhysicsController();\r\n	ETHRevoluteJoint@ joint0 = controller.GetRevoluteJoint(0);\r\n\r\n	ETHInput@ input = GetInputHandle();\r\n\r\n	// on right key press, increase motor speed by 5\r\n	if (input.GetKeyState(K_RIGHT) == KS_HIT)\r\n		joint0.SetMotorSpeed(joint0.GetJointSpeed() + 5.0f);\r\n\r\n	// on left key press, decrease motor speed by 5\r\n	if (input.GetKeyState(K_LEFT) == KS_HIT)\r\n		joint0.SetMotorSpeed(joint0.GetJointSpeed() - 5.0f);\r\n}\r\n</pre>\r\n<p>Check the <a href="../../api/class/15">ETHRevoluteJoint</a> page in the API reference for the full list of methods.</p>\r\n<div class="alert alert-info">Parts of this section were adapted from the <a href="http://box2d.org/manual.pdf">Box2D User Manual</a>.</div>', 1),
(71, 45, 63, 64, 'Optimizing tests by getting only entities nearby', '<p>When performing collision, intersection or proximity tests it is better to perform those tests, which commonly involve lots of processing, only on entities that are in the buckets nearby the object''s location. It avoids having to perform expensive tests on entities that are too far.</p>\r\n<p>Functions like&nbsp;<code>GetEntitiesAroundBucket</code>&nbsp;or&nbsp;<code>GetEntitiesAroundEntity</code>&nbsp;seek entities in the area. Sample:</p>\r\n<pre>vector2 bombPos(200.0f, 300.0f);\r\nvector2 bombBucket = GetBucket(bombPos);<br />\r\nETHEntityArray entities;\r\n\r\n// Copies into ''entities'' a handle to each entity contained in the buckets around ''bombBucket''\r\nGetEntitiesAroundBucket(bombBucket, entities);\r\n\r\nfor (uint t = 0; t &lt; entities.Size(); t++)\r\n    print(entities[t].GetEntityName() + " is around the bomb! Careful!");</pre>\r\n<p>&nbsp;</p>', 1);
INSERT INTO `ethpage` (`id`, `parent_id`, `lft`, `rght`, `name`, `description`, `show_menu`) VALUES
(72, 0, 103, 110, 'Physics simulation', '<p>Ethanon Engine uses Box2D for physics simulation. Enabling physics simulation on entities is easy, all you need to do is enable <span style="text-decoration: underline;">Collidable</span> in the Entity Editor and then choose the body shape in the <span style="text-decoration: underline;">Physics properties</span>:</p>\r\n<ul class="thumbnails">\r\n<li class="span4"><a class="thumbnail" href="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/entity-editor-physics.png" target="_blank"> <img src="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/entity-editor-physics.png" alt="" /> </a></li>\r\n</ul>\r\n<p>Ethanon engine will take the&nbsp;<span style="text-decoration: underline;">Collision box</span> relative Position and Size to scale Box2D''s collision body.</p>\r\n<p>Enabling a physics-managed body to an entity will transfer control over the entity position and angle to the physics engine. It means that, internally, a Box2D''s body (<code>b2Body</code>) is created and its simulation begins as soon as the entity is added to scene. Read the "Bodies" section in the <a href="http://box2d.org/documentation/" target="_blank">Box2D User Manual</a> to learn more about how bodies work.</p>\r\n<p><span style="text-decoration: underline;">Circle</span> body diameter will be computed as&nbsp;<code>(Box.size.x + Box.size.y) / 2</code>.</p>\r\n<p>Highlighted properties are described below.</p>\r\n<p>Boolean properties:</p>\r\n<ul>\r\n<li><span style="text-decoration: underline;">Is sensor</span>: highlight this option to flag this entity-body as a sensor. A sensor entity detects collision but does not produce a response (collision).</li>\r\n<li><span style="text-decoration: underline;">Fixed rotation</span>: toggles the fixed rotation. Entity-bodies such as characters may have this characteristic. Such a body should not rotate, even under load.</li>\r\n<li><span style="text-decoration: underline;">Is bullet</span>:&nbsp;fast moving objects in Box2D can be labeled as bullets. Bullets will perform&nbsp;<em>continuous collision detection</em>&nbsp;with both static and dynamic bodies. You should decide what bodies should be bullets based on your game design.</li>\r\n</ul>\r\n<p>Floating point values:</p>\r\n<ul>\r\n<li><span style="text-decoration: underline;">Density</span>: body density. Usually ranges between <code>0.0</code> and <code>1.0</code>. Dynamic entities must have density greater than <code>0.0</code> to behave properly</li>\r\n<li><span style="text-decoration: underline;">Friction</span>: surface friction. <code>0.0</code> means completely slippery and <code>1.0</code> produces more friction than a crude piece of rock (just an example)</li>\r\n<li><span style="text-decoration: underline;">Restitution</span>: describes how much energy collisions against this entity will reflect. <code>0.0</code> means no bouncing at all and <code>1.0</code> means full force bouncing, which usually can''t be seen in nature</li>\r\n<li><span style="text-decoration: underline;">Gravity scale</span>: gravity intensity over this entity. Usually <code>1.0</code></li>\r\n</ul>\r\n<p>Ethanon engine offers <a href="../../api/functions/11">several functions</a> that may be used to control physics simulation global states.</p>\r\n<h4>Static and dynamic bodies</h4>\r\n<p>Physics-simulated <span style="text-decoration: underline;">Static</span> entities won''t be affected by the force or gravity and it won''t react to impulses and collisions. Setting an entity as Static is useful to create static platforms on side scrolling adventure games.</p>\r\n<p>The <a href="http://box2d.org/documentation/">Box2D User Manual</a> states that <em>"A static body does not move under simulation and behaves as if it has infinite mass. Internally, Box2D stores zero for the mass and the inverse mass. Static bodies can be moved manually by the user. A static body has zero velocity. Static bodies do not collide with other static bodies."</em></p>\r\n<p>Entitiy-bodies are automatically assigned as dynamic or static according to its&nbsp;<a href="../../manual/17">entity state</a>.</p>', 1),
(73, 72, 106, 107, 'Contact callbacks', '<p>Contact callbacks are useful to retrieve more detailed data from entity body contacts that happen in the Box2D simulator. This kind of entity callback is very similar to <a href="../../manual/32">standard entity callback functions</a>, they must be <code>void</code>, and include the prefix <code>ETH<em>&lt;contact-event&gt;</em>Callback_</code> followed by the entity name. There are three kinds of contact callback, each one can be used to gather data from a specific contact event:</p>\r\n<h5>Begin Contact event</h5>\r\n<p>This is called every time another simulated entity-body begins to overlap the entity to which the callback function is assigned. This is called for sensors and non-sensors. Example:</p>\r\n<pre>void ETHBeginContactCallback_tnt_barrel(\r\n	ETHEntity@ thisEntity,\r\n	ETHEntity@ other,\r\n	vector2 contactPointA,\r\n	vector2 contactPointB,\r\n	vector2 contactNormal)\r\n{\r\n	if (other.GetEntityName() == "bullet.ent")\r\n	{\r\n		// a ''bullet.ent'' hit the TNT barrel, that must result in an explosion\r\n		explodeMyBarrel(thisEntity);\r\n	}\r\n}</pre>\r\n<h5>Pre Solve Contact event</h5>\r\n<p>This is called after collision detection, but before collision resolution. This gives you a chance to disable the contact based on the current configuration. For example, you can implement a one-sided platform using this callback and calling <code>DisableContact</code>. The contact will be re-enabled each time through collision processing, so you will need to disable the contact every time-step. The pre-solve event may be fired multiple times per time step per contact due to continuous collision detection. Example:</p>\r\n<pre>void ETHPreSolveContactCallback_one_sided_platform(\r\n	ETHEntity@ thisEntity,\r\n	ETHEntity@ other,\r\n	vector2 contactPointA,\r\n	vector2 contactPointB,\r\n	vector2 contactNormal)\r\n{\r\n	ETHPhysicsController@ controller = other.GetPhysicsController();\r\n	if (controller.GetLinearVelocity().y &lt; -0.5f)\r\n		DisableContact();\r\n}</pre>\r\n<p>The example above enables single-sided collision for every entity named <code>one_sided_platform</code> or <code>one_sided_platform.ent</code>.</p>\r\n<h5>End Contact event</h5>\r\n<p>This is called every time another entity-body ceases to overlap the entity to which this callback function is assigned to. This is called for sensors and non-sensors.</p>\r\n<pre>void ETHEndContactCallback_platform(\r\n	ETHEntity@ thisEntity,\r\n	ETHEntity@ other,\r\n	vector2 contactPointA,\r\n	vector2 contactPointB,\r\n	vector2 contactNormal)\r\n{\r\n	if (other.GetEntityName() == "character.ent")\r\n		print("Our character is no longer stepping on this platform!");\r\n}</pre>\r\n<h5>Important remarks</h5>\r\n<ul>\r\n<li>Do not delete entities from inside contact callback functions. If you need to remove an entity &nbsp;after a contact event, use <a href="../../manual/36">custom data</a> to flag the entity and destroy it from its <a href="../../manual/32">regular entity callback</a> function.</li>\r\n<li>Contact callback functions may return up to two intersection points, in world space, and a normalized vector that describes the surface normal for the contact.</li>\r\n<li>The entity reference <code>other</code> will always point to the other entity object that triggered the contact event.</li>\r\n<li>Both <code>thisEntity</code> and <code>other</code> must have their physics simulation properties enabled in the Entity Editor in order to enable contact callback events. <a href="../../manual/72">More about that.</a></li>\r\n</ul>', 1),
(74, 72, 104, 105, 'Manipulating entity-bodies ', '<p>Once the entity is assigned as a physics-simulated body, the engine core transfers entity management powers to the Box2D simulator. For this reason, every manipulation procedure which involves moving and rotating the entity, must pass through the simulator engine.</p>\r\n<p>We can move basic non-physics-managed entities by simply changing their current position, but for physics-managed entities it is necessary to apply impulses or set linear velocities if we want to move entities around.</p>\r\n<p>The <code>ETHPhysicsController@</code> reference object encapsulates a <code>b2Body</code> object which is used to manipulate body properties.</p>\r\n<p>Retrieving the physics controller of an entity is very simple, all we need to do is call <code>ETHEntity::GetPhysicsController</code>:</p>\r\n<pre>void ETHEntityCallback_character(ETHEntity@ thisEntity)\r\n{\r\n	ETHPhysicsController@ controller = thisEntity.GetPhysicsController();\r\n\r\n	// if the returned value is null, it means thisEntity doesn''t have a physics body\r\n	if (controller is null)\r\n		return;\r\n\r\n	// move the character to the right\r\n	controller.SetLinearVelocity(vector2(4.0f, 0.0f));\r\n}\r\n</pre>\r\n<p>Browse all <code>ETHPhysicsController</code> methods in the <a href="../api/class/14">API reference pages</a>.</p>', 1),
(75, 0, 111, 122, 'Advanced topics', '<p>This section covers some miscellaneous topics involving more advanced development techniques with Ethanon Engine.</p>', 1),
(76, 75, 112, 113, 'Handling different screen resolutions with global scale', '<p>Ethanon Engine games aim multiple platforms, from smartphones and tablets to desktop. For that reason, games should be able to run on an infinity of screen resolutions and aspects.</p>\r\n<p>By default, Ethanon uses one-by-one pixel scale over scene sizes. For example, if we''re running our game on&nbsp;<code>1280 x 720</code> pixels resolution window, an entity which is <code>360</code> pixels tall will fill half of screen height by default.</p>\r\n<p>If the entity mentioned above is really supposed to have half the size of the screen height, and were only running the game on that <code>1280 x 720</code> pixels window, we''re fine. But what if we want that <code>360</code> pixels tall entity to always fill half of any screen, no matter what that resolution it is?</p>\r\n<p>Well, its easy, we could simply get the actual screen height and do some math to find how much we should scale that entity in scene, in order to make it fill the exact amount of space we''re expecting as if the screen size was <code>1280 x 720</code>.</p>\r\n<p>Easy, right? Actually, not so much. Scaling it manually will force us to scale every entity in scene using the same scale factor, and not only their sizes but also their actual position in space, since it must expand the entire scene. Not to mention their motion events should also consider a different scale.</p>\r\n<h3>Global scaling system</h3>\r\n<p>The native global scaling system in Ethanon Engine helps us determine how much the entire scene should be scaled to fit that <code>1280 x 720</code> screen (or whatever the user chooses as <em>best</em> resolution) and also automatically scales every scene loaded, and entities dynamically added, as well as every motion procedure including physics simulation.</p>\r\n<h4>Choosing the <em>best</em> screen size</h4>\r\n<p>All we need to do is choose a <em>best</em> screen height and the engine will automatically set a new scale factor. Setting the best screen resolution is easy:</p>\r\n<pre>void main()\r\n{\r\n    <strong>SetFixedHeight(720);</strong>\r\n    LoadScene("scenes/my_scene.esc");\r\n\r\n    print("The new scale factor is: " + <strong>GetScale()</strong>);\r\n}\r\n</pre>\r\n<p>The sample above sets the global scale factor to <code>screenHeight / 720</code>. By doing that, the engine will automatically scale every entity added after the call using that scale factor. For example, if our <code>360</code> pixels tall entity is in a screen size which is <code>480</code> pixels tall, its in-scene height will now be <code>240</code>&nbsp;(half of&nbsp;<span style="font-family: monospace;">480</span>).</p>\r\n<p>It is recommended to set global scaling factor inside the <code>main</code> function and before loading the first scene. Once the fixed global scale factor is set, it doesn''t need to be set again, it persists as long as the application is running and will be applied to every scene and every entity.</p>\r\n<p>All <code>AddEntity</code> functions will automatically scale entities according to the global scale factor before adding them to scene.</p>\r\n<h4>Moving entities in a scaled scene</h4>\r\n<p>Operations such as <code>AddToCameraPos</code>, <code>ETHEntity::AddToPosition</code>, <code>SetGravity</code>, <code>ETHPhysicsController::SetLinearVelocity</code>, among other relative positioning methods, will automatically consider the global scale factor, so the programmer shouldn''t worry about that while programming the gameplay.</p>\r\n<div class="alert alert-block">\r\n<p><strong>Warning!</strong> Operations involving absolute position coordinates, such as <code>ETHEntity::SetPosition</code> or <code>SetCameraPos</code> won''t scale position values passed as parameter, that is to say that the global scaling system will only automatically scale relative positioning operations, and scenes do get larger or smaller depending on the scale factor.</p>\r\n</div>\r\n<h4>Handling screen resizes</h4>\r\n<p><strong>To-do:</strong> cover automatic rescaling from <strong>v0.9.6</strong> and above...</p>\r\n<h4>Final considerations</h4>\r\n<p>With the global scaling system, developers may choose a best screen resolution and compose scenes as if the game would always run on that specific screen, and the global scaling system will help making sure the game will run seamlessly on different screen sizes and aspects.</p>\r\n<p>Optionally, we may use screen width to compute global scale factor with&nbsp;<code>SetFixedWidth</code> function instead, which may work better on games that run on portrait mode. Check the API Reference pages for more <a href="../../api/functions/10">Global scaling</a> utility functions.</p>\r\n<h3>Scaling sprites and texts</h3>\r\n<p>The global scaling system won''t scale sprites and text drawing operations, because sometimes we do not want our UI being scaled the same way the game scene is. If you want to scale sprites with the global scale system, you can do something like this:</p>\r\n<pre>void drawScaledSprite(string name, vector2 pos)\r\n{\r\n	const vector2 size(GetFrameSize(name) * <strong>GetScale()</strong>);\r\n	DrawShapedSprite(name, pos, size, 0xFFFFFFFF);\r\n}\r\n</pre>', 1),
(78, 75, 114, 119, 'Running on Android and iOS', '<p>Ethanon engine is designed to run its projects seamlessly across multiple platforms. Running Ethanon games on mobile platforms requires specific third-party software. Also, some basic understanding on Android or iOS development is highly recommended.</p>\r\n<p>All project files and source code glue required to start the Ethanon machine on mobile platforms are in the&nbsp;<a href="https://github.com/asantee/ethanon/">Git</a>&nbsp;folders and their specific locations will be listed below. <strong>No additional programming is necessary to run the project and deploy it to the target device</strong>. On the other hand, developers will often like to customize the platform-specific code to fit all their needs, in this case some extra knowledge is necessary.</p>\r\n<p>This section provides some guidelines on how to run your game on <strong>Android</strong> (tablets and smartphones) and <strong>iOS</strong> (iPhone, iPad and iPod Touch) devices.</p>\r\n<h3>Getting necessary Ethanon sources</h3>\r\n<p>Before we start, we need to download the Ethanon project files from the repository. Download the entire repository either by <a href="https://github.com/asantee/ethanon" target="_blank">cloning</a> it to your computer or by downloading the full&nbsp;<a href="https://github.com/asantee/ethanon/archive/master.zip" target="_blank">zip package</a> generated by GitHub.</p>\r\n<h3>Android</h3>\r\n<p>Ethanon engine runs on Android 2.2 and above, however it uses&nbsp;Android SDK 3.2 (android-13) as base SDK.</p>\r\n<p>Software needed:</p>\r\n<ul>\r\n<li><a href="http://www.eclipse.org/downloads/" target="_blank">Eclipse</a>&nbsp;IDE for Java Developers</li>\r\n<li><a href="http://developer.android.com/sdk/index.html" target="_blank">Android SDK</a> (instructions <a href="http://developer.android.com/sdk/installing/index.html" target="_blank">here</a>)&nbsp;</li>\r\n</ul>\r\n<p>Download the latest version of the Ethanon Android machine (<code>libApplication.so</code>) from our <a href="http://ethanonengine.com/downloads/" target="_blank">downloads</a>&nbsp;section.</p>\r\n<p>The <span style="text-decoration: underline;">Ethanon project for Android</span> is in <a href="https://github.com/asantee/ethanon/blob/master/toolkit/Source/src/gs2d/projects/Android/Ethanon/" target="_blank">ethanon/toolkit/Source/src/gs2d/projects/Android/Ethanon/</a></p>\r\n<p>Make sure you have Android SDK, Eclipse and the Android ADT plug-in installed and you have&nbsp;<span style="text-decoration: underline;">Android SDK 3.2 (android-13)</span> downloaded from the Android SDK Manager.</p>\r\n<ol>\r\n<li>Import the&nbsp;<span style="text-decoration: underline;">Ethanon project for Android</span>&nbsp;into Eclipse</li>\r\n<li>Move your Ethanon project to the&nbsp;<code>Ethanon/assets/</code> directory (all Ethanon project files except <code>machine.exe</code>, <code>*.dll</code>, etc.)</li>\r\n<li>Your main.angelscript file must be in <code>Ethanon/assets/main.angelscript</code></li>\r\n<li>Copy the <code>libApplication.so</code> file to <code>Ethanon/libs/armeabi/</code>, or compile the native code of the project with <code>ndk-build</code></li>\r\n</ol>\r\n<p>All logs and the&nbsp;<code>android_game.bin</code>&nbsp;file containing compiled AngelScript byte-code for Android&nbsp;are sent to <code>&lt;external-storage-path&gt;/.ethanon/</code>.</p>\r\n<p>Deploy the project to Android Emulator or an Android Device using the&nbsp;<span style="text-decoration: underline;">Run as Android Application</span>&nbsp;functionality just like any Android application project.</p>\r\n<div class="alert"><strong>Warning!</strong> The Android Emulator available in the Android SDK doesn''t use to handle OpenGL ES 2.0 well. It is recommended to test your games on an actual device.</div>\r\n<h3>iOS</h3>\r\n<p>The iOS deployment process requires a Mac computer with an up-to-date OS X system.</p>\r\n<p>The Xcode project that builds and runs Ethanon machine on iOS is in <a href="https://github.com/asantee/ethanon/tree/master/toolkit/Source/projects/xcode/iOS" target="_blank">ethanon/toolkit/Source/projects/xcode/iOS/</a>.</p>\r\n<p>Software needed:</p>\r\n<ul>\r\n<li><a href="https://itunes.apple.com/us/app/xcode/id497799835?mt=12" target="_blank">Xcode</a></li>\r\n<li><a href="http://7zx.en.softonic.com/mac" target="_blank">7zX</a> (or any app that unpacks *.7z files)</li>\r\n</ul>\r\n<p>Now follow the steps:</p>\r\n<ol>\r\n<li>Extract <code>ethanon/toolkit/Source/src/gs2d/vendors.7z</code> because we will need boost headers that are packed there</li>\r\n<li>Open the Xcode project&nbsp;<code>ethanon/toolkit/Source/projects/xcode/iOS/Ethanon.xcodeproj</code></li>\r\n<li>Copy both folders<br /><code>ethanon/toolkit/Source/src/gs2d/projects/Android/Ethanon/assets/data/</code> and <code>ethanon/toolkit/Source/src/gs2d/projects/Android/Ethanon/assets/shaders/</code><br />into <code>ethanon/toolkit/Source/projects/xcode/iOS/assets/</code><br />These are mostly shader files used by the base rendering library and Ethanon lighting shaders</li>\r\n<li>Move your Ethanon project into&nbsp;<code>ethanon/toolkit/Source/projects/xcode/iOS/assets/</code></li>\r\n<li>Click Run</li>\r\n</ol>\r\n<div class="alert alert-block">\r\n<p><strong>Warning!</strong> Shadows are not available on OpenGL ES 2.0 implementations (Android and iOS)</p>\r\n</div>', 1),
(79, 75, 120, 121, 'Resource management and loading screens', '<p>Video and audio resource management is a crucial part of game design. Correctly deciding how and when to load sprites, fonts and sound effects can optimize game load times, reduce memory usage and prevent gameplay lag.</p>\r\n<h3>Managing graphic resources</h3>\r\n<p>Sprites, normal maps, gloss maps, halo and particle bitmaps are all graphic resources that must be loaded from files before being used. By default, Ethanon loads graphic resources on demand, in other words, it automatically prepares the texture from the file only when it needs to draw it on screen (when the entity enters the visible bucket area).</p>\r\n<p>On-demand resource loading is good for its memory friendly characteristics, however, it holds the game update until the texture loading ends, and it might produce undesired gameplay artifacts, which may be avoided by pre-loading some or all resources.</p>\r\n<h4>Pre-loading textures</h4>\r\n<p>All or some of the graphic resources that are going to be used by the scene can be pre-loaded using the <code>LoadSprite</code> function. Example:</p>\r\n<pre>void onSceneCreated()\r\n{\r\n    LoadSprite("entities/boss_entity.png");\r\n    LoadSprite("entities/normalmaps/boss_entity.png");\r\n    LoadSprite("sprites/boss_avatar_icon.png");\r\n}</pre>\r\n<p>When this function loads a bitmap that is going to be used by an entity, the engine automatically detects that the sprite has already been loaded and takes a reference to it instead.</p>\r\n<p>Notice that Ethanon doesn''t like bitmaps with duplicate names, e.g:<br /><br /> <code>entities/<span style="text-decoration: line-through;">boss.png</span></code>;<br /> <code>entities/normalmaps/<span style="text-decoration: line-through;">boss.png</span></code>;<br /> <code>sprites/<span style="text-decoration: line-through;">boss.png</span></code>,<br /> <br />prefer naming them as<br /><br /> <code>entities/boss_entity.png</code>;<br /> <code>entities/normalmaps/boss_normal.png</code>;<br /> <code>sprites/boss_avatar_icon.png</code>&nbsp;instead.</p>\r\n<p>As in the example above, pre-loading graphic resources inside onSceneCreated function will prevent lag when the level boss appears. Loading every resource used in the level before starting gameplay dynamics is good to minimize lag. But its drawback is that it takes some time to do all that loading, making the player wait.</p>\r\n<p>It is a good practice to pre-load only critical resources that shouldn''t lag the game on critical parts of the gameplay.</p>\r\n<h4>Animated loading screens</h4>\r\n<p>Sometimes pre-loading a huge amount of resources at once is a better way to go, but it will force the player to wait a few seconds until everything is ready. This is unavoidable if we want to assure that the game won''t suffer from on-demand loading lag. However, we can make animated loading screens (with or without progress bars) to provide a less-painful waiting experience.</p>\r\n<p>Loading screens can be achieved by creating a scene whose onSceneUpdate callback function loads a small number of resources per frame, while updates each step of the loading animation:</p>\r\n<pre>string[] resourcesToLoad;\r\nuint resourceIterator;\r\n\r\nvoid main()\r\n{\r\n    LoadScene("scenes/loading_screen.esc", "prepareLoadingScene", "updateLoadingScene");\r\n}\r\n\r\nvoid prepareLoadingScene()\r\n{\r\n<span style="color: #888888;"><em>    fill resourcesToLoad array...</em>\r\n</span>\r\n    resourceIterator = 0;\r\n}\r\n\r\nvoid updateLoadingScene()\r\n{\r\n<span style="color: #888888;">    <em>update loading animation, draw progress bar etc ...</em>\r\n</span>\r\n    LoadSprite(resourcesToLoad[resourceIterator++]);\r\n\r\n    // if it just loaded the last resource in the array, start the game\r\n    if (resourceIterator == resourcesToLoad.length())\r\n        LoadScene("scenes/my_game_scene.esc");\r\n}</pre>\r\n<p>With this technique we can take any element of the gameplay concept,&nbsp;and create clever custom loading screens, like in Magic Portals (game powered by Ethanon Engine):</p>\r\n<p><img src="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/loading-screen.png" alt="" width="25%" height="25%" /></p>\r\n<p>In the example above, the mage walks towards the portal, entering it and vanishing as soon as the last resource is loaded. Easy to make and more enjoyable than a static "Now loading..." message.</p>\r\n<div class="alert">\r\n<p><strong>Reminder!</strong> <em><strong>Persistent resources</strong></em> must be enabled in order to the loading scene work correctly. This feature is explained below.</p>\r\n</div>\r\n<h3>Managing audio resources</h3>\r\n<p>Unlike graphic resources, audio resources aren''t automatically loaded on-demand. Instead, it is necessary to pre-load them before using:</p>\r\n<pre>void onSceneCreated()\r\n{\r\n    LoadSoundEffect("soundfx/boss_appear.mp3");\r\n    LoadSoundEffect("soundfx/boss_die.mp3");\r\n\r\n    LoadMusic("soundfx/boss_soundtrack.mp3");\r\n    PlaySample("soundfx/boss_soundtrack.mp3");\r\n}</pre>\r\n<p>On same platforms, like Android, buffered audio resources (buffered means it is not streamed, like sound effects) are loaded on another thread while the game thread is still running normally. So make sure you load all audio resources at least three seconds before using them. Trying to play unfinished sound samples will cause the playback to fail.</p>\r\n<h3>Persistent resources</h3>\r\n<p>By default, every time a scene load request takes place, all graphic and buffered audio resources are destroyed. This is memory-friendly but, if the next scene uses most of the resources that were already loaded for the previous scene (e.g.: going from <code>forest_level_1.esc</code> to <code>forest_level_2.esc</code>), it will result in unnecessary CPU work and therefore unnecessary waiting time. This can be solved by enabling <strong><em>Persistent Resources</em></strong>:</p>\r\n<pre>void main()\r\n{\r\n    <strong>SetPersistentResources(true)</strong>;\r\n}</pre>\r\n<p>Enabling persistent resources will cause the scene to keep graphic and buffered audio resources even when another scene is loaded. It will drastically reduce load times, on the other hand, it may also increase memory usage by keeping resources that are no longer used.</p>\r\n<h4>Releasing resources</h4>\r\n<p>When using persistent resources, the developer is responsible for keeping the game from using too much system memory. For example, all forest scenarios will probably use a set of "green" assets for entities that are going to be used on most forest scenarios, these can persist as long as we''re on the "forest world". But will no longer be needed as the player enters the "castle world", which will use unique tile assets.</p>\r\n<p>The <code>ReleaseResources</code> function can be used to clear all loaded resources when necessary:</p>\r\n<pre>// releases current resources\r\nReleaseResources();</pre>\r\n<p>This function should be placed on strategic places when a huge amount of new resources needs to be loaded and another set of resources will no loger be necessary.</p>\r\n<h3>onResume callback function</h3>\r\n<p>On some platforms, like Android, every time the game window is hidden (e.g. the user presses the Home button or receives a call), it won''t finish the application. Instead, it will simply pause it, unless the operating system needs to free some memory in order to run another application. Not closing the game application allows the user to resume the game from exactly the same point it had been interrupted.</p>\r\n<p>Some times, when the game is paused by some external force, its window loses its graphic context and, for safety reasons, it releases all graphic and audio resources loaded so far. And&nbsp;when the game is resumed, Ethanon Engine runs a special type of scene callback function called <strong>onResume</strong>, where all resources must be pre-loaded.</p>\r\n<p>As well as onSceneCreated and onSceneUpdate callback functions, the onResume function can also be set as a <code>LoadScene</code> argument:</p>\r\n<pre>void main()\r\n{\r\n    LoadScene("scenes/castle.esc", "onSceneCreated", "onSceneUpdate", "onResume");\r\n}\r\n\r\nvoid onResume()\r\n{\r\n    // reload all audio and graphic resources here\r\n}\r\n\r\n...\r\n...</pre>\r\n<p>When graphic resources aren''t pre-loaded inside the onResume function, Ethanon will load them on-demand, however, since audio resources aren''t loaded on-demand, they must be loaded again.</p>', 1),
(81, 78, 115, 116, 'Native command listeners', '<p>Eventually, developers may need to perform platform-specific operations, such as controlling ads (showing and hiding), connecting the game to an on-line source in order to retrieve and exchange data, and much more. For this purpose, Ethanon Engine provides interfaces called <strong>Native Command Listeners</strong> that allow developers to send custom string-based commands from the game script (AngelScript) to the platform native code, like Java on Android, Objective-C on iOS/OSX or C++ on Windows and OSX.</p>\r\n<h3>Forwarding custom commands</h3>\r\n<p>The function <code><a href="../../api/function/128">ForwardCommand</a></code> can be used from the inside of the AngelScript''s gameplay code to forward any string-based command, e.g.:</p>\r\n<pre>ForwardCommand("enable_ads");</pre>\r\n<pre>ForwardCommand("disable_ads");</pre>\r\n<pre>ForwardCommand("connect_to_facebook");</pre>\r\n<pre>ForwardCommand("submit_score " + score);</pre>\r\n<p>iOS and Android implementations already parse and execute some basic commands by default:</p>\r\n<pre>ForwardCommand("upen_url http://ethanonengine.com/"); // opens the Ethanon website\r\nForwardCommand("vibrate 100"); // vibrates the device during 100 ms</pre>\r\n<p>In order to read custom commands, the developer must implement a <strong>native command listener</strong> on each platform.</p>\r\n<h3>Listening to custom commands</h3>\r\n<p>Once forwarded by the <code>ForwardCommand</code> function, each string is sent to the local command listener object, so the developer may parse, identify and then perform anything he needs. Normally it happens in a place where he has access to the entire platform API.</p>\r\n<p>If multiple commands are sent in a single game frame, they come bundled in a single string separated by <code>''\\n''</code>.</p>\r\n<h4>Android</h4>\r\n<p>On Android, the standard Ethanon project includes the Java interface <code>net.asantee.gs2d.io.NativeCommandListener</code> that, once registered to the main Ethanon Activity, calls its <code>parseAndExecuteCommands</code> passing a list of commands separated by <code>''\\n''</code>:</p>\r\n<pre>package net.asantee.gs2d.io;\r\n\r\npublic interface NativeCommandListener {\r\n	public void parseAndExecuteCommands(String commands);\r\n}</pre>\r\n<p>Let''s create a simple command listener that submits high scores to an on-line server. On the AngelScript side:</p>\r\n<pre>uint points = 9999;\r\nForwardCommand("submit_score " + points);</pre>\r\n<p>On the Java side:</p>\r\n<pre>package com.mygame.io;\r\n\r\nimport net.asantee.gs2d.io\r\n\r\npublic class MyGameCommandListener implements NativeCommandListener {\r\n	\r\n	public void parseAndExecuteCommands(String commands) {\r\n		if (!commands.equals("")) {\r\n			String[] commandArray = commands.split("\\n");\r\n			for (int t = 0; t &lt; commandArray.length; t++) {\r\n				executeCommand(commandArray[t]);\r\n			}\r\n		}\r\n	}\r\n\r\n	private void executeCommand(String cmd) {\r\n		String[] words = cmd.split(" ");\r\n		if (words[0].equals("submit_score")) {\r\n			MyGame.submitScore(Integer.parseInt(words[1]));\r\n		}\r\n	}\r\n\r\n}</pre>\r\n<p>Finally, we must register our listener to the Ethanon activity. The <code>net.asantee.ethanon.EthanonActivity</code> class inherits the <code>void insertCommandListener(NativeCommandListener commandListener)</code> method which must be used (preferably in the <code>onCreate</code> method) in order to register our custom command listener inside your activity''s <code>onStart</code> method:</p>\r\n<pre>public void onStart() {\r\n	super.onStart();\r\n	insertCommandListener(new MyGameCommandListener());\r\n}</pre>\r\n<p>After <code>MyGameCommandListener</code> is inserted, Ethanon will automatically call our custom <code>parseAndExecuteCommands</code> every time our game receives commands.</p>\r\n<div class="alert alert-warning">Notice that custom listeners also receive messages sent by the engine''s runtime processes.</div>\r\n<h4>iOS</h4>\r\n<p>The C++ class <code>Platform::NativeCommandListener</code> declared in the source file <code>ethanon/toolkit/Source/src/gs2d/src/Platform/NativeCommandListener.h</code> provides an interface that, once registered, listens to every custom command sent by the game code, where the developer can use the Objective-C-based iOS frameworks and do anything an iOS app can do:</p>\r\n<pre>namespace Platform {\r\n\r\nclass NativeCommandListener\r\n{\r\npublic:\r\n	virtual void ParseAndExecuteCommands(const gs2d::str_type::string&amp; commands) = 0;\r\n};\r\n\r\n} // namespace Platform</pre>\r\n<p>The <code>Platform::NativeCommandListener</code> behaves like the Java''s <code>NativeCommandListener</code> on Android. Here is a small sample:</p>\r\n<pre>class MyGameCommmandListener : public Platform::NativeCommandListener\r\n{\r\n	void ExecuteCommand(const gs2d::str_type::string&amp; commandLine);\r\n\r\npublic:\r\n	void ParseAndExecuteCommands(const gs2d::str_type::string&amp; commands);\r\n};</pre>\r\n<pre>void MyGameCommmandListener::ParseAndExecuteCommands(const gs2d::str_type::string&amp; commands)\r\n{\r\n	std::vector&lt;gs2d::str_type::string&gt; commandLines = Platform::SplitString(commands, GS_L("\\n"));\r\n	for (std::size_t t = 0; t &lt; commandLines.size(); t++)\r\n	{\r\n		ExecuteCommand(commandLines[t]);\r\n	}\r\n}\r\n\r\nvoid MyGameCommmandListener::ExecuteCommand(const gs2d::str_type::string &amp;commandLine)\r\n{\r\n	NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];\r\n\r\n	NSString* line = [NSString stringWithUTF8String:commandLine.c_str()];\r\n\r\n	NSArray *words = [line componentsSeparatedByString:@" "];\r\n	NSString* word0 = [words objectAtIndex:0];\r\n	if ([word0 isEqual:@"submit_score"])\r\n	{\r\n		NSString* word1 = [words objectAtIndex:1];\r\n\r\n		const double score = [word1 doubleValue];\r\n		MyGameAPI.SubmitScore(score);\r\n	}\r\n\r\n	[pool release];\r\n}</pre>\r\n<p>For a more concrete working sample, take a look at the <code>IOSNativeCommandListener.h</code> and <code>IOSNativeCommandListener.mm</code> source files in the iOS Xcode project.</p>\r\n<p>To register iOS''s listener use the <code>GLView<code>''s method <code>insertCommandListener</code>:</code></code></p>\r\n<pre>[self insertCommandListener:(Platform::NativeCommandListenerPtr(new MyGameCommmandListener))];</pre>\r\n<p>The <code>GLView</code> is an Objective-C interface located in the iOS Xcode project.</p>', 1),
(80, 6, 2, 9, 'Quick start guide', '<p>Start with Ethanon by making the "hello world" program of game development: <em>that</em> great Moving-spaceship demo.</p>\r\n<div class="well well-small"><a href="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/quick-start-guide/00.x.png"><img src="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/quick-start-guide/00.x.png" alt="" /></a></div>\r\n<h2>How it works <small>create entities, script them, and go!</small></h2>\r\n<p>Game development process with Ethanon Engine follows four basic steps:</p>\r\n<ol>\r\n<li>Create your game entities (such as spaceships, asteroids and characters)</li>\r\n<li>Place your entities into a game scene</li>\r\n<li>Define each entity''s behavior with scripting code</li>\r\n<li>Run your game!</li>\r\n</ol>\r\n<p>Here''s a step-by-step beginners guide.</p>\r\n<h2>Installing Ethanon <small>setup ethanon tools</small></h2>\r\n<h3>Windows</h3>\r\n<p>Download the <a href="http://ethanonengine.com/downloads/" target="_blank">Windows SDK</a> and install it. Make sure you''re running as system administrator.</p>\r\n<p>The install wizard copies <strong>Ethanon Editor</strong>, which is used to create and edit game entities, scenes and particle effects. It also comes with&nbsp;<strong>Ethanon Script Editor</strong> (SciTE), the free text editor used to write game scripts.</p>\r\n<h3>Mac OS X</h3>\r\n<p>Download the <a href="http://ethanonengine.com/downloads/" target="_blank">Mac OS X SDK</a> and copy both <em>Ethanon Editor.app</em> and <em>machine.app</em> to your <code>/Applications</code> directory. You will need Sublime Text in order to run your game directly from the script editor (Sublime Text Plugin installation instructions inside the downloadable package).</p>\r\n<p>In order to distribute your game for Mac OS X simply make a copy of <em>machine.app</em> and rename it as you wish, then move all your game content into the <code>name-of-your-game.app/Contents/Resources/assets</code> folder. You can also customize your app icon by changing the&nbsp;<code>name-of-your-game.app/Contents/Resources/icon.icns</code> file.</p>\r\n<h3>Sublime plug-in <small>alternative (and better) code editor</small></h3>\r\n<p>In case you are not on Windows, or the current free Ethanon Script Editor (SciTE) is simply not good enough for you, you can always use the awesome <a href="http://www.sublimetext.com/" target="_blank">Sublime Text</a> for syntax highlighting and Build shortcuts. You can get the Ethanon plug-in for Sublime from our <strong><a href="http://ethanonengine.com/downloads/">downloads section</a></strong>, instructions are included in the downloadable package.</p>\r\n<p>After the plug-in is installed, in order to enable it for Building and Running Ethanon source files, open any <code>*.angelscript</code> file (like the <code>main.angelscript</code>) with Sublime Text, click <code>Tools</code> &gt; <code>Build System</code> &gt; <code>Ethanon</code>. As shown below:</p>\r\n<p><a href="https://dl.dropboxusercontent.com/u/42072982/ethanon_share/gfx/sublime-plugin-enable.png" target="_blank"><img src="https://dl.dropboxusercontent.com/u/42072982/ethanon_share/gfx/sublime-plugin-enable.png" alt="" width="40%" height="40%" /></a></p>\r\n<h2>The basics <small>project and scene setup</small></h2>\r\n<ul class="thumbnails">\r\n<li class="span7">\r\n<div class="thumbnail"><a href="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/quick-start-guide/01.0.png" target="_blank"> <img src="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/quick-start-guide/01.0.png" alt="" /> </a>\r\n<p>Open the <strong>Ethanon Editor</strong>, click <code>File</code> and <code>New project...</code></p>\r\n</div>\r\n</li>\r\n<li class="span7">\r\n<div class="thumbnail"><a href="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/quick-start-guide/02.0.png" target="_blank"> <img src="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/quick-start-guide/02.0.png" alt="" /> </a>\r\n<p>Create a new folder for our new project, give it a name and save the <code>.ethproj</code> file</p>\r\n</div>\r\n</li>\r\n<li class="span7">\r\n<div class="thumbnail"><a href="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/quick-start-guide/03.0.png" target="_blank"> <img src="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/quick-start-guide/03.0.png" alt="" /> </a>\r\n<p>Enter the <code>Entity editor</code> tab</p>\r\n</div>\r\n</li>\r\n<li class="span7">\r\n<div class="thumbnail"><a href="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/quick-start-guide/04.0.png" target="_blank"> <img src="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/quick-start-guide/04.0.png" alt="" /> </a>\r\n<p>Copy the <a href="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/quick-start-guide/spaceship.png" target="_blank">spaceship.png</a> file into the <code>/ee-hello-world/entities/</code> directory.</p>\r\n<p>Click <code>Add resources</code> and select <code>Add entity bitmap</code></p>\r\n</div>\r\n</li>\r\n<li class="span7">\r\n<div class="thumbnail"><a href="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/quick-start-guide/05.0.png" target="_blank"> <img src="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/quick-start-guide/05.0.png" alt="" /> </a>\r\n<p>Choose your <code>spaceship.png</code> file</p>\r\n</div>\r\n</li>\r\n<li class="span7">\r\n<div class="thumbnail"><a href="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/quick-start-guide/06.0.png" target="_blank"> <img src="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/quick-start-guide/06.0.png" alt="" /> </a>\r\n<p>If everything went right, you will see the space ship sprite in the origin</p>\r\n</div>\r\n</li>\r\n<li class="span7">\r\n<div class="thumbnail"><a href="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/quick-start-guide/07.0.png" target="_blank"> <img src="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/quick-start-guide/07.0.png" alt="" /> </a>\r\n<p>Save the entity as <code>spaceship.ent</code>. Make sure you save it in the folder <code>/ee-hello-world/entities/</code></p>\r\n</div>\r\n</li>\r\n<li class="span7">\r\n<div class="thumbnail"><a href="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/quick-start-guide/08.0.png" target="_blank"> <img src="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/quick-start-guide/08.0.png" alt="" /> </a>\r\n<p>1. Now let''s open the <code>Scene editor</code> tab</p>\r\n<p>2. Move the cursor to the bottom of the window and click the <code>spaceship.ent</code> thumbnail to select it</p>\r\n</div>\r\n</li>\r\n<li class="span7">\r\n<div class="thumbnail"><a href="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/quick-start-guide/09.0.png" target="_blank"> <img src="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/quick-start-guide/09.0.png" alt="" /> </a>\r\n<p>Add one spaceship to scene by clicking where you want to put it</p>\r\n</div>\r\n</li>\r\n<li class="span7">\r\n<div class="thumbnail"><a href="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/quick-start-guide/10.0.png" target="_blank"> <img src="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/quick-start-guide/10.0.png" alt="" /> </a>\r\n<p>Click <code>File</code>, choose <code>Save</code> and save our scene as <code>scenes/first_scene.esc</code></p>\r\n</div>\r\n</li>\r\n</ul>\r\n<h2>The script <small>control spaceship with arrow keys</small></h2>\r\n<p>It''s code time! Open your <code>/ee-hello-world/main.angelscript</code> file with <strong>Ethanon Script Editor</strong> (SciTE), or <a href="http://www.sublimetext.com/" target="_blank"><strong>Sublime Text</strong></a>, this is where all your scripts start.</p>\r\n<p>The lines of code below will use <a href="../../manual/32">entity callbacks</a> to move our spaceship entity with keyboard''s arrow keys.</p>\r\n<pre>void main()\r\n{\r\n	LoadScene("scenes/first_scene.esc");\r\n}\r\n\r\n// the function name must match the entity file name (spaceship.ent -&gt; ETHCallback_spaceship)\r\nvoid ETHCallback_spaceship(ETHEntity@ thisEntity)\r\n{\r\n	ETHInput@ input = GetInputHandle();\r\n\r\n	if (input.KeyDown(K_RIGHT))\r\n		thisEntity.AddToPositionXY(vector2(2.0f, 0.0f));\r\n\r\n	if (input.KeyDown(K_LEFT))\r\n		thisEntity.AddToPositionXY(vector2(-2.0f, 0.0f));\r\n\r\n	if (input.KeyDown(K_UP))\r\n		thisEntity.AddToPositionXY(vector2(0.0f,-2.0f));\r\n\r\n	if (input.KeyDown(K_DOWN))\r\n		thisEntity.AddToPositionXY(vector2(0.0f, 2.0f));\r\n}</pre>\r\n<p>Learn more:</p>\r\n<ul class="nav nav-tabs nav-stacked">\r\n<li><a href="../../manual/32">Entity callbacks</a></li>\r\n<li><a href="../../api/class/9">ETHEntity object</a></li>\r\n<li><a href="../../api/class/10">ETHInput object</a></li>\r\n</ul>\r\n<p>Try adding more entities, changing movement speed or anything your imagination comes up with!</p>\r\n<h2>Tutorials <small>step-by-step guide</small></h2>\r\n<p>More examples in the <a href="https://github.com/asantee/ethanon-samples">ethanon-samples repository at GitHub</a>:</p>\r\n<ul class="thumbnails">\r\n<li class="span2"><a class="thumbnail" href="https://github.com/asantee/ethanon-samples/tree/master/quick-start/01-moving-spaceship"> <img src="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/samples/01-moving-spaceship.png" alt="" /> </a></li>\r\n<li class="span2"><a class="thumbnail" href="https://github.com/asantee/ethanon-samples/tree/master/quick-start/02-shooting-spaceship"> <img src="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/samples/02-shooting-spaceship.png" alt="" /> </a></li>\r\n<li class="span2"><a class="thumbnail" href="https://github.com/asantee/ethanon-samples/tree/master/quick-start/03-fps-independent-movement"> <img src="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/samples/03-fps-independent-movement.png" alt="" /> </a></li>\r\n<li class="span2"><a class="thumbnail" href="https://github.com/asantee/ethanon-samples/tree/master/quick-start/04-audio-samples"> <img src="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/samples/04-audio-samples.png" alt="" /> </a></li>\r\n<li class="span2"><a class="thumbnail" href="https://github.com/asantee/ethanon-samples/tree/master/quick-start/05-buttons-and-scene-change"> <img src="https://dl.dropbox.com/u/42072982/ethanon_share/gfx/samples/05-buttons-and-scene-change.png" alt="" /> </a></li>\r\n</ul>', 1),
(82, 78, 117, 118, 'Shared data', '<p>Ethanon engine provides an easy way to share data across the gameplay script code and the platform-specific side (Java on Android and Objective-C on iOS). The <strong>Shared Data System</strong> is a map of strings that allows quick read/write access to string-based data that are safely and statically shared across these layers of code.</p>\r\n<h3>iOS, Windows and OS X (C++)</h3>\r\n<p>On platforms that are essentially based on native code, therefore use the C++ language, shared data is accessible trough the <code>SharedDataManager</code> object, statically declared in the <code>ethanon/toolkit/Source/src/gs2d/src/Application.h</code> header file:</p>\r\n<pre>// writing/creating custom data:\r\ngs2d::Application::SharedData.Set(GS_L("com.mygame.playerName"), GS_L("Bob"));\r\n\r\n// getting custom data values\r\ngs2d::str_type::string playerName = gs2d::Application::SharedData.Get(GS_L("com.mygame.playerName"));\r\n</pre>\r\n<h3>AngelScript</h3>\r\n<p>The following functions provide reading and writing functionalities to the script side:</p>\r\n<pre>bool SetSharedData(string key, string value)\r\nbool IsSharedDataConstant(string key)\r\nstring GetSharedData(string key)\r\nbool SharedDataExists(string key)\r\nbool RemoveSharedData(string key)</pre>\r\n<h3>Android</h3>\r\n<p>Shared data is accessible on the Java side through the following JNI interface:</p>\r\n<pre>package net.asantee.gs2d;\r\n\r\npublic class GS2DJNI {\r\n	. . .\r\n	// shared data method bindings\r\n	public static native String getSharedData(String key);\r\n	public static native void setSharedData(String key, String value);\r\n	public static native void createConstSharedData(String key, String value);\r\n}</pre>\r\n<h3>Remarks</h3>\r\n<p>Shared data persists as long as the instance of the game application is running, and can be accessed at any time. The <code>SharedDataManager</code> behaves as a singleton for the entire application, which means that all interfaces that provide access to it share the exact same data source. Some data are marked as constant and cannot be written after created.</p>', 1);

-- --------------------------------------------------------

--
-- Table structure for table `users`
--

CREATE TABLE IF NOT EXISTS `users` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `username` varchar(50) COLLATE utf8_bin DEFAULT NULL,
  `password` varchar(50) COLLATE utf8_bin DEFAULT NULL,
  `role` varchar(20) COLLATE utf8_bin DEFAULT NULL,
  `created` datetime DEFAULT NULL,
  `modified` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COLLATE=utf8_bin AUTO_INCREMENT=2 ;

--
-- Dumping data for table `users`
--

INSERT INTO `users` (`id`, `username`, `password`, `role`, `created`, `modified`) VALUES
(1, 'porkaria', '9f651ecc9d3658d4f9b12765c5565e2b7e819f7c', 'admin', '2012-09-25 21:58:56', '2012-09-25 21:58:56');
