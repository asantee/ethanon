// sprite and screen properties
uniform float4x4 rotationMatrix;
uniform float2 screenSize;
uniform float2 size;
uniform float2 entityPos;
uniform float2 center;
uniform float2 bitmapSize;
uniform float2 rectPos;
uniform float2 rectSize;
uniform float2 scroll;
uniform float2 multiply;
uniform float4 color0;
uniform float4 color1;
uniform float4 color2;
uniform float4 color3;
uniform float2 flipAdd;
uniform float2 flipMul;
uniform float2 cameraPos;
uniform float depth;

uniform float3 parallaxOrigin_verticalIntensity;
uniform float parallaxIntensity;
uniform float3 entityPos3D;





float2 computeParallaxOffset(const float2 vertPos)
{
	const float2 parallaxOrigin = parallaxOrigin_verticalIntensity.xy;
	return ((vertPos - parallaxOrigin) / screenSize.x) * entityPos3D.z * parallaxIntensity;
}

struct SPRITE_TRANSFORM
{
	float4 position;
	float2 vertPos;
};
SPRITE_TRANSFORM transformSprite_ppl(float3 position)
{
	SPRITE_TRANSFORM r;
	float4 newPos = float4(position, 1);
	newPos = newPos * float4(size,1,1) - float4(center, 0, 0);
	newPos = mul(rotationMatrix, newPos) + float4(entityPos,0,0);
	r.vertPos = newPos.xy / screenSize;

	// project the vertex on the screen
	newPos -= float4(cameraPos,0,0);
	newPos += float4(computeParallaxOffset(newPos),0,0) - float4(screenSize / 2,0,0);
	newPos *= float4(1,-1,1,1);
	r.position = float4(newPos.x / (screenSize.x * 0.5), newPos.y / (screenSize.y * 0.5), newPos.z, newPos.w);
	return r;
}

// returns the texture coordinate according to the rect
float2 transformCoord(float2 texCoord)
{
	float2 newCoord = texCoord * (rectSize / bitmapSize);
	newCoord += (rectPos / bitmapSize);
	return (newCoord + (scroll / bitmapSize)) * multiply;
}

void main(float3 position : POSITION,
			float2 texCoord : TEXCOORD0,
			out float4 oPosition : POSITION,
			out float4 oColor    : COLOR0,
			out float2 oTexCoord : TEXCOORD0,
			out float3 oVertPos3D : TEXCOORD1,
			uniform float3 topLeft3DPos)
			
{
	SPRITE_TRANSFORM transform = transformSprite_ppl(position);

	transform.position.z = 1 - depth;

	oPosition = transform.position;
	oVertPos3D = topLeft3DPos + (position * float3(size,1));
	oTexCoord = transformCoord(texCoord);
	oColor = color0;
}
