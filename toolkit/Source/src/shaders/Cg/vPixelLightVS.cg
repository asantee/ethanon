// sprite and screen properties
uniform float4x4 rotationMatrix;
uniform float2 screenSize;
uniform float2 size;
uniform float2 entityPos;
uniform float2 center;
uniform float2 bitmapSize;
uniform float2 rectPos;
uniform float2 rectSize;
uniform float2 scroll;
uniform float2 multiply;
uniform float4 color0;
uniform float4 color1;
uniform float4 color2;
uniform float4 color3;
uniform float2 flipAdd;
uniform float2 flipMul;
uniform float2 cameraPos;
uniform float depth;

uniform float3 parallaxOrigin_verticalIntensity;
uniform float parallaxIntensity;
uniform float3 entityPos3D;
float computeVerticalOffsetInPixels(const float posY, const float rectSizeY)
{
	return ((1 - posY) * rectSizeY);
}

float2 computeParallaxOffset(const float2 vertPos, float3 inPosition)
{
	const float vOffset = computeVerticalOffsetInPixels(inPosition.y, rectSize.y);
	const float2 parallaxOrigin = parallaxOrigin_verticalIntensity.xy;
	const float verticalIntensity = parallaxOrigin_verticalIntensity.z;
	return ((vertPos - parallaxOrigin) / screenSize.x) * (entityPos3D.z + (vOffset * verticalIntensity)) * parallaxIntensity;
}

float4 transformSprite(float3 position)
{
	float4 newPos = float4(position, 1);

	// scales and position the sprite center
	newPos = newPos * float4(size,1,1) - float4(center, 0, 0);

	// rotates the sprite
	newPos = mul(rotationMatrix, newPos);

	// position the sprite according to screen space
	newPos += float4(entityPos,0,0) - float4(cameraPos,0,0);
	newPos += float4(computeParallaxOffset(newPos.xy, position),0,0) - float4(screenSize / 2,0,0);

	// inverts the y coordinate
	newPos *= float4(1,-1,1,1);
	return float4(newPos.x / (screenSize.x * 0.5), newPos.y / (screenSize.y * 0.5), newPos.z, newPos.w);
}

// returns the texture coordinate according to the rect
float2 transformCoord(float2 texCoord)
{
	float2 newCoord = texCoord * (rectSize / bitmapSize);
	newCoord += (rectPos / bitmapSize);
	return (newCoord + (scroll / bitmapSize)) * multiply;
}

void main(float3 position : POSITION,
			float2 texCoord : TEXCOORD0,
			out float4 oPosition : POSITION,
			out float4 oColor    : COLOR0,
			out float2 oTexCoord : TEXCOORD0,
			out float3 oVertPos3D : TEXCOORD1,
			uniform float3 topLeft3DPos,
			uniform float spaceLength)
{
	float4 outPos = transformSprite(position);
	outPos.z = (1 - depth) - ((computeVerticalOffsetInPixels(position.y, rectSize.y)) / spaceLength);

	oPosition = outPos;
	oVertPos3D = topLeft3DPos + (float3(position.x,0,position.y) * float3(size.x,0,-size.y));
	oTexCoord = transformCoord(texCoord);
	oColor = color0;
}
