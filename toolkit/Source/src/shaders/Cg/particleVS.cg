// the following global uniform parameters are set automaticaly
// by the GameSpaceLib runtime

// sprite and screen properties:
uniform float4x4 rotationMatrix; // sprite rotation matrix
uniform float2 screenSize;       // current screen size
uniform float2 size;             // sprite width and height
uniform float2 entityPos;        // sprite position
uniform float2 center;           // sprite origin (in pixels)
uniform float2 bitmapSize;       // sprite size
uniform float2 rectPos;          // texture rect cut position (in pixels)
uniform float2 rectSize;         // texture rect cut size (in pixels)
uniform float2 scroll;           // texture scroll parameter
uniform float2 multiply;         // texture multiply
uniform float4 color0;           // left-top vertex color
uniform float4 color1;           // right-top vertex color
uniform float4 color2;           // left-bottom vertex color
uniform float4 color3;           // right-bottom vertex color
uniform float2 flipAdd;          // this is added to the vertex position to flip it
uniform float2 flipMul;          // this is multiplied by the vertex position do flip it
uniform float2 cameraPos;
uniform float depth;

// returns the sprite vertex position according to it's
// origin in screen space and rotation angle
float4 transformSprite(float3 position)
{
	// flips the sprite (if the parameters are set to flip)
	float4 newPos = float4(position, 1);

	// scales and position the sprite center
	newPos = newPos * float4(size,1,1) - float4(center, 0, 0);

	// rotates the sprite
	newPos = mul(rotationMatrix, newPos);

	// position the sprite according to the screen space
	newPos += float4(entityPos,0,0)-float4(screenSize/2,0,0)-float4(cameraPos,0,0);

	// inverts the y coordinate
	newPos *= float4(1,-1,1,1);
	return float4(newPos.x / (screenSize.x * 0.5), newPos.y / (screenSize.y * 0.5), newPos.z, newPos.w);
}

// returns the texture coordinate according to the rect
float2 transformCoord(float2 texCoord)
{
	// adjusts the texture coordinate according to the cut-rect
	float2 newCoord = texCoord * (rectSize/bitmapSize);
	newCoord += (rectPos/bitmapSize);

	// scrolls and multiplies the texture
	return (newCoord);
}

void main(	float3 position : POSITION,
			float2 texCoord : TEXCOORD0,
			out float4 oPosition : POSITION,
			out float4 oColor    : COLOR0,
			out float2 oTexCoord0 : TEXCOORD0)
{
	float4 outPos = transformSprite(position);
	outPos.z = 1-depth;
	oPosition = outPos;
	float2 coord = transformCoord(texCoord);
	oTexCoord0 = coord;
	oColor = color0;
}