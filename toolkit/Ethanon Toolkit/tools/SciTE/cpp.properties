# sma files are Small script (C-like)
file.patterns.angelscript=*.angelscript
file.patterns.cpp=*.c;*.cc;*.cpp;*.cxx;*.h;*.hh;*.hpp;*.hxx;*.ipp;*.sma
file.patterns.cplusplus=*.cc;*.cpp;*.cxx
# jad = decompiled class files; pde = Processing.org sketch files
file.patterns.java=*.java;*.jad;*.pde
file.patterns.javafx=*.fx
# pln, inc and t are SilkTest (4Test) files.
file.patterns.test=*.pln;*.inc;*.t
# es = JS dialect of Abobe for SVG
file.patterns.js=*.js;*.es
file.patterns.cs=*.cs
file.patterns.rc=*.rc;*.rc2;*.dlg
file.patterns.idl=*.idl;*.odl
file.patterns.flash=*.as;*.asc;*.jsfl
file.patterns.ch=*.ch;*.chf;*.chs
file.patterns.vala=*.vala
file.patterns.c.like=$(file.patterns.cpp);$(file.patterns.cs);$(file.patterns.idl);$(file.patterns.java);$(file.patterns.js);$(file.patterns.flash);$(file.patterns.ch);$(file.patterns.vala)

shbang.tcc=cpp
shbang.tinycc=cpp

filter.cpp=C/C++ (c cc cpp cxx cs vala h hh hxx hpp ipp dlg rc rc2 mak)|\
$(file.patterns.cpp);$(file.patterns.cs);$(file.patterns.rc);$(file.patterns.vala);*.mak;make*|
filter.angelscript=AngelScript (angelscript)|*.angelscript|
filter.java=Java (java)|*.java|
filter.js=JavaScript (js es)|$(file.patterns.js)|
filter.idl=IDL (idl odl)|$(file.patterns.idl)|
filter.test=SilkTest (pln inc t)|$(file.patterns.test)|
filter.flash=Flash (as asc jsfl)|$(file.patterns.flash)|
filter.ch=Ch (ch chf chs)|$(file.patterns.ch)|

lexer.$(file.patterns.java)=cpp
lexer.$(file.patterns.angelscript)=cpp
lexer.$(file.patterns.javafx)=cpp
lexer.$(file.patterns.cpp)=cpp
lexer.$(file.patterns.rc)=cpp
lexer.$(file.patterns.idl)=cpp
lexer.$(file.patterns.cs)=cpp
lexer.$(file.patterns.js)=cpp
lexer.$(file.patterns.test)=cpp
lexer.$(file.patterns.flash)=cpp
lexer.$(file.patterns.ch)=cpp
lexer.$(file.patterns.vala)=cpp

keywordclass.cpp=and and_eq asm auto bitand bitor bool break \
case catch char class compl const const_cast continue \
default delete do double dynamic_cast else enum explicit export extern false float for \
friend goto if inline int long mutable namespace new not not_eq \
operator or or_eq private protected public \
register reinterpret_cast return short signed sizeof static static_cast struct switch \
template this throw true try typedef typeid typename union unsigned using \
virtual void volatile wchar_t while xor xor_eq
keywords.$(file.patterns.cpp)=$(keywordclass.cpp)

keywordclass.angelscript=and bool break case cast class const continue default do double \
else enum false float for from if import in inout int interface private \
int8 int16 int32 int64 is not null or out return super switch \
this true typedef uint uint8 uint16 uint32 uint64 void while xor \
file string vector2 vector3 ETHInput ETHEntity ENTITY_TYPE DATA_TYPE PIXEL_FORMAT KEY_STATE J_STATUS \
J_KEY KEY collisionBox GetInputHandle SeekEntity print LoadScene \
GetTimeF GetTime UnitsPerSecond Exit AddEntity DeleteEntity GenerateLightmaps \
rand randF SetAmbientLight GetAmbientLight SetWindowProperties GetScreenWidth GetScreenHeight SetCameraPos AddToCameraPos \
GetCameraPos EnableLightmaps UsePixelShaders DrawText DrawFadingText GetFPSRate AddLight HideCursor \
LoadMusic LoadSoundEffect PlaySample LoopSample StopSample PauseSample SetSampleVolume SetSamplePan \
SampleExists IsSamplePlaying Collide Collide CollideStatic CollideDynamic GetNumEntities GetLastID \
AddFloatData AddIntData AddUIntData AddStringData AddVector2Data AddVector3Data SaveScene GetMaxHeight GetMinHeight normalize \
radianToDegree degreeToRadian ARGB LoadSprite DrawSprite DrawShapedSprite GetSpriteSize DrawRectangle \
DrawLine GetSceneFileName PlayCutscene GetBucket \
cos sin tan asin acos atan atan2 cosh sinh tanh max min log log10 pow sqrt \
ceil floor abs fraction KS_HIT KS_UP KS_DOWN KS_RELEASE PF32BIT PF16BIT PFUNKNOWN \
DT_NODATA DT_INT DT_UINT DT_FLOAT DT_STRING DT_VECTOR2 DT_VECTOR3 ET_HORIZONTAL ET_VERTICAL ET_OVERALL \
ET_GROUND_DECAL ET_OPAQUE_DECAL JS_DETECTED JS_NOTDETECTED JS_INVALID \
K_UP K_DOWN K_LEFT K_RIGHT K_PAGEDOWN K_PAGEUP K_SPACE K_ENTER \
K_DELETE K_HOME K_END K_INSERT K_PAUSE K_ESC K_BACK K_BACKSPACE K_TAB K_PRINTSCREEN \
K_SUBTRACT K_ADD K_F1 K_F2 K_F3 K_F4 K_F5 K_F6 K_F7 K_F8 K_F9 \
K_F10 K_F11 K_F12 K_F13 K_F14 K_F15 K_F16 K_F17 K_F18 K_F19 K_F20 K_F21 \
K_F22 K_F23 K_F24 K_A K_B K_C K_D K_E K_F K_G K_H K_I K_J K_K K_L K_M K_N \
K_O K_P K_Q K_R K_S K_T K_U K_V K_W K_X K_Y K_Z K_0 K_1 K_2 K_3 K_4 K_5 \
K_6 K_7 K_8 K_9 K_MINUS K_PLUS K_COMMA K_DOT K_CTRL K_ALT K_SHIFT K_RMOUSE \
K_LMOUSE K_MMOUSE JK_01 JK_02 JK_03 JK_04 JK_05 JK_06 JK_07 JK_08 JK_09 JK_10 JK_11 JK_12 JK_13 JK_14 \
JK_15 JK_16 JK_17 JK_18 JK_19 JK_20 JK_21 JK_22 JK_23 JK_24 JK_25 JK_26 JK_27 JK_28 JK_29 JK_30 JK_31 \
JK_32 JK_UP JK_DOWN JK_LEFT JK_RIGHT GetScreenSize Windowed K_RETURN videoMode \
GetVideoModeCount GetVideoMode K_NUMPAD0 K_NUMPAD1 K_NUMPAD2 K_NUMPAD3 K_NUMPAD4 \
K_NUMPAD5 K_NUMPAD6 K_NUMPAD7 K_NUMPAD8 K_NUMPAD9 SetBackgroundImage GetBackgroundImage \
PositionBackgroundImage SetBackgroundColor GetSystemScreenSize RunQuickCallback \
GetEntityArray ETHEntityArray GetEntitiesFromBucket funcdef ET_LAYERABLE \
IsPixelShaderSupported GetProgramPath DrawSpriteZ DrawShapedSpriteZ dictionary EnableQuitKeys \
EnableRealTimeShadows SetPositionRoundUp GetStringFromFile SaveStringToFile \
enmlFile enmlEntity dateTime SetBorderBucketsDrawing IsDrawingBorderBuckets GetAbsolutePath \
GetVisibleEntities GetIntersectingEntities GetLastCameraPos GetNumRenderedEntities ParseFloat ParseInt ParseUInt \
GetArgc GetArgv GetWorldSpaceCursorPos2 GetWorldSpaceCursorPos3 matrix4x4 scale translate rotateX rotateY rotateZ \
multiply getAngle SetBackgroundAlphaModulate SetBackgroundAlphaPixel SetBackgroundAlphaAdd array \
ComputeCarretPosition ComputeTextBoxSize length sign distance PI PIb
keywords.$(file.patterns.angelscript)=$(keywordclass.angelscript)

# keywords2 is for highlighting user defined keywords or function calls or similar
#keywords2.$(file.patterns.cpp)=file

# keywords3 is for doc comment keywords, highlighted in style 17
#CPP doxygen
file.patterns.doxygen.langs=$(file.patterns.cpp);$(file.patterns.java)
keywordclass.doxygen=a addindex addtogroup anchor arg attention \
author b brief bug c class code date def defgroup deprecated dontinclude \
e em endcode endhtmlonly endif endlatexonly endlink endverbatim enum example exception \
f$ f[ f] file fn hideinitializer htmlinclude htmlonly \
if image include ingroup internal invariant interface latexonly li line link \
mainpage name namespace nosubgrouping note overload \
p page par param param[in] param[out] \
post pre ref relates remarks return retval \
sa section see showinitializer since skip skipline struct subsection \
test throw throws todo typedef union until \
var verbatim verbinclude version warning weakgroup $ @ \ & < > # { }
keywords3.$(file.patterns.doxygen.langs)=$(keywordclass.doxygen)

word.chars.cxx=$(chars.alpha)$(chars.numeric)_#
word.characters.$(file.patterns.cpp)=$(word.chars.cxx)
calltip.cpp.word.characters=$(chars.alpha)$(chars.numeric)_
comment.block.cpp=//~
#comment.block.at.line.start.cpp=1
comment.stream.start.cpp=/*
comment.stream.end.cpp=*/
comment.box.start.cpp=/*
comment.box.middle.cpp= *
comment.box.end.cpp= */
#fold.at.else=1

word.characters.$(file.patterns.javafx)=$(word.chars.cxx)$-

file.patterns.c.except.cpp=$(file.patterns.cs);$(file.patterns.idl);*.java;$(file.patterns.flash);$(file.patterns.ch)
statement.indent.$(file.patterns.c.except.cpp)=5 case default do else for if while
statement.indent.$(file.patterns.cpp)=5 case default do else for if private protected public while
statement.end.$(file.patterns.c.like)=10 ;
statement.lookback.$(file.patterns.c.like)=20
block.start.$(file.patterns.c.like)=10 {
block.end.$(file.patterns.c.like)=10 }

#autocomplete.cpp.fillups=(

#styling.within.preprocessor=1
preprocessor.symbol.$(file.patterns.cpp)=#
preprocessor.start.$(file.patterns.cpp)=if ifdef ifndef
preprocessor.middle.$(file.patterns.cpp)=else elif
preprocessor.end.$(file.patterns.cpp)=endif

preprocessor.symbol.$(file.patterns.cs)=#
preprocessor.start.$(file.patterns.cs)=if region
preprocessor.middle.$(file.patterns.cs)=else elif
preprocessor.end.$(file.patterns.cs)=endif endregion

keywordclass.ch=\
auto array bool break case char class complex ComplexInf ComplexNaN \
const continue default delete \
do double else enum export extern float for foreach goto if Inf inline int \
long namespace NaN new NULL private public register restrict return short \
signed sizeof static string_t struct switch this typedef union unsigned \
using void volatile wchar_t while __declspec
keywords.$(file.patterns.ch)=$(keywordclass.ch)
word.chars.ch=$(chars.alpha)$(chars.numeric)_#
word.characters.$(file.patterns.ch)=$(word.chars.cxx)
comment.block.ch=//~
#comment.block.at.line.start.ch=1
comment.stream.start.ch=/*
comment.stream.end.ch=*/
comment.box.start.ch=/*
comment.box.middle.ch= *
comment.box.end.ch= */
preprocessor.symbol.$(file.patterns.ch)=#
preprocessor.start.$(file.patterns.ch)=if ifdef ifndef
preprocessor.middle.$(file.patterns.ch)=else elif
preprocessor.end.$(file.patterns.ch)=endif

keywordclass.cs=abstract as base bool break byte case catch char checked class \
const continue decimal default delegate do double else enum \
event explicit extern false finally fixed float for foreach goto if \
implicit in int interface internal is lock long namespace new null \
object operator out override params private protected public \
readonly ref return sbyte sealed short sizeof stackalloc static \
string struct switch this throw true try typeof uint ulong \
unchecked unsafe ushort using virtual void while
keywords.$(file.patterns.cs)=$(keywordclass.cs)
word.characters.$(file.patterns.cs)=$(word.chars.cxx)

keywordclass.rc=\
ACCELERATORS ALT AUTO3STATE AUTOCHECKBOX AUTORADIOBUTTON \
BEGIN BITMAP BLOCK BUTTON CAPTION CHARACTERISTICS CHECKBOX CLASS \
COMBOBOX CONTROL CTEXT CURSOR DEFPUSHBUTTON DIALOG DIALOGEX DISCARDABLE \
EDITTEXT END EXSTYLE FONT GROUPBOX ICON LANGUAGE LISTBOX LTEXT \
MENU MENUEX MENUITEM MESSAGETABLE POPUP \
PUSHBUTTON RADIOBUTTON RCDATA RTEXT SCROLLBAR SEPARATOR SHIFT STATE3 \
STRINGTABLE STYLE TEXTINCLUDE VALUE VERSION VERSIONINFO VIRTKEY
keywords.$(file.patterns.rc)=$(keywordclass.rc)

keywordclass.idl=\
aggregatable allocate appobject arrays async async_uuid \
auto_handle \
bindable boolean broadcast byte byte_count \
call_as callback char coclass code comm_status \
const context_handle context_handle_noserialize \
context_handle_serialize control cpp_quote custom \
decode default defaultbind defaultcollelem \
defaultvalue defaultvtable dispinterface displaybind dllname \
double dual \
enable_allocate encode endpoint entry enum error_status_t \
explicit_handle \
fault_status first_is float \
handle_t heap helpcontext helpfile helpstring \
helpstringcontext helpstringdll hidden hyper \
id idempotent ignore iid_as iid_is immediatebind implicit_handle \
import importlib in include in_line int __int64 __int3264 interface \
last_is lcid length_is library licensed local long \
max_is maybe message methods midl_pragma \
midl_user_allocate midl_user_free min_is module ms_union \
ncacn_at_dsp ncacn_dnet_nsp ncacn_http ncacn_ip_tcp \
ncacn_nb_ipx ncacn_nb_nb ncacn_nb_tcp ncacn_np \
ncacn_spx ncacn_vns_spp ncadg_ip_udp ncadg_ipx ncadg_mq \
ncalrpc nocode nonbrowsable noncreatable nonextensible notify \
object odl oleautomation optimize optional out out_of_line \
pipe pointer_default pragma properties propget propput propputref \
ptr public \
range readonly ref represent_as requestedit restricted retval \
shape short signed size_is small source strict_context_handle \
string struct switch switch_is switch_type \
transmit_as typedef \
uidefault union unique unsigned user_marshal usesgetlasterror uuid \
v1_enum vararg version void wchar_t wire_marshal

keywordclass.msidl=handle
keywordclass.xpidl=attribute native noscript scriptable shared wstring inout
keywords.$(file.patterns.idl)=$(keywordclass.idl) $(keywordclass.xpidl)

# http://java.sun.com/docs/books/tutorial/java/nutsandbolts/_keywords.html
keywordclass.java=abstract assert boolean break byte case catch char class \
const continue default do double else enum extends final finally float for \
goto if implements import instanceof int interface long \
native new package private protected public \
return short static strictfp super switch synchronized this throw throws \
transient try var void volatile while
keywords.$(file.patterns.java)=$(keywordclass.java)

keywordclass.javafx=abstract after and as assert at attribute before bind bound break \
catch class continue def delete else exclusive extends false finally for from function \
if import indexof insert instanceof lazy mod new not null \
or override package private protected public-init public public-read \
return reverse sizeof static super then this throw true try typeof \
var while
keywords.$(file.patterns.javafx)=$(keywordclass.javafx)
# Base types and global functions (defined in javafx.lang.Builtins and javafx.lang.FX)
# And now language words deprecated from their keyword status...
keywords2.$(file.patterns.javafx)=Boolean Duration Integer Number Object String Void \
Character Byte Short Long Float Double \
isInitialized isSameObject print println \
first in init into inverse last on postinit replace step trigger tween where with
# I don't know what first and last nor trigger do. Neither lazy or typeof...

keywordclass.javascript=abstract boolean break byte case catch char class \
const continue debugger default delete do double else enum export extends \
final finally float for function goto if implements import in instanceof \
int interface long native new package private protected public \
return short static super switch synchronized this throw throws \
transient try typeof var void volatile while with
keywords.$(file.patterns.js)=$(keywordclass.javascript)

keywordclass.flash=add and break case catch class continue default delete do \
dynamic else eq extends false finally for function ge get gt if implements import in \
instanceof interface intrinsic le lt ne new not null or private public return \
set static super switch this throw true try typeof undefined var void while with

keywordclass2.flash=Array Arguments Accessibility Boolean Button Camera Color \
ContextMenu ContextMenuItem Date Error Function Key LoadVars LocalConnection Math \
Microphone Mouse MovieClip MovieClipLoader NetConnection NetStream Number Object \
PrintJob Selection SharedObject Sound Stage String StyleSheet System TextField \
TextFormat TextSnapshot Video Void XML XMLNode XMLSocket \
_accProps _focusrect _global _highquality _parent _quality _root _soundbuftime \
arguments asfunction call capabilities chr clearInterval duplicateMovieClip \
escape eval fscommand getProperty getTimer getURL getVersion gotoAndPlay gotoAndStop \
ifFrameLoaded Infinity -Infinity int isFinite isNaN length loadMovie loadMovieNum \
loadVariables loadVariablesNum maxscroll mbchr mblength mbord mbsubstring MMExecute \
NaN newline nextFrame nextScene on onClipEvent onUpdate ord parseFloat parseInt play \
prevFrame prevScene print printAsBitmap printAsBitmapNum printNum random removeMovieClip \
scroll set setInterval setProperty startDrag stop stopAllSounds stopDrag substring \
targetPath tellTarget toggleHighQuality trace unescape unloadMovie unLoadMovieNum updateAfterEvent

keywords.$(file.patterns.flash)=$(keywordclass.flash)
keywords2.$(file.patterns.flash)=$(keywordclass2.flash)

keywordclass.vala=if else switch case default break continue return yield for foreach in \
do while try catch finally throw

keywordclass2.vala=namespace interface class struct enum delegate signal errordomain \
construct get set value base const static var dynamic weak unowned virtual abstract \
override public protected private extern throws requires ensures yields out ref lock \
using true false null delete generic new this typeof sizeof as owned int string char bool

keywords.$(file.patterns.vala))=$(keywordclass.vala)
keywords2.$(file.patterns.vala)=$(keywordclass2.vala)

# C++ styles

# Default
style.cpp.32=$(font.base)
# White space
style.cpp.0=fore:#808080
# Comment: /* */.
style.cpp.1=$(colour.code.comment.box),$(font.code.comment.box)
# Line Comment: //.
style.cpp.2=$(colour.code.comment.line),$(font.code.comment.line)
# Doc comment: block comments beginning with /** or /*!
style.cpp.3=$(colour.code.comment.doc),$(font.code.comment.doc)
# Number
style.cpp.4=$(colour.number)
# Keyword
style.cpp.5=$(colour.keyword),bold
# Double quoted string
style.cpp.6=$(colour.string)
# Single quoted string
style.cpp.7=$(colour.char)
# UUIDs (only in IDL)
style.cpp.8=fore:#804080
# Preprocessor
style.cpp.9=$(colour.preproc)
# Operators
style.cpp.10=$(colour.operator),bold
# Identifiers
style.cpp.11=
# End of line where string is not closed
style.cpp.12=fore:#000000,$(font.monospace),back:#E0C0E0,eolfilled
# Verbatim strings for C#
style.cpp.13=fore:#007F00,$(font.monospace),back:#E0FFE0,eolfilled
# Regular expressions for JavaScript
style.cpp.14=fore:#3F7F3F,$(font.monospace),back:#E0F0FF,eolfilled
# Doc Comment Line: line comments beginning with /// or //!.
style.cpp.15=$(colour.code.comment.doc),$(font.code.comment.doc)
# Keywords2
style.cpp.16=fore:#B00040
# Comment keyword
style.cpp.17=fore:#3060A0,$(font.code.comment.doc)
# Comment keyword error
style.cpp.18=fore:#804020,$(font.code.comment.doc)
# Braces are only matched in operator style
braces.cpp.style=10

ccopts=-pedantic -Os
cc=g++ $(ccopts) -c $(FileNameExt) -o $(FileName).o
ccc=gcc $(ccopts) -c $(FileNameExt) -o $(FileName).o

make.command=make
command.compile.*.c=$(ccc) -std=c99
command.build.*.c=$(make.command)
command.build.*.h=$(make.command)
command.go.*.c=./$(FileName)
# To make the Go command both compile (if needed) and execute, use this setting:
#command.go.needs.*.c=gcc $(ccopts) -std=c99 $(FileNameExt) -o $(FileName)

command.compile.$(file.patterns.cplusplus)=$(cc)
command.build.$(file.patterns.cplusplus)=$(make.command)
command.go.$(file.patterns.cplusplus)=./$(FileName)
command.go.needs.$(file.patterns.cplusplus)=g++ $(ccopts) $(FileNameExt) -o $(FileName)

command.name.0.$(file.patterns.cpp)=Indent
command.0.$(file.patterns.cpp)=astyle -tapOK -M8 $(FileNameExt)
command.is.filter.0.$(file.patterns.cpp)=1

command.name.1.$(file.patterns.cplusplus)=Lint
command.1.$(file.patterns.cplusplus)=g++ -W -Wall -Wshadow -Wwrite-strings -Wold-style-cast \
	-Woverloaded-virtual -pedantic -Os -fno-exceptions -c $(FileNameExt)

if PLAT_WIN
	command.compile.*.rc=windres $(FileNameExt) $(FileName).o
	command.build.*.rc=$(make.command)
	command.help.$(file.patterns.cpp)=$(CurrentWord)!G:\Program Files\Microsoft Visual Studio\MSDN98\98VSa\1033\MSDNVS6A.COL
	command.help.subsystem.$(file.patterns.cpp)=4
	command.go.*.js=cscript /nologo $(FileNameExt)
# When maintaining old Win16 programs...
#	command.help.$(file.patterns.cpp)=$(CurrentWord)!I:\msvc\help\win31wh.hlp
#	command.help.subsystem.$(file.patterns.cpp)=5

if PLAT_GTK
	command.help.$(file.patterns.cpp)=man $(CurrentWord) | col -b

if PLAT_WIN
	command.build.*.cs=csc /t:winexe $(FileNameExt) /r:system.dll,system.drawing.dll
	command.go.*.cs=$(FileName)
	command.go.subsystem.*.cs=1
if PLAT_GTK
	command.build.*.cs=mcs /t:winexe $(FileNameExt) /r:System,System.Drawing
	command.go.*.cs=mono $(FileName).exe
	command.go.subsystem.*.cs=1

command.compile.*.java=javac $(FileNameExt)
command.build.*.java=javac *.java
command.go.*.java=java -cp . $(FileName)

command.compile.*.fx=javafxc -d bin $(FileNameExt)
command.build.*.fx=javafxc -d bin *.fx
command.go.*.fx=javafx -cp bin $(FileName)

if PLAT_WIN
	command.help.*.java=http://java.sun.com/javase/6/docs/api/java/util/$(CurrentWord).html
	command.help.subsystem.*.java=2

command.compile.*.ch=ch -n $(FileNameExt)
command.build.*.ch=ch -n  $(FileNameExt)
command.go.*.ch=ch -u $(FileNameExt)

#command.compile.*.as=mtasc -strict $(FileNameExt)
#command.build.*.as=mtasc -strict *.as

command.compile.*.fx=javafxc -d . $(FileNameExt)
command.build.*.fx=javafxc -d . *.fx
command.go.*.fx=javafx -cp . $(FileName)

command.build.$(file.patterns.vala)=valac $(FileNameExt)
command.go.*.vala=./$(FileName)

machine=\machine.exe
eecmd= -nowait -testing
eenoruncmd= -norun -nowait

command.go.subsystem.*.angelscript=0
command.go.*.angelscript=$(FileDir)$(machine)$(eecmd)

command.compile.subsystem.*.angelscript=0
command.compile.*.angelscript=$(FileDir)$(machine)$(eenoruncmd)

command.build.subsystem.*.angelscript=0
command.build.*.angelscript=$(FileDir)$(machine)$(eenoruncmd)


